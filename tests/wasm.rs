use keccak_wasm::KeccakHash;
use wasm_bindgen_test::*;

#[wasm_bindgen_test]
fn basic_test() {
	let mut keccak224 = KeccakHash::new(224).map_err(|_|{unreachable!()}).unwrap();
	let mut keccak256 = KeccakHash::new(256).map_err(|_|{unreachable!()}).unwrap();
	let mut keccak384 = KeccakHash::new(384).map_err(|_|{unreachable!()}).unwrap();
	let mut keccak512 = KeccakHash::new(512).map_err(|_|{unreachable!()}).unwrap();

	let bytes = &[0x25, 0x8d, 0xcd, 0xe2, 0x0f, 0x14, 0xb3, 0x5b, 0x68, 0xe6, 0xb5, 0x38, 0x6b, 0x22, 0xed, 0x40, 0xdd, 0xb4, 0xdf, 0xbd, 0xae, 0xcd, 0xd0, 0xe9, 0x92, 0x0f, 0xe7, 0x60, 0x66, 0x9b, 0xf2, 0xb4, 0xac, 0xf7, 0x21, 0x3a, 0xc4, 0xc0, 0xfa, 0xc7, 0x00, 0xc3, 0xbc, 0x9a, 0xa8, 0xe2, 0x09, 0x50, 0xec, 0x72, 0xbb, 0x3b, 0xf6, 0x04, 0x48, 0xc1, 0x46, 0x13, 0x90, 0xda, 0x87, 0xa0, 0x9e, 0xe6, 0xc0, 0xfb, 0x33, 0xbf, 0x44, 0x63];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("974e65c9a71ac406df9607e1c145e37e009a2dd07b0d64ec4852d8f9"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("8afe7e126f85338db9392ab2f9e3244f08d598d7f665f2318f810052cdbd9266"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("6b2faee3b9dadbe7cf105c7af03810e73e921fa4e8214946a1d8d2d6d8ea5fbf62fa14107a9bf83034a0ba566c02f851"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("fd80e6e380a2be099c0f4a2b8b6559ec8f868032fda2ec54081be4f1471e087ea0bfb3487141a0ceeae7daafbdb0ee54abf43f925406ed7e49c1006a9910110b"));
	let bytes = &[0x62, 0x4f, 0x8d, 0xd4, 0xa1, 0x4e, 0x69, 0x4e, 0x8f, 0x5e, 0xcd, 0x4a, 0x16, 0xfa, 0x61, 0xe9, 0x5e, 0x4f, 0x1d, 0x3d, 0x84, 0x9b, 0x89, 0x51, 0xc0, 0x99, 0x7e, 0x3f, 0x9d, 0x6d, 0xd8, 0xc8, 0x0e, 0xd0, 0x3f, 0x08, 0x9b, 0x28, 0xbf, 0x2a, 0xa0, 0x4a, 0x86, 0x6f, 0x84, 0x64, 0xc0, 0x90, 0xd7, 0xc8, 0x95, 0xda, 0xa3, 0x29, 0x61, 0x32, 0x07, 0xb8, 0x23, 0x5a, 0x03, 0x13, 0xae, 0xf9, 0x9e, 0xf9, 0xdd, 0x3d, 0x08, 0xd5, 0x18];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("da9de42f735c4ba3b9a454c15ffe5b9256c5bbcd6d2d0cb2e9e731f8"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("b2dc700a656dc1d1d71373d73c114cc369ad2d1b7801bc71f95ffb0e92ef6876"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("fee15e11f722a7164e53834894fb0af9e97706bac3438fd853362978a8b47cb95151f5f13b8acfc875b3443223733a73"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("c775ab2b7cbac079625a62ddec6a3f310acb412f064f756e341fb9068ee0ec878e637500dfcce1d763cd69a194fc598aeadc3dd07b851189f3e73dbd51e86cc7"));
	let bytes = &[0xc6, 0xf5, 0xb0, 0x95, 0xcf, 0x41, 0x79, 0xc8, 0x13, 0x61, 0x54, 0xb4, 0xb0, 0x03, 0x29, 0x00, 0x39, 0x34, 0xa3, 0x3b, 0x2d, 0x6a, 0x5c, 0xa3, 0xe5, 0xf6, 0x7f, 0x0d, 0x5f, 0x0b, 0xdf, 0xc5, 0x06, 0xa4, 0xe3, 0xd2, 0xfc, 0x56, 0xe7, 0xf5, 0xc4, 0x86, 0x1d, 0x64, 0x2a, 0x62, 0x98, 0x3c, 0x2a, 0x4c, 0xf1, 0x0e, 0x24, 0xe9, 0x26, 0xd5, 0x25, 0xcf, 0x99, 0x94, 0xb2, 0xc4, 0x09, 0xf9, 0x9d, 0x47, 0x46, 0x1a, 0x95, 0xd5, 0x7a, 0x0b];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("66376600c5d9ba29bffdb798659d9b73a559e786f2e17fa7fbb4c21d"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("ee6607ce2700b22a3e259201c5371701dccdae00b1c1ae48b0f8cee2ef1b28b4"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("0bfcc3d03bd9d357b243e6b76eea31aad523cc278ca9feef2840d7ecebd9b76de08d8239e22eb6038761a6b99623b478"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("8e60ade0b0d56bb3354dc5f9ce4f5ad24aaacfa185cf20d5abd5d2e5737671615009ad7faada6342dac438962cb6ebe0cfd8ade1701b51059fb3bf76ff944f8b"));
	let bytes = &[0xd7, 0x9f, 0x00, 0x70, 0x59, 0x8e, 0xc9, 0x3e, 0x13, 0xf3, 0x88, 0xf2, 0x3d, 0xb8, 0x84, 0x34, 0x39, 0xf2, 0x0c, 0x86, 0x33, 0x9d, 0xb9, 0xe0, 0x31, 0x2e, 0xf0, 0xed, 0xe7, 0x33, 0x56, 0xdb, 0x38, 0x75, 0x3c, 0xbb, 0xf7, 0x5a, 0x24, 0x19, 0xbf, 0xe7, 0x98, 0xaf, 0xc1, 0xe0, 0x01, 0x4d, 0x4d, 0x80, 0x98, 0x78, 0xbf, 0xbe, 0xc0, 0xc2, 0xc0, 0xcc, 0x24, 0x33, 0x47, 0xa4, 0x9b, 0x6a, 0x6c, 0x56, 0x53, 0x87, 0xb1, 0xd1, 0x09, 0x61, 0x4b];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("5c4726369109f0624fd04d6e36394015ae2fe5c73902e7f46b9a1a39"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("2eec34dcb6ef896e60fa9a78e71e97f93fb450e8457c1d46b15dcc1267618f28"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("b2dc24dd3387569d3bc1720ff9969e396559f95ac697d369c8cfc52949a44681b963c0ecc607dac86fa9f595d8513b33"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("173d0b847060716f84fa67272b62da992ee511dd9ca52e43599f3e09bce109cd31094c6d7f3fe223a1695edab182f449dee60aae33a4f417ee43f6a91462de6c"));
	let bytes = &[0x05, 0xa5, 0xa7, 0xb7, 0x42, 0xdf, 0x39, 0xcc, 0xb4, 0x94, 0xea, 0xa8, 0xcd, 0x06, 0x28, 0x71, 0xd6, 0xa9, 0xd6, 0x4f, 0xb0, 0x23, 0x85, 0x8f, 0xcc, 0x79, 0x3b, 0x90, 0xbc, 0x52, 0xf9, 0x3e, 0x24, 0xbc, 0x80, 0x26, 0x07, 0x28, 0x20, 0xb9, 0xbe, 0x9f, 0xe5, 0x29, 0xe0, 0xad, 0xf2, 0x59, 0xea, 0xc6, 0xbd, 0xb7, 0x4d, 0xe1, 0xc6, 0x9e, 0x8a, 0x20, 0x6e, 0xd8, 0x31, 0x67, 0x32, 0x15, 0xee, 0x0d, 0x9c, 0x24, 0x2b, 0x14, 0x8b, 0xbb, 0x72, 0x12];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("5a7a262931f2363db334face29789e27139749773eee4f6f1dd1b71d"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("062a47e477f88a5a757cd90b393ecd5cc1326927cfa13bcd75df4c1dcbaf8db5"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("4845dded82606e708bfd72717d06ca57691b4a15ec62d9972523e8b17ef3fca9bd26314b496441cfdff0c860d3335768"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("e44b7857669724cfb60eae0ef3611c46c988631a6550d8dcec8564e172e3360ae1d24e08faf9aa2ebbd8312016bed5d856f6b08730b3612e0aad18b22a24972b"));
	let bytes = &[0x9b, 0x18, 0xbc, 0x8a, 0xb9, 0x33, 0xd6, 0xd9, 0x3e, 0x27, 0xe0, 0xe4, 0xe9, 0x31, 0xe9, 0x65, 0x13, 0x05, 0x82, 0x95, 0x95, 0x3c, 0x50, 0xf9, 0x2b, 0xf1, 0x20, 0x2c, 0x44, 0xc9, 0xd8, 0x85, 0x6d, 0x32, 0xcd, 0xa4, 0x43, 0x0e, 0x51, 0xcf, 0x9e, 0x18, 0x30, 0xc7, 0x36, 0xa4, 0xf8, 0xb4, 0x60, 0x17, 0x8c, 0x66, 0xc2, 0xc4, 0x2c, 0x3a, 0xe7, 0xf3, 0x31, 0xcf, 0xf7, 0x77, 0x14, 0x89, 0xf4, 0xec, 0xc6, 0xbe, 0x4f, 0xd6, 0xf5, 0xb8, 0xf4, 0xa5, 0x21, 0xdc, 0x08, 0x9b, 0xd9, 0x64, 0xed, 0xf0, 0xc9, 0x83, 0x78, 0xda, 0x56, 0xc8, 0x31, 0x8b, 0x29, 0x6d, 0x34, 0x23, 0xad, 0x04, 0x2a, 0xda, 0x01, 0x7c, 0x68, 0xa2, 0x97, 0xa0, 0x80, 0x26, 0x5e, 0xa1, 0xfc, 0x2e, 0x77, 0xd5, 0x58, 0x6e, 0xa8, 0xc2, 0x55, 0x4c, 0xb4, 0xa9, 0x6a, 0xcf, 0x72, 0x24, 0x7e, 0x09, 0x15, 0x91, 0x2d, 0xe0, 0xf7, 0x00, 0x39, 0xcc, 0x82, 0xf3, 0x11, 0x54, 0x91, 0x3d, 0x2a, 0xdb];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("5429f9659c1da009ac4c727a40b2e73a5e769bd58a32234648a40e6e"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("dd630bcc345f1f75d2c5d1af692830b4b4c69bf6e096c189687781a8ea9e5cdb"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("4ee5490a4d18525875fd1712adfcd7df0f61f634e9b6a6479cc69212c7afef71f84627340dcf388e26d1e78f09c49ef5"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("e7394fcf8a647501b8f2ec7275db1d03c73de5509b8244d1b224da31778363a74bb01656e68b40269d5345bbf7f3ec58ade84fef8f8087302f29416be5d270b8"));
	let bytes = &[0x88, 0x93, 0x16, 0xb0, 0xa7, 0x9b, 0x04, 0xea, 0x7b, 0x52, 0x6d, 0xb0, 0x21, 0x73, 0xa9, 0x17, 0x62, 0xd3, 0xc4, 0xff, 0x9c, 0x97, 0xe1, 0x30, 0xa0, 0x07, 0x6d, 0x8a, 0xf3, 0x5f, 0xf8, 0x6b, 0xfa, 0xb2, 0x22, 0xee, 0x76, 0xb5, 0xc4, 0xa0, 0x8f, 0x6e, 0x74, 0x93, 0x30, 0x30, 0x27, 0x15, 0xcc, 0xaa, 0xe4, 0x8c, 0x8c, 0x9b, 0xdc, 0x6e, 0x5c, 0xb8, 0xd7, 0x87, 0xae, 0x0d, 0x41, 0x24, 0x5a, 0x17, 0x2b, 0x71, 0x63, 0x62, 0xa2, 0x58, 0x10, 0xf0, 0xf2, 0x4e, 0xbc, 0x31, 0xa3, 0xdc, 0x5f, 0x4f, 0x2a, 0xd2, 0xfa, 0xa8, 0x82, 0x4d, 0x86, 0x98, 0x98, 0x12, 0xcf, 0x2c, 0x92, 0x0a, 0x4b, 0x51, 0x66, 0x5a, 0x5d, 0xfb, 0x32, 0xf4, 0x6e, 0xa6, 0xcc, 0x57, 0xc6, 0x6f, 0xd5, 0x9f, 0x0c, 0x99, 0x90, 0x73, 0x0e, 0xde, 0x27, 0x3a, 0x3c, 0x56, 0x1e, 0xfb, 0x63, 0xdf, 0x2e, 0xc5, 0x4d, 0x63, 0xc7, 0x5e, 0xec, 0x26, 0xcf, 0x1b, 0x05, 0x4c, 0xd4, 0x45, 0xc1, 0xfe, 0x43];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("cea6530343ebc16c2f4d33cd155d8a20165a240d2f309dd206e526f6"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("6247db9ead480f668e6e7fb042734fcd90f126948f2e250b167b7f1770ebfbdb"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("5a6c951325c8f8446383632a55b018c5e8f80184d40613abada04178484c0324fb7fde0321d283e1e5d07dd1672f4ed3"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("554534da242fa0c86ae381d562d8ff1cd9f360fc4423c7732b3253360f97240e5f52059a302c5a55f45c0bb7ada5678c6a5e5f966300994db1b4246b3229ab6e"));
	let bytes = &[0x9c, 0x17, 0x26, 0xdb, 0x51, 0x92, 0x74, 0xc0, 0xd9, 0xf9, 0x0e, 0x44, 0x0c, 0x10, 0xcc, 0xc5, 0x8f, 0x0f, 0x81, 0x0f, 0xe6, 0x3d, 0xdb, 0x15, 0x71, 0xf3, 0x97, 0x53, 0xc8, 0xf2, 0xc0, 0x14, 0x70, 0x74, 0xd9, 0x62, 0xff, 0xc4, 0x46, 0xb0, 0x85, 0xf5, 0x66, 0xab, 0x88, 0x0f, 0xdb, 0x46, 0x33, 0x33, 0x2e, 0x39, 0xfe, 0x6f, 0x0f, 0x15, 0x63, 0xc3, 0x35, 0x5e, 0x7e, 0xe6, 0x06, 0xe9, 0x0e, 0x18, 0x6c, 0x4a, 0xa4, 0xc3, 0x18, 0x7e, 0x0b, 0xf1, 0x02, 0x4a, 0x15, 0xf5, 0x21, 0x08, 0x23, 0xed, 0xe2, 0x4e, 0x43, 0x9a, 0xd9, 0x05, 0xe1, 0x79, 0x19, 0x74, 0xeb, 0x07, 0x01, 0x82, 0xad, 0xb8, 0x97, 0xf5, 0x69, 0xa0, 0x07, 0xd8, 0xbb, 0x86, 0xb2, 0x3b, 0xdf, 0xeb, 0xfb, 0xa8, 0x3e, 0x19, 0xb3, 0x8c, 0x55, 0xc0, 0xb2, 0x12, 0xcb, 0x2d, 0xc5, 0x88, 0x99, 0xe1, 0x89, 0xeb, 0xdf, 0xc5, 0x7f, 0x5c, 0x75, 0x1b, 0x57, 0xa4, 0xf5, 0xe7, 0xfc, 0x13, 0x85, 0xd7, 0xe3, 0x23];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("9039c0b4ff6c4d10d6261809525ad0972d0f223bab92d0b2aca681db"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("f5132de58254a945796e37a9eb74e9bf716766f650a094ebcf41581b4b4808cc"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("212f49e126a1aefdd3f2693bcf11a40827ae166b9e8f57597156b284abb7557d4e3c4cc3c75f5420211a87a2152507a0"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("6393602d08727b562aa7b0f3a5e4754b62e4555dc5462b24cdffd1e38a1388c773c2e3d6cdd02734a4a47d7fd12b5917f201694ce97ec23490547c287334d751"));
	let bytes = &[0x47, 0x94, 0xe4, 0xf3, 0xa0, 0xb2, 0xbd, 0xbe, 0x35, 0xdb, 0xde, 0x05, 0x00, 0x06, 0x48, 0x13, 0x4e, 0x4c, 0xc0, 0x2e, 0xb3, 0xeb, 0x20, 0x28, 0xe3, 0x07, 0xc2, 0x17, 0xf2, 0xa7, 0x2c, 0xe9, 0xa4, 0x90, 0xe2, 0xf6, 0xf5, 0x10, 0x88, 0x7e, 0x6d, 0xfc, 0x0c, 0x59, 0xbf, 0x13, 0x05, 0x26, 0x83, 0x60, 0xac, 0x8c, 0x8f, 0x7f, 0x10, 0x70, 0x75, 0xf2, 0xa7, 0xd7, 0xa6, 0x72, 0x05, 0x1a, 0x9a, 0x95, 0xb4, 0x3e, 0x1d, 0x7d, 0xc1, 0xd4, 0x26, 0xc1, 0xba, 0xd4, 0x0d, 0xf9, 0xe5, 0xe1, 0xe2, 0x98, 0x9b, 0xf5, 0x06, 0x6b, 0x7a, 0x46, 0x1b, 0xd0, 0xc0, 0x42, 0x60, 0x8a, 0xa0, 0xbf, 0x4b, 0x5c, 0x8c, 0xad, 0x1c, 0x38, 0x6c, 0xc3, 0xd2, 0x8d, 0xe2, 0x70, 0x64, 0xa7, 0xb1, 0xa0, 0x19, 0xbf, 0xaf, 0x5d, 0x48, 0xe1, 0xf9, 0xab, 0x94, 0x35, 0xe8, 0x37, 0x6e, 0xf9, 0xb7, 0xd0, 0x80, 0x5a, 0xff, 0x03, 0x3a, 0x58, 0xbf, 0x9d, 0xba, 0x9f, 0x92, 0x7b, 0x6c, 0xd6, 0x84, 0x2e, 0xff];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("41a0e1c77faa953f9afb80bef79c76c7620692e7432703faf261d5fa"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("a553f16f2f4bc3f8df207c3abf5bc79af13a7458b967582f8c1e52a5abd6a3af"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("96f01aa2827fd22e5be279057029986899b46ce1069349b06536e84fd8caa4dfccf0b07a779f07493d1268cd033fce21"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("053a43eb8996425f4c4aa5391ff73d9d34dcff765809ba634c025bbe6746bf578475224cbdedb170ccb20ad89afc073ce611d92db05ca37804b6d1c102b97b78"));
	let bytes = &[0x61, 0x03, 0xb1, 0x43, 0xe5, 0x20, 0x40, 0x43, 0x70, 0x91, 0x13, 0x1d, 0x84, 0x32, 0x4e, 0x47, 0xa9, 0x31, 0xa4, 0x90, 0x40, 0x03, 0x09, 0x0c, 0x01, 0x87, 0x26, 0xd6, 0x15, 0xad, 0x6e, 0xf5, 0x06, 0xff, 0xc4, 0x09, 0x69, 0x27, 0x87, 0x44, 0xeb, 0x2c, 0xda, 0x34, 0x0b, 0xd4, 0x40, 0x3e, 0x69, 0xd9, 0xb3, 0x12, 0x7e, 0x33, 0xfe, 0x46, 0x6a, 0xc4, 0x15, 0x6d, 0x99, 0x1b, 0x21, 0x76, 0x34, 0xb1, 0xcf, 0x1c, 0x64, 0xa5, 0x15, 0xa9, 0xe5, 0x98, 0xd1, 0x11, 0xf3, 0x14, 0x8b, 0x5c, 0xff, 0x39, 0x62, 0x5f, 0xf3, 0xe4, 0x3d, 0x2d, 0x81, 0x59, 0x3f, 0x1e, 0x4f, 0x42, 0x01, 0xf9, 0xb3, 0x33, 0xdd, 0xba, 0x68, 0x2d, 0xef, 0x2b, 0x8b, 0x51, 0x15, 0x34, 0x31, 0xb2, 0x32, 0xfb, 0x2d, 0x48, 0x7a, 0xd8, 0x0f, 0x6f, 0x06, 0xb2, 0x3a, 0x7c, 0x5b, 0x50, 0x5c, 0xe5, 0x65, 0x4c, 0x56, 0xcf, 0xbd, 0x4d, 0xa3, 0x06, 0xd1, 0x5c, 0x89, 0x54, 0x88, 0x16, 0x4f, 0x79, 0x9a, 0xcd, 0x01, 0x78];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("3d82b16459248b2a1a5a68e38c683b47a0dce5b3b733d89af2c7b26c"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("c87efae3ed4fe2cb1b2b0aa16a52ec53ee5f3f3a75c5a74f1b6241c267ba0c18"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("31a0d4bd5bf84806cad06d26aedde11a29bf21946874306d00d56955ee15747002119f3fa45b02bc0d9a366b88ec8e62"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("8af59c592d6baa477d155996bd3b8c00cf49ada60e55970a20c53cf744b2c20c34a5094d6c95113784c537d89d1347a55835f95e77d0cd61769305dc1fde1b14"));
	let bytes = &[0xac, 0x4e, 0xf6, 0xbd, 0xdd, 0xbe, 0x32, 0x86, 0xdc, 0x5d, 0xf7, 0x9a, 0x70, 0xcd, 0xcf, 0xe9, 0x96, 0xce, 0xaf, 0xd4, 0xd4, 0xac, 0xe4, 0x76, 0xb3, 0x07, 0xd0, 0xcd, 0x10, 0xc0, 0xc5, 0x04, 0xf5, 0x73, 0xfb, 0xba, 0x24, 0xf3, 0x6e, 0xe4, 0x02, 0xf2, 0x90, 0x6e, 0xe7, 0xb8, 0x30, 0x2f, 0x31, 0x4b, 0x52, 0xd2, 0x07, 0x33, 0xf8, 0x05, 0xa8, 0xcb, 0x01, 0x0c, 0xeb, 0xd6, 0x67, 0x32, 0xe2, 0x83, 0xc9, 0x8f, 0x17, 0xb0, 0x63, 0x04, 0x69, 0x32, 0x4f, 0x1d, 0xba, 0x7c, 0x2b, 0x02, 0x66, 0x62, 0xec, 0x85, 0xf3, 0x32, 0x56, 0x27, 0xc2, 0xea, 0x2e, 0x8d, 0xb5, 0x73, 0x64, 0x4f, 0x92, 0x3c, 0xd2, 0x9e, 0x8e, 0x56, 0x20, 0x04, 0x59, 0x3b, 0xeb, 0x10, 0xf8, 0x39, 0x0c, 0xa5, 0xe0, 0x49, 0xdc, 0xe5, 0x9c, 0x07, 0xc7, 0xe7, 0xdd, 0x3d, 0xf0, 0x80, 0xaa, 0x14, 0xa8, 0xd4, 0xc4, 0xd1, 0x93, 0x57, 0xcf, 0x78, 0x80, 0xa0, 0xff, 0xfc, 0x49, 0x44, 0x89, 0x75, 0x60, 0xef, 0x1c, 0x9a, 0x32, 0xcd, 0x57, 0xe0, 0x88, 0x09, 0x33, 0xc2, 0x18, 0x78, 0x51, 0x9b, 0x96, 0xe8, 0x40, 0x0f, 0x35, 0xfc, 0xb6, 0x2c, 0xf8, 0x6e, 0xcc, 0xe2, 0x29, 0xa3, 0xc7, 0x07, 0x20, 0x8e, 0xad, 0x3f, 0x90, 0xf8, 0x4a, 0xa7, 0x1d, 0x18, 0x63, 0x99, 0x47, 0x2c, 0x2b, 0x63, 0x92, 0xac, 0x0b, 0x49, 0x42, 0xe5, 0x03, 0x1c, 0xaf, 0x6a, 0x56, 0xe1, 0x73, 0xc5, 0x58, 0x7a, 0xff, 0xb2, 0x6d, 0xa4, 0xb7, 0x11, 0x85, 0x06];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("20f9003a21742438cbf1f82abe634ffefbb6c7052fc7d7b5dc351b92"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("2d54ebe8e0792016f71d96602b1e487a6a608113e782c52bf0421c64d8bafde8"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("d419bf923dfc430a6ff740758b638df2d6ba0f89bacd512fb27395054ba8f288952aa744eec87c1a00deedf0828686be"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("4f073336be095e52a5f84b2b197251f7a4c3b4c845d05184fa49330d58b3ac064236b5b5d35a9dc94c2e2118005097e05e9d71d5e771d4eb0c4736e2c25e601a"));
	let bytes = &[0xda, 0x89, 0x83, 0x44, 0x7f, 0x15, 0xcf, 0x0f, 0xdc, 0x40, 0x3e, 0x5b, 0x08, 0x79, 0xf7, 0x7b, 0x8f, 0x99, 0x65, 0xe4, 0x7b, 0xa8, 0x9d, 0xc7, 0x83, 0x52, 0x9c, 0x03, 0x71, 0xf4, 0x6e, 0x68, 0x83, 0x55, 0x73, 0xc6, 0xb1, 0x27, 0xb6, 0xdc, 0x5c, 0xed, 0x01, 0x1c, 0x86, 0xa7, 0xd5, 0x28, 0x40, 0x18, 0x4f, 0xc1, 0x35, 0xe0, 0x4e, 0xbe, 0x97, 0x8d, 0x28, 0x1e, 0x61, 0xeb, 0xb4, 0x53, 0x4d, 0xab, 0x96, 0x93, 0x4e, 0x97, 0x9f, 0x90, 0xb9, 0x40, 0xa3, 0xe9, 0x5e, 0x33, 0x94, 0x2e, 0x07, 0x69, 0x48, 0xfc, 0xa5, 0x99, 0x1c, 0xdd, 0xaa, 0xfd, 0x89, 0xf7, 0x2f, 0xab, 0x33, 0x44, 0x86, 0xfc, 0xf6, 0xbe, 0x6d, 0xe8, 0xb1, 0xda, 0xab, 0xe2, 0x48, 0x36, 0x78, 0x64, 0x93, 0xb7, 0x9a, 0x81, 0xbb, 0xad, 0x94, 0xaf, 0xe2, 0xf6, 0xcf, 0x36, 0x49, 0xd8, 0xb7, 0x94, 0x7f, 0x11, 0x85, 0x59, 0x93, 0x6c, 0x37, 0xc2, 0x3f, 0x62, 0xb7, 0xb5, 0xa3, 0xb0, 0xba, 0x64, 0xdc, 0xa5, 0xfd, 0x07, 0x97, 0xb5, 0x05, 0x0e, 0xa5, 0x80, 0x40, 0x0a, 0xbf, 0xd4, 0xc6, 0xbf, 0xa3, 0xb1, 0x74, 0x13, 0x53, 0x97, 0xe7, 0x04, 0x15, 0x37, 0xfb, 0x72, 0x86, 0xfe, 0x4b, 0x15, 0xe6, 0x2e, 0xe3, 0xea, 0x04, 0x58, 0xf6, 0x89, 0x1b, 0xcd, 0xab, 0x25, 0x75, 0x8e, 0xc7, 0xcc, 0xe4, 0xb6, 0x7e, 0x23, 0x2c, 0x6a, 0xb2, 0x13, 0x9a, 0x2f, 0x4c, 0xd7, 0xcd, 0xcd, 0x36, 0x37, 0x62, 0xb0, 0x40, 0x4d, 0x18, 0xb8, 0xca, 0xf1, 0x90];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("d6fc8c0372fc421d6b4000c9bb423a8b6eea2a7e140e5e923ef5a482"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("38026c776ac752973346c27b43d44dbdf42aa8071545a9c2666273fac6f9457d"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("38af76a63bcf2bc296ddd1e9c771eb01646fd17d0460f53c511c954146b1ebbb1191ab69799fe9a75af623ac3f8d2e9b"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("31455c53d58172163fcb244412135595574c0e5d53857a75a16ca125a00e57c0702c0e213b59039143c262fbbe25ff5b04530d2a6fb402252a3d4f2de966ff1b"));
	let bytes = &[0xf7, 0x3a, 0xe9, 0x38, 0x49, 0x32, 0x46, 0x39, 0xb7, 0xec, 0xe9, 0x48, 0xcc, 0xcc, 0x75, 0xdd, 0x34, 0x6f, 0x62, 0x79, 0xe4, 0xa0, 0x7f, 0x38, 0x11, 0x89, 0xc2, 0x88, 0x28, 0x60, 0xeb, 0xd5, 0x59, 0x69, 0xaa, 0x05, 0x5e, 0x24, 0x2a, 0x98, 0xb9, 0x91, 0x54, 0x21, 0x2a, 0x67, 0x96, 0xe7, 0x9d, 0x2a, 0x7d, 0x48, 0x61, 0x65, 0xe7, 0x15, 0x30, 0x69, 0x97, 0x0d, 0x45, 0x21, 0xd4, 0xc1, 0x42, 0x35, 0xed, 0xbe, 0xe8, 0x80, 0x1f, 0xc3, 0xc9, 0x41, 0x0d, 0x8c, 0x85, 0xd3, 0x5c, 0xba, 0x7d, 0xa9, 0xcf, 0x6b, 0xa2, 0x1e, 0x0e, 0x27, 0x2a, 0x04, 0x4d, 0xda, 0x8a, 0xbd, 0x2a, 0x4f, 0x21, 0x8c, 0x38, 0xc3, 0x52, 0xf0, 0x00, 0xda, 0x03, 0xf8, 0x4a, 0xba, 0x89, 0xbf, 0xcb, 0xca, 0x16, 0x0a, 0x4f, 0x76, 0xbf, 0x9b, 0x83, 0xe3, 0x41, 0x5b, 0xad, 0xfd, 0x02, 0x69, 0x0c, 0xa2, 0xda, 0x51, 0xcf, 0x13, 0x7c, 0xd4, 0x3f, 0x83, 0x1f, 0x14, 0xbf, 0xef, 0x87, 0x0b, 0x32, 0xd2, 0xb4, 0x31, 0xe1, 0xe0, 0x4c, 0xe7, 0x4d, 0x33, 0xa6, 0x70, 0x14, 0x11, 0x2c, 0x24, 0x24, 0x60, 0xc5, 0xc6, 0x59, 0xfc, 0x36, 0xd0, 0x2c, 0x17, 0x36, 0xb3, 0x81, 0xf9, 0x38, 0x21, 0x1d, 0xc1, 0x7a, 0x18, 0x0f, 0x54, 0x8e, 0x00, 0x38, 0xb6, 0x82, 0x9c, 0x6a, 0xda, 0x05, 0xe9, 0xd2, 0x7e, 0x62, 0x3e, 0x95, 0xa3, 0x5e, 0x0b, 0xc6, 0xad, 0xe3, 0xaa, 0xa4, 0x93, 0x8a, 0x0c, 0xed, 0x2c, 0xf0, 0xae, 0xd8, 0x83, 0x49, 0x6d, 0x86, 0x50];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("f6c6f92aee8334e641a18c2b0e700ef4b4eff2a6e66f75c013b8a6dc"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("feb174d816592cb2009493fe2f20219202bff51077e6a23eaf945338e35e2602"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("2aee07e6358e71f1e4a50f6538b7a00943c926d42245276fc9fe7be14d5966cea665f5fac8c622b4a61b15cc2048fa0c"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("0f6e286003574545d329105a66ef0993c292cbfd7887cd1edd86d7ea7880be14b4d215affa679912cdc0a55b5c652d07dc20c7e39731ec0a88050bc0603d4dfb"));
	let bytes = &[0xde, 0x8c, 0x26, 0x46, 0x8b, 0x83, 0xa3, 0xaf, 0x7d, 0x60, 0x35, 0x6b, 0x4b, 0x3a, 0x33, 0x17, 0xc2, 0x6e, 0x47, 0x45, 0x45, 0x2b, 0x81, 0xf3, 0xed, 0xbc, 0xe0, 0x5b, 0x9f, 0x42, 0x14, 0x20, 0x13, 0x7d, 0x45, 0xaa, 0x29, 0x14, 0x05, 0xc0, 0x1d, 0x77, 0xa9, 0x02, 0xb9, 0x89, 0xc7, 0x41, 0xa9, 0xee, 0xf0, 0xa6, 0x9a, 0x71, 0x4a, 0xad, 0x6c, 0x88, 0x71, 0xe5, 0x22, 0xdf, 0xdd, 0x3b, 0xd8, 0xd2, 0xc5, 0x67, 0xfa, 0xfa, 0x67, 0xfb, 0x84, 0x04, 0x3e, 0x5e, 0x93, 0xda, 0x0c, 0xa8, 0xea, 0x6f, 0x53, 0xce, 0xdf, 0x88, 0xe4, 0x9c, 0xd4, 0x32, 0x87, 0x78, 0xe8, 0xff, 0xef, 0x73, 0xef, 0x00, 0x73, 0x57, 0xa6, 0xb9, 0x9a, 0x86, 0x0d, 0x21, 0xbe, 0x60, 0x2b, 0x19, 0x8b, 0x96, 0x40, 0xf7, 0x1f, 0x1c, 0x73, 0xea, 0x4c, 0xc3, 0xef, 0xf3, 0x92, 0xbd, 0xf3, 0xc0, 0x23, 0xf5, 0xa1, 0xf6, 0x94, 0xe7, 0x0a, 0x9b, 0xdb, 0xe8, 0x71, 0x1a, 0x46, 0x36, 0xea, 0xa3, 0x8a, 0xf1, 0x56, 0x3f, 0x4d, 0x20, 0xcd, 0x30, 0xe2, 0x1f, 0xe1, 0x95, 0x52, 0xd7, 0x4d, 0x6b, 0xbe, 0x37, 0xb6, 0x1a, 0xc7, 0x11, 0x8d, 0x44, 0xc2, 0x34, 0xb9, 0x6f, 0x45, 0x21, 0x17, 0xc3, 0x50, 0xb9, 0x3f, 0x5c, 0xa9, 0xf1, 0xf9, 0xe2, 0xf6, 0x8b, 0x65, 0x72, 0x40, 0x49, 0xeb, 0x64, 0x98, 0xe2, 0x99, 0x37, 0xb4, 0x4a, 0x48, 0x1a, 0x2e, 0xe2, 0x36, 0x0e, 0xa2, 0x37, 0x67, 0xf5, 0x95, 0xb8, 0x42, 0x70, 0xa7, 0xb7, 0xae, 0x75, 0xcd, 0x0f, 0x58];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("f2f383939778463c3b0614f81ce4834c7c4b81197ba1a30624c3d14f"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("ff56ee9eb309fa3a9e4eb159578734c294fbf9326e14e0bdfce1813bb0d22f30"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("749fb69050e9f3f4e426a5357534492ceafb742237812aa66c6065cc4ffa930599e0d8c5ee76aff3c3560e7df944f7c3"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("6164a4ef3bf8cc6f26c260ea66a9ac34fd7839c898c8ddf144c653b967b7dcd0d62c0f0981e9a9ce45e975831b4f3e09c0f1bd4cf5cf572116c0824632fd481e"));
	let bytes = &[0x0d, 0x07, 0x20, 0xb7, 0xe2, 0xa0, 0x30, 0x43, 0x3c, 0xaf, 0xed, 0x19, 0x1b, 0xfc, 0x4e, 0x2c, 0xf7, 0x96, 0x4f, 0x70, 0xe8, 0x93, 0xa1, 0x7e, 0x9a, 0xbd, 0x51, 0xb4, 0xa7, 0x09, 0x73, 0xa4, 0x99, 0x6c, 0xb9, 0x39, 0x8d, 0x74, 0xf9, 0x46, 0x92, 0xf8, 0x0e, 0xc1, 0xe6, 0xac, 0x52, 0x91, 0x35, 0xb8, 0xcc, 0xbe, 0xf9, 0xd3, 0xbc, 0xa7, 0x68, 0xa6, 0xfa, 0x5a, 0x2b, 0x11, 0xd3, 0x9f, 0x9c, 0xf7, 0x39, 0x7e, 0x47, 0xe0, 0xc7, 0x25, 0x76, 0x3d, 0x62, 0x1f, 0xc1, 0xa0, 0x67, 0x2b, 0x76, 0x0e, 0x04, 0xd2, 0x21, 0x6d, 0x18, 0x62, 0xeb, 0x58, 0xea, 0x59, 0xbf, 0x1d, 0x87, 0x3e, 0x44, 0x96, 0xa3, 0x64, 0x9e, 0x64, 0x70, 0x10, 0x8d, 0xb6, 0x94, 0xe8, 0xff, 0xf7, 0x1c, 0x74, 0x79, 0xb8, 0x78, 0x9e, 0x06, 0x72, 0x10, 0x13, 0x99, 0xb0, 0x91, 0x52, 0x53, 0x85, 0x38, 0xe5, 0xfc, 0x7c, 0xc1, 0x17, 0xf9, 0xfb, 0xe1, 0xfc, 0xbc, 0x3e, 0xf8, 0xea, 0xfc, 0xab, 0x8a, 0xff, 0xc0, 0xcc, 0x5d, 0x16, 0xb7, 0xd2, 0x6c, 0x01, 0xf2, 0x66, 0x3f, 0x0f, 0x7b, 0xe9, 0x51, 0xdd, 0x6e, 0xc0, 0x4c, 0x10, 0x82, 0xbb, 0xf6, 0xe3, 0x69, 0x98, 0xe2, 0x34, 0xa9, 0x0d, 0x54, 0xc9, 0x42, 0x37, 0x68, 0x3a, 0x46, 0x11, 0x17, 0xa1, 0xaa, 0xec, 0xe0, 0xbb, 0x52, 0xfe, 0xf5, 0xdf, 0x0a, 0x7c, 0x48, 0x14, 0x6d, 0x86, 0x6b, 0x84, 0x07, 0x06, 0x06, 0x88, 0x3b, 0xe0, 0xc9, 0x4a, 0x79, 0x22, 0x87, 0x4c, 0xda, 0x65, 0xf5, 0x39, 0x90, 0xa3];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("20c7046c885b1dd526515a10fa212c03b707bde8ecd0170c141574af"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("bd387e90e669a89ee33a308991eb625d4f42f8bdd37bb0ce8541bd32a746ec88"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("3ae421cdeba2a0fb21f401c32646752697964036bb66cb4f1d361231c23e9ad11dd935c9c83313d153bbcfc8d34b8036"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("4f9df7727c609854ef1b463a3e3b4d9318577f50f89eee02900b5b9fe95c4fa46d1444db83a9eaa9e05f53672ef4ac35f01dcec498fecd59587b7afa1fe6d934"));
	let bytes = &[0xc8, 0xc5, 0xa6, 0x1c, 0x77, 0x7a, 0x8e, 0x12, 0xd2, 0x68, 0xc3, 0xe1, 0x82, 0xff, 0x4f, 0xe4, 0xf6, 0x3b, 0x8e, 0x0e, 0xe9, 0xd6, 0x4a, 0xb1, 0xee, 0xb3, 0xad, 0xdc, 0x97, 0x75, 0x4e, 0x7d, 0xfd, 0x76, 0xf0, 0xdf, 0x2b, 0x11, 0x2d, 0x38, 0xb6, 0x2f, 0x32, 0x0f, 0x32, 0x95, 0xc5, 0x0b, 0xe9, 0x29, 0x46, 0x2f, 0xba, 0xed, 0xec, 0x62, 0x2f, 0x72, 0x71, 0x38, 0x17, 0xca, 0xf9, 0x92, 0x3d, 0xb2, 0x2a, 0x31, 0xd0, 0xe8, 0x64, 0xf0, 0x29, 0x5c, 0xe8, 0x19, 0x03, 0xf1, 0x29, 0xc0, 0xd9, 0x0c, 0x5c, 0x76, 0x8e, 0xb3, 0xa0, 0xcb, 0xb1, 0xd4, 0xcd, 0xc7, 0xa1, 0x6b, 0x77, 0x33, 0x4b, 0x68, 0xe4, 0xae, 0xbf, 0x1d, 0x3f, 0x1f, 0x61, 0x99, 0x25, 0xcf, 0x65, 0x6a, 0x99, 0xd6, 0x88, 0x01, 0x4b, 0x9f, 0xc2, 0x63, 0x19, 0xb9, 0x1f, 0x71, 0x8d, 0xb7, 0x7e, 0x59, 0x4f, 0x6d, 0xb8, 0x7c, 0x9c, 0x0c, 0xb2, 0x5f, 0x81, 0x0e, 0x07, 0xde, 0x39, 0x26, 0x07, 0x06, 0xac, 0xf1, 0x6d, 0x5c, 0x57, 0x87, 0xb9, 0x20, 0xa3, 0x25, 0x70, 0xb7, 0x34, 0x13, 0xba, 0x85, 0xaf, 0xb7, 0xa2, 0x13, 0xeb, 0xd7, 0x24, 0x66, 0x26, 0x9e, 0x02, 0xf9, 0x27, 0x3b, 0x32, 0x3e, 0x96, 0x31, 0xfe, 0x03, 0xab, 0xcd, 0x97, 0xe1, 0x9e, 0x70, 0xca, 0x0a, 0xa2, 0x8c, 0xc5, 0x24, 0x91, 0x7a, 0x4c, 0xbc, 0x81, 0x0a, 0x98, 0xd6, 0x1e, 0xca, 0xae, 0xde, 0x5a, 0x84, 0xb1, 0xa1, 0x22, 0xae, 0xbb, 0x77, 0x83, 0xf0, 0x74, 0xae, 0x4a, 0xa0, 0x53, 0x2d, 0xe2, 0x83, 0x06, 0xeb, 0x49, 0xe3, 0xac, 0xfc, 0x2b, 0xea, 0xc7, 0xe8, 0xd9, 0x96, 0xc7, 0xcd, 0xcb, 0xe7, 0xff, 0xef, 0xb9, 0x46, 0x4a, 0xd1, 0xd0, 0xef, 0x75, 0xa8, 0x01, 0x1f, 0x35, 0xb0, 0x97, 0x76, 0x32, 0xa0, 0x10, 0x14, 0x82, 0x03, 0xbe, 0xc1, 0x73, 0x1a, 0x8d, 0x15, 0x4c, 0xa8, 0x95, 0x63, 0xd0, 0x2f, 0xc8, 0x1c, 0xe7, 0x83, 0xb2, 0x40, 0x97, 0xd1, 0x3d, 0x02, 0x64, 0x5a, 0xb0, 0xa8, 0xea, 0xb5];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("93bdb3c2c3687b5d6eb6eb86432b45d4bb92c2ecdc6a23f553a38cd2"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("1c552ce535238c2a2c518b6ba3ec4b5c6bc8486dd3cc7396b2ef3f40b7353a18"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("27b9b0bac600c743b2fb40d12bfdcbfea5d514a6bab5274c7f7f81bbe5b3e444b9c3ca0e8ac6b7222ec4f69183587432"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("b28881c43b66c2364249e9fc840063e1bca439611fd7d34a7d80c89a0ee9c3a3c3323d9540aa2178b4e82e11e48a89bdebffd1ea76b335113289cd8e3d101d90"));
	let bytes = &[0xcd, 0xff, 0x01, 0xe4, 0x7e, 0x5d, 0x7f, 0x56, 0x88, 0x06, 0xee, 0x5c, 0x76, 0x27, 0x1b, 0xdb, 0x45, 0xf5, 0xb6, 0x0b, 0xef, 0xd2, 0x29, 0x03, 0x12, 0x60, 0x72, 0x21, 0x60, 0x37, 0xb2, 0x3d, 0x44, 0x36, 0x0f, 0x26, 0x49, 0x64, 0x98, 0x70, 0x46, 0xcc, 0x35, 0xc7, 0x0d, 0x45, 0xe1, 0xa1, 0xa5, 0x36, 0xf8, 0x89, 0xb8, 0xe6, 0x58, 0xb0, 0x7a, 0x8f, 0xa1, 0x52, 0x6f, 0x56, 0x36, 0x54, 0x51, 0x20, 0xa9, 0x43, 0xfc, 0xf1, 0x0a, 0xb9, 0x5a, 0xb2, 0x07, 0xd5, 0x66, 0x9c, 0x23, 0x21, 0xba, 0xfb, 0xae, 0xb8, 0x82, 0xcb, 0xfa, 0xe5, 0x71, 0xf5, 0x76, 0x90, 0x65, 0xb9, 0x16, 0x2c, 0x68, 0x97, 0x6a, 0xa6, 0x5d, 0xcc, 0x2f, 0x2f, 0x1f, 0xa3, 0x03, 0x91, 0x8b, 0x32, 0x42, 0x27, 0x0d, 0xc6, 0xa8, 0xbb, 0x85, 0x30, 0x68, 0x20, 0x86, 0x4e, 0xad, 0x25, 0xe5, 0x50, 0x58, 0xa2, 0x53, 0x6c, 0x61, 0xbe, 0xf7, 0x18, 0x5d, 0x15, 0x3b, 0x45, 0x75, 0x65, 0x46, 0x99, 0x20, 0x79, 0xbf, 0x2a, 0xd1, 0x6b, 0x58, 0x17, 0x62, 0x7b, 0x81, 0xc7, 0x46, 0x72, 0x18, 0x56, 0xd0, 0xb9, 0xad, 0xe9, 0x61, 0xb0, 0x3a, 0x32, 0x3b, 0x02, 0x9b, 0xdc, 0xc4, 0x59, 0xc1, 0x17, 0x38, 0xd8, 0xac, 0x56, 0x74, 0x66, 0x02, 0xf9, 0x47, 0x6f, 0x78, 0x8b, 0x28, 0x31, 0x27, 0xe4, 0x7e, 0x71, 0x5a, 0x72, 0xeb, 0xe1, 0x7d, 0xc0, 0x09, 0x9c, 0x14, 0x3c, 0x0e, 0xa1, 0x94, 0x17, 0xfe, 0x86, 0x51, 0xb1, 0xe2, 0x81, 0xb2, 0x61, 0xe7, 0x84, 0xd0, 0x1c, 0x0c, 0xb1, 0x9d, 0x97, 0x0a, 0x3b, 0x2c, 0x40, 0x44, 0x80, 0xe0, 0x70, 0x13, 0x68, 0xae, 0xa4, 0x86, 0x4b, 0x68, 0xc6, 0x2a, 0x47, 0x00, 0x81, 0x71, 0xdd, 0x39, 0xa2, 0x5c, 0xf1, 0x19, 0xa3, 0x3c, 0xf4, 0x9f, 0x8a, 0x7a, 0xf6, 0x05, 0x5b, 0xa9, 0x88, 0xf4, 0xf7, 0x0f, 0x36, 0x87, 0x77, 0xd8, 0xb6, 0xd1, 0x2e, 0x14, 0x9c, 0x9a, 0xf1, 0x52, 0xad, 0xf9, 0x38, 0x93, 0xdd, 0x20, 0x2d, 0xd4, 0x15, 0x68, 0xee, 0x20];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("6c3b49bd6af0268c61d334d61acf277f1c0b306c1e391e0fe0bd50d2"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("8b838724e9ac66b99ee2390828c812136732fa2a922ec26d8c94dfa666919f80"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("05a944d31249f376f8f46cabb3a81f1321055b91bc729d994be5c4a111c2bccf5a42d1baa04824474b6ec8a8e3344b9a"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("4ced2e17be550988d46cf56b54061dfea17682034e51ab06779c8e01e11f931c903eccb26d8a2a6619085c5aabbb81b4df8c87737b621027c56c3affe1efc062"));
	let bytes = &[0xc5, 0x94, 0xe5, 0x9e, 0xb1, 0xab, 0x33, 0x4d, 0x71, 0xa3, 0xea, 0xe3, 0x80, 0x22, 0xe9, 0xcf, 0xd8, 0xf0, 0x02, 0x3f, 0xf4, 0x08, 0xbd, 0x66, 0x52, 0x41, 0x3b, 0x47, 0x98, 0xaa, 0xf3, 0x99, 0x75, 0xa4, 0x16, 0x1a, 0x48, 0x95, 0xe0, 0x12, 0x04, 0x24, 0xfa, 0x45, 0x4e, 0x5c, 0x4c, 0x69, 0x88, 0xca, 0x5e, 0xfb, 0xe7, 0xb3, 0x11, 0x02, 0xef, 0xb9, 0x88, 0x20, 0x07, 0xb3, 0x7a, 0xea, 0xd8, 0x5a, 0xce, 0x4c, 0x06, 0xc3, 0xb3, 0x85, 0xf8, 0x74, 0xbf, 0xe5, 0xdd, 0x43, 0xde, 0xb9, 0xc6, 0x72, 0xdb, 0xed, 0x5c, 0xc4, 0xae, 0x67, 0x63, 0x59, 0xe8, 0x3c, 0xda, 0x25, 0xe5, 0x60, 0xba, 0x5d, 0xa7, 0x7a, 0xbf, 0x8d, 0x8d, 0x21, 0xa8, 0xf0, 0x35, 0xb8, 0xf7, 0x89, 0x34, 0xf7, 0x23, 0x84, 0x18, 0x9d, 0xd5, 0x6b, 0x7c, 0x17, 0xac, 0x43, 0x8a, 0x8a, 0xa7, 0x83, 0xdf, 0x3b, 0x6d, 0x7c, 0x4b, 0x37, 0x6a, 0x1f, 0x51, 0xa3, 0xc1, 0xe5, 0xbe, 0x9f, 0xb4, 0x24, 0xe9, 0x18, 0x32, 0x56, 0xd4, 0x8f, 0x16, 0x32, 0x69, 0xab, 0xe5, 0xdd, 0xa2, 0xa0, 0x78, 0x62, 0x21, 0xea, 0x19, 0x04, 0x91, 0x5d, 0x37, 0xb5, 0x89, 0x02, 0x2c, 0x46, 0x26, 0x8c, 0x99, 0x84, 0x00, 0x1d, 0x04, 0xb5, 0xa8, 0xe3, 0x5a, 0x51, 0x4b, 0x7b, 0xa7, 0xca, 0x3f, 0x56, 0x01, 0x8c, 0xf7, 0x7d, 0xad, 0xfd, 0x64, 0xeb, 0xc0, 0x32, 0x17, 0xd5, 0x5c, 0x1f, 0x6d, 0x6c, 0x69, 0xcd, 0x46, 0x42, 0x78, 0x5f, 0xa2, 0xaf, 0xb5, 0x22, 0x64, 0x71, 0x3a, 0x2d, 0x1a, 0xde, 0x35, 0xe8, 0x40, 0x0a, 0x73, 0xa7, 0x80, 0xea, 0xfc, 0x1f, 0x52, 0xca, 0xa9, 0x34, 0xea, 0x11, 0x3e, 0x30, 0xb2, 0x60, 0xed, 0x8f, 0x7e, 0x5b, 0xef, 0x47, 0x5e, 0x19, 0x40, 0x2b, 0xbe, 0x85, 0xe1, 0x9e, 0xcf, 0xfd, 0x47, 0x90, 0x2b, 0x84, 0xe0, 0x9f, 0x6c, 0xcb, 0x15, 0xbe, 0x73, 0x51, 0xfd, 0xeb, 0x54, 0x29, 0xf5, 0x82, 0xa7, 0xcd, 0xc7, 0x25, 0x4e, 0x52, 0x35, 0xd5, 0xdc, 0x18, 0xe6, 0x6d, 0x4a, 0x4b];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("2c95f1e5b7e29693ca5c3e9b137e3374caa0db022bfbb97df3805ccd"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("5650822bf254d4a2739853f90782f8498cfe830695b0a9bdf4dc266497e4fa6a"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("a09e540528eefe348358cedf0e516e1c0efe38e28cbeb6cceb721a157cf733cf46a08184d1e41b0cb25dbd60985b7fc1"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("39adf215f5fabb3f9e5c7781e57f215f4da593d057550d1ac5c88c9599022b548a313e764922f16dc90e6e8444092558af7fcc4e7701a8280e629e5d429523f5"));
	let bytes = &[0x4b, 0x06, 0x19, 0xbe, 0xb8, 0xf8, 0x0b, 0x17, 0x79, 0x58, 0x4d, 0xd4, 0x7a, 0xa5, 0x59, 0x62, 0xd5, 0x2c, 0xd1, 0x97, 0x19, 0xb3, 0xba, 0x84, 0xd4, 0x2f, 0x4e, 0x01, 0x75, 0x7e, 0xca, 0x74, 0x75, 0xa4, 0x2a, 0xb0, 0x3e, 0xdc, 0x0d, 0x9c, 0x75, 0x2a, 0xab, 0x55, 0xe0, 0x93, 0xe9, 0x21, 0x6d, 0x14, 0x34, 0x63, 0xa5, 0x44, 0xe3, 0x0c, 0xdf, 0xcb, 0xcc, 0x47, 0xf0, 0x0f, 0x0d, 0xf1, 0xe8, 0x78, 0x39, 0xc8, 0x91, 0x53, 0xf7, 0x4a, 0xe0, 0xc2, 0x49, 0xeb, 0x6f, 0xf8, 0x37, 0x0f, 0x4f, 0x3d, 0x60, 0xd2, 0x82, 0xc6, 0xb7, 0xec, 0x03, 0x0e, 0x2c, 0xf9, 0xf9, 0x4d, 0xc9, 0xf3, 0x69, 0x16, 0xd9, 0x67, 0x3e, 0xf7, 0xba, 0x43, 0x9d, 0x98, 0x8d, 0xf9, 0x56, 0xca, 0x36, 0xdc, 0xd9, 0x05, 0xf8, 0x7e, 0x5f, 0xb1, 0xc2, 0x46, 0x2b, 0xd1, 0xb5, 0x67, 0x81, 0x2f, 0x21, 0x23, 0x69, 0xca, 0xe0, 0xf1, 0x8f, 0xbe, 0x06, 0x54, 0x13, 0xab, 0xad, 0xf7, 0x5c, 0x26, 0xbc, 0x77, 0xbe, 0x5e, 0x59, 0xb0, 0x5a, 0xb6, 0x18, 0x0d, 0xc0, 0xf5, 0xe7, 0x9e, 0x31, 0xfa, 0x1f, 0x67, 0xb5, 0xd3, 0x62, 0x4e, 0xbd, 0xdf, 0x9d, 0x3a, 0xdd, 0x95, 0xb2, 0xd8, 0xba, 0x31, 0xfb, 0x8e, 0x08, 0xa2, 0x13, 0xcf, 0xab, 0xd7, 0x95, 0x1d, 0xfe, 0xfe, 0x52, 0x22, 0x49, 0xd3, 0x1d, 0x36, 0xfb, 0x71, 0x0d, 0x6e, 0xb2, 0x1c, 0x54, 0x5f, 0x48, 0xa0, 0x18, 0xbd, 0xf1, 0x72, 0xf8, 0x5f, 0x05, 0xdd, 0xdc, 0x21, 0x89, 0x00, 0x98, 0xec, 0xd8, 0x92, 0xaf, 0x54, 0xad, 0xcc, 0xeb, 0x3d, 0x70, 0xbc, 0x4a, 0x32, 0x02, 0x9e, 0xd8, 0x7c, 0xa2, 0xca, 0xfd, 0x77, 0x38, 0xff, 0x3c, 0xc8, 0x70, 0xf5, 0x80, 0x3a, 0xbb, 0x93, 0xcb, 0xcc, 0x67, 0xa0, 0x7f, 0x31, 0xfe, 0xa6, 0xe3, 0xb4, 0x46, 0x17, 0x3b, 0x1c, 0x3f, 0x94, 0x4f, 0x6b, 0xa4, 0x8a, 0x23, 0x29, 0x1a, 0xab, 0xd2, 0x6c, 0x10, 0x07, 0x09, 0x32, 0x96, 0xe0, 0xb7, 0x57, 0x18, 0x88, 0xd1, 0x67, 0xe3, 0x3a, 0x04, 0xab, 0x4e];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("6c700f62cdd459906277635caefff8b6188d22770af0be56cb67cb7e"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("57b191dfc2ed40f390333c509db03625e1596b691b0c961c4b96c29efa5daa28"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("97eb8d28a31169b27bbd37fcdaaf0e48f92a41e268f546e50ab58d0a227dfe2f4372cab908cdc7624f9c07857b6beab4"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("ed8d0d1986480974cf8a72d5502f122dc7989fe315bedeab56f69fba080a6bde393ceef482ecc1896b583ac5214b4c0d11e0c938163bcace6139690f73e1d625"));
	let bytes = &[0x97, 0x06, 0xf4, 0x92, 0x49, 0x49, 0x41, 0xa9, 0x94, 0x93, 0x14, 0xe6, 0x07, 0x6b, 0x26, 0x59, 0x27, 0xa5, 0xeb, 0xac, 0xef, 0xb2, 0xde, 0xf5, 0x40, 0x6e, 0x31, 0x90, 0xf0, 0x97, 0x27, 0xc7, 0x1b, 0x95, 0x8a, 0x25, 0x1c, 0x86, 0xda, 0x2c, 0x9c, 0x54, 0xf2, 0x60, 0xd7, 0x8b, 0xa4, 0xff, 0x38, 0x66, 0x4d, 0xce, 0x4c, 0xe7, 0x6c, 0x1c, 0x06, 0x49, 0x22, 0x77, 0x6b, 0x51, 0xd2, 0x1a, 0x99, 0x1a, 0xe0, 0xcb, 0xc0, 0x8d, 0x0c, 0x69, 0x0b, 0x03, 0x5d, 0xe9, 0xc8, 0x55, 0xdf, 0x4b, 0x39, 0x50, 0xac, 0x24, 0x38, 0xb1, 0x4d, 0x5b, 0xc4, 0xbb, 0x2b, 0xc4, 0x66, 0x09, 0x4d, 0x2d, 0xf1, 0xcc, 0x3d, 0x9b, 0x66, 0x23, 0x98, 0x80, 0x23, 0x60, 0x5a, 0x6b, 0xb5, 0x3d, 0x10, 0xb1, 0x7e, 0x6d, 0x74, 0x9d, 0x64, 0x08, 0x4e, 0x9a, 0xe4, 0x0f, 0x28, 0xf2, 0x08, 0xcb, 0xaf, 0x1e, 0xa9, 0x53, 0x10, 0x70, 0xfb, 0xf0, 0x17, 0x28, 0xde, 0x35, 0x4f, 0xe3, 0xd5, 0x7d, 0x19, 0x9e, 0xf4, 0x0f, 0x48, 0x1f, 0xf4, 0xd1, 0x74, 0x9c, 0xc2, 0x0b, 0x23, 0x96, 0xe3, 0x7f, 0x44, 0x29, 0x99, 0xee, 0xa4, 0x34, 0xde, 0xa2, 0xfa, 0xba, 0x07, 0xe5, 0x1d, 0x37, 0xfc, 0xd3, 0x45, 0x64, 0xb4, 0xb7, 0xca, 0x08, 0x44, 0x14, 0xc3, 0x17, 0x2c, 0x9b, 0xdf, 0x1f, 0x5b, 0x7d, 0xa0, 0xff, 0x1b, 0x63, 0x81, 0x60, 0x30, 0xc8, 0x23, 0x22, 0x1b, 0x65, 0xad, 0x33, 0x38, 0xdd, 0xe9, 0x33, 0x7b, 0x8d, 0x56, 0x6d, 0x47, 0x5e, 0x72, 0x5d, 0xbd, 0x7b, 0x48, 0x33, 0x41, 0x6c, 0xbe, 0xee, 0xef, 0xf3, 0x72, 0xe9, 0x1a, 0x13, 0xb3, 0x72, 0xac, 0x00, 0xcd, 0xd7, 0xe1, 0x36, 0x42, 0xf2, 0xa2, 0xe6, 0x1b, 0x71, 0xd1, 0xeb, 0x7e, 0xe0, 0x4d, 0xaf, 0x8c, 0x64, 0x15, 0xcc, 0x64, 0xc2, 0x65, 0xf1, 0xfe, 0x69, 0xc1, 0xb1, 0xc9, 0xeb, 0x48, 0xa1, 0xd2, 0x73, 0x46, 0x73, 0xcd, 0xfe, 0xab, 0xac, 0x30, 0xd2, 0xa1, 0x7b, 0x68, 0xa9, 0xae, 0x64, 0x59, 0xe3, 0xf7, 0xf2, 0x25, 0x65, 0x81, 0xe4];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("781907a118433b89c26f242e72bb16cd91d6a61723fded777fb0c4e8"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("43649cb9032f86a33c2a77a37d56d2efa3fc5deac3363f9d9d8d687346067ed2"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("d1bb83ca6062fb24d8e99a943deb22ebfaaa082e1e3ee0881d4612e16fbed6ef773d128305382456b2a053442375b4bb"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("4acdb93d0ab9a7c173d732fc0254f9c1b9a32567290982c1adb1fbdb4bb6864dc89089db361734a30acc99eb32c873b8c4fabe50d486adf5a8eac1c94a048fec"));
	let bytes = &[0xd8, 0x86, 0x2c, 0x8c, 0xc3, 0xd1, 0x0c, 0xa1, 0x50, 0x04, 0xd8, 0x06, 0x07, 0x40, 0x7e, 0x21, 0xdb, 0x88, 0x4a, 0x55, 0xca, 0xc6, 0xe0, 0x79, 0x1e, 0x3d, 0x4c, 0x96, 0x3c, 0x68, 0x42, 0x99, 0xfd, 0xe1, 0x11, 0x6f, 0xad, 0xb6, 0x36, 0x2b, 0x68, 0x89, 0x91, 0xcb, 0xc4, 0x33, 0xac, 0xf8, 0x38, 0x57, 0x99, 0x61, 0xaf, 0xaa, 0xce, 0x53, 0x92, 0xf1, 0x86, 0x5a, 0x30, 0x60, 0x6d, 0x0e, 0xa6, 0x3d, 0x1f, 0xdf, 0x60, 0x25, 0xfe, 0x56, 0x63, 0xaa, 0x13, 0x9d, 0xe0, 0xb7, 0x81, 0x4d, 0x51, 0x7e, 0x22, 0xe2, 0xa8, 0x4c, 0x94, 0x66, 0x1d, 0xc1, 0x9d, 0xa6, 0x52, 0x8c, 0x4c, 0xea, 0x17, 0xf6, 0xab, 0x26, 0x15, 0xdf];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("dfb39fa8f6080c70647d2499684ceb3c094ff45f05b924e6ae187c33"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("7ac959cb9ca67d63417212f332e66dd18a3ba1e55e9cb9a5002b53a86b318300"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("0fe9ffbc59f395e2a4930df79e58e3282b49442127efeb319aa52e2c2835ec11b293f71dc8257a033d8a822937bd81cd"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("438c25f0ea690f055de59ebc099c6b5c3b2d9d4753332add2df104baacc05c44b3433b957ea95e82cd5e71bc8fb71ddfc1d0122ffa5879f8f37a0bd3429957fb"));
	let bytes = &[0x5e, 0x37, 0xef, 0xc9, 0x4c, 0x53, 0xc9, 0xe5, 0xa3, 0x74, 0x0c, 0xd1, 0x17, 0x53, 0x76, 0x2e, 0xe4, 0x87, 0xb7, 0x2f, 0x36, 0x86, 0xe3, 0x44, 0x95, 0xeb, 0x16, 0x2c, 0xe5, 0x44, 0xa5, 0xde, 0xa5, 0xba, 0x39, 0xf5, 0x5a, 0x51, 0x09, 0x89, 0x4e, 0x57, 0xd1, 0xdf, 0xf3, 0xf7, 0x97, 0xf0, 0xf7, 0xe8, 0x49, 0x43, 0xdc, 0x31, 0xf0, 0x2e, 0x89, 0x2e, 0xd3, 0x7d, 0x67, 0xf3, 0xfd, 0x6a, 0xf2, 0x3e, 0xcf, 0xbe, 0x78, 0x5f, 0xad, 0x47, 0x19, 0xa8, 0x6b, 0x5d, 0x70, 0xd5, 0x65, 0x65, 0x22, 0xa9, 0x64, 0x2f, 0x02, 0x17, 0x1d, 0xf5, 0x1a, 0xa8, 0x84, 0x84, 0x9c, 0x69, 0x74, 0xe3, 0xe3, 0xf6, 0x5f, 0x9a, 0x4a, 0xa4, 0xa2];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("4e66fc985f3faf31afe642ff0c2efe3e1df7039be00fbd075533d775"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("7d63573979d924a93b8c5479e6c55c9083a757922013cfbd8c6a28a9d6c3e597"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("5f2c58f0682450e4fc4a021aca1be4ded518fe7b5138fa0fe256d52c614da002f1a62f6845688355697ed5659d6f1394"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("7e7287cc795d20c95c6505e0cff4c55aba22c9b50fdd2660021b437da99170a9a7caa0a48eda61adfe5d703649821f63c1897647d481bf85a5dcdb21983cdf6d"));
	let bytes = &[0xcc, 0x21, 0xa7, 0x92, 0xf3, 0xe4, 0xc0, 0x99, 0xb4, 0x0b, 0x9e, 0xcc, 0x76, 0x4f, 0x46, 0x20, 0x4f, 0xde, 0x86, 0x93, 0x6b, 0xc2, 0xac, 0x2c, 0xb8, 0x8e, 0x47, 0xef, 0x8f, 0x17, 0x57, 0x01, 0x1b, 0x28, 0xd0, 0x15, 0xd9, 0xd3, 0x85, 0x44, 0x7c, 0x53, 0x89, 0x01, 0xf5, 0xc5, 0x0f, 0xe4, 0xd7, 0x3f, 0x95, 0x61, 0x78, 0x0d, 0x62, 0xf4, 0x48, 0x1e, 0x70, 0xa4, 0xa8, 0x74, 0xd2, 0xda, 0x81, 0xda, 0xeb, 0xff, 0x08, 0x04, 0xcc, 0x5c, 0xcd, 0x25, 0x8d, 0x28, 0x4e, 0xaa, 0x0b, 0x7c, 0xd6, 0xea, 0xfe, 0xf6, 0x89, 0x03, 0x58, 0x41, 0xc9, 0xe5, 0x1f, 0x22, 0xf1, 0x08, 0xaa, 0x69, 0xed, 0x58, 0xe5, 0xad, 0x4d, 0xa1, 0x29, 0x16];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("41294283dd1cd88df4014f732df2c520e29440c746e2ecc631ed8ff9"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("0dd3bd0ab6c1beec52c2bea6ef15845f1f874ee7fb2faee919c5c3c40b0d4738"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("a3b8d2c1f5a8dbda01181a1fce0cc1a87fb220a563b697a66e6882f0bdbe6d640d2d161e064781e40140221db1a5b620"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("36981b9912040b746df1df3aa6b40409938ef14e67923e614dd413568d3dcb0245433d1c52a87867b4dc220d2870a0c1ebb5aa8ad4aefa007c9f6f4dab0f38eb"));
	let bytes = &[0x8c, 0x02, 0x20, 0xdf, 0x1a, 0x02, 0xf2, 0x9c, 0x90, 0xfe, 0xfe, 0x57, 0x3d, 0x3c, 0x77, 0x11, 0x5e, 0xc4, 0xb0, 0x1a, 0x6e, 0xe2, 0x6b, 0xf2, 0xe0, 0x2c, 0xd5, 0xf0, 0x62, 0xe7, 0xfc, 0xa4, 0x96, 0x80, 0x20, 0x45, 0xe7, 0x09, 0x92, 0x93, 0x29, 0x49, 0xf3, 0xdc, 0xc2, 0x01, 0xc3, 0x0f, 0x41, 0x87, 0x49, 0x49, 0x4c, 0xbb, 0x7c, 0x9d, 0x20, 0x7d, 0xc2, 0xa5, 0xa9, 0x2a, 0x07, 0x42, 0x10, 0x29, 0x5b, 0x23, 0x7b, 0x9b, 0x9e, 0xfb, 0x35, 0x8a, 0xde, 0xe3, 0xfe, 0xb7, 0xb4, 0x91, 0xd5, 0x00, 0x1b, 0x1f, 0xab, 0x9d, 0xd1, 0xcc, 0x28, 0x22, 0x50, 0xa5, 0x1f, 0x81, 0xbc, 0xcc, 0x59, 0x05, 0xcf, 0xb0, 0x42, 0x31, 0xd1, 0xfe, 0x57];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("101c3f743373b2a768c56bad78f003c8340d48ad0afb4c0c105f9445"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("558f1aeacef018a5f6dd7313538de0e679c61285fe5c7f4e43807dd7a8452009"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("220591288f88c6dbe490a93082f9f51ec927dfe85fdf3f8884db1868eaef663a0268cd8b934530750e586e9b5488bab5"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("99e40c6bc47adae1779494d85f37360908362cba6b87318a69c5f92928e42aa0fd9b81b122c184dc53512a882c63838d783f8d92f57f275b2016a47f2aa67ea1"));
	let bytes = &[0x51, 0x66, 0xee, 0xa9, 0x9a, 0x93, 0x2f, 0xb1, 0x96, 0xd5, 0x59, 0x21, 0x97, 0x47, 0xe6, 0xc7, 0x55, 0x01, 0x11, 0x73, 0x39, 0x19, 0x9a, 0x68, 0x05, 0xf6, 0x16, 0x33, 0xfb, 0x83, 0xa8, 0x19, 0xda, 0xf7, 0x39, 0x75, 0x39, 0x1f, 0xe5, 0xec, 0x97, 0x87, 0x3a, 0x9b, 0x6f, 0xf8, 0x7f, 0xbe, 0xa8, 0xc6, 0xc5, 0x76, 0x4f, 0xd8, 0xc1, 0x0f, 0xd2, 0x20, 0x6d, 0xf6, 0x98, 0xac, 0x08, 0x2d, 0x12, 0x98, 0x55, 0xab, 0xed, 0x20, 0x02, 0xee, 0x9d, 0x93, 0x96, 0x9d, 0x4f, 0xf9, 0x6f, 0x5b, 0x4a, 0x3e, 0x69, 0x99, 0xc6, 0xa0, 0x1d, 0xed, 0xe5, 0xf7, 0xdc, 0xf5, 0xbf, 0x91, 0x2b, 0xec, 0x29, 0x64, 0xf4, 0x90, 0x1f, 0x7d, 0x08, 0xb9, 0x23, 0x6a];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("58806a284797ac565687dd48a97213bbb3988d716b41c2e8746c1816"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("22e982f90d524d6ce88c093bcbf98b341d00af9b5013b4bc13064d29c0df9931"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("48ed65335e005b2223ba78252fdcad866bff596ea77e6730dcde0ea2c24a468ebfcac517fad3f816d649f2cad5d5fd5b"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("d3683a363e8d595c8d7ac7d9be1e8836b1df08264672dae47a36fb0c77f96d0c980a44f7311bcff1cfd8a770c1542c45e9a07a557b828f11be65f3bd97972369"));
	let bytes = &[0xff, 0xda, 0xfa, 0x4d, 0x90, 0xc0, 0x7a, 0xae, 0x19, 0xcc, 0x61, 0xc3, 0xcc, 0x85, 0x86, 0x37, 0xf6, 0x4b, 0xfb, 0xfa, 0xaa, 0x39, 0x64, 0x75, 0x54, 0xee, 0x7d, 0x2b, 0x6c, 0xe8, 0x39, 0xc9, 0x39, 0x8f, 0x1a, 0x46, 0xef, 0x00, 0xa2, 0x15, 0x2b, 0xac, 0xde, 0x5a, 0x51, 0x59, 0xe6, 0xcc, 0x40, 0x0f, 0x5b, 0xe7, 0x23, 0x61, 0xeb, 0x3f, 0x85, 0x88, 0x74, 0x9b, 0x8b, 0x15, 0xde, 0xed, 0xd6, 0xa0, 0xea, 0xb5, 0x5c, 0x8d, 0x45, 0x37, 0xfa, 0x50, 0x19, 0x7f, 0xcb, 0x78, 0xef, 0x88, 0x2b, 0xdb, 0xe9, 0x04, 0x04, 0x9c, 0x20, 0x4c, 0xc8, 0x70, 0xf0, 0x8a, 0x2e, 0xbf, 0x25, 0x12, 0xeb, 0xb7, 0x17, 0xd9, 0x42, 0xd7, 0x1b, 0x78, 0x10, 0x49, 0x67, 0x0a, 0xcf, 0x78, 0x15, 0x49, 0xdd, 0x1d, 0x95, 0x0c, 0x6c, 0x71, 0xe1, 0x5f, 0x38, 0xf1, 0x5a, 0x4a, 0xca, 0x1f, 0x08, 0xf3, 0xaa, 0xec, 0x32, 0xf2, 0x9b, 0xbb, 0x57, 0x1c, 0x7b, 0xdc, 0xbc, 0xbb, 0x1a, 0xac, 0x20, 0x9a, 0xd7, 0xed, 0x12, 0x67, 0x27, 0x9c, 0x9b, 0x45, 0x54, 0x8d, 0x73, 0x73, 0x55, 0x55, 0xd3, 0x2a, 0x38, 0x9c, 0x12, 0xcb, 0xa8, 0xa1, 0xa4, 0xa8, 0xc2, 0x2d, 0x9e, 0x3e, 0xf8, 0x5c, 0x1e, 0x8a, 0xf8, 0x3b, 0xea, 0xc3, 0xbb, 0x49, 0x61, 0xad, 0xba, 0x9b, 0xd4, 0x2a, 0xce, 0x3a, 0x58, 0x57, 0xc7, 0xbe, 0xd9, 0x84, 0xf1, 0x88, 0xd8, 0x5b, 0x7f, 0xde, 0xd9, 0xb1, 0x3f, 0xde];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("9c44b2a3acc37abffddee574d968dadd56b337abdd80e6d4fbc7a938"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("bfb3a85dc228fc08334b1cf78aa959053a734f851d0caa8e511d63797fe7ae32"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("98850bdf646730b090547bcbc891b1dbb68bc02794054e8f6bd5b01f13547070e156b0e603406fedf80b9e88f9a3ec5d"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("70290cbb372620a62cb88971a238f2957c616850aa0cd2656fffa55f8edf7bb495d1e10ed37dbd0722fb0e1ff384da5df027f088bf58e22009c10891858e6511"));
	let bytes = &[0x7e, 0x2a, 0x1e, 0x0f, 0xfd, 0x36, 0xbc, 0x73, 0x53, 0x2c, 0x60, 0xe5, 0xd4, 0x36, 0x98, 0x7b, 0x7c, 0xde, 0xed, 0xcd, 0x77, 0x4c, 0x8c, 0xea, 0x49, 0x0c, 0x08, 0x72, 0xa3, 0x2d, 0xd5, 0x95, 0xff, 0x57, 0x83, 0xd1, 0x41, 0x11, 0xba, 0xe8, 0x68, 0x8e, 0x58, 0x8e, 0xa3, 0x50, 0xfb, 0x2f, 0x6f, 0xdc, 0x4a, 0x2d, 0x3a, 0x6a, 0x97, 0xd1, 0x9f, 0x03, 0x0d, 0x97, 0xc8, 0xa8, 0x65, 0x70, 0x7f, 0x40, 0xb9, 0xd6, 0xe1, 0x03, 0xa8, 0x7c, 0x7e, 0x97, 0xbc, 0x1c, 0xe2, 0x04, 0x7a, 0xff, 0x81, 0x98, 0xfb, 0xd0, 0xc4, 0xfa, 0xfd, 0x1c, 0xab, 0x7f, 0x68, 0x7b, 0xe1, 0xca, 0x0b, 0xc1, 0xa1, 0x67, 0x27, 0x7d, 0xe0, 0x0e, 0x23, 0xef, 0xd2, 0xbe, 0xdc, 0x68, 0xf6, 0x4b, 0xa2, 0x0a, 0xae, 0x7e, 0x36, 0xea, 0x62, 0x80, 0x8a, 0x6b, 0xe1, 0x3b, 0xd4, 0x48, 0xcd, 0x56, 0x8b, 0x1b, 0x26, 0x71, 0x05, 0xc7, 0x4f, 0xc8, 0xdf, 0x57, 0x83, 0xd7, 0x51, 0x4a, 0x3f, 0x06, 0xda, 0xa6, 0xff, 0xaf, 0xad, 0x3b, 0xa6, 0xc4, 0x00, 0x3d, 0xcf, 0x18, 0xac, 0xa4, 0xbf, 0x38, 0x99, 0x7c, 0x2b, 0xac, 0x54, 0xd4, 0x98, 0x67, 0x5b, 0xd9, 0xbc, 0x16, 0xff, 0x8a, 0xd9, 0x2e, 0x17, 0xee, 0x15, 0x57, 0x2d, 0x0f, 0xce, 0xc5, 0x48, 0x7a, 0xe7, 0x4a, 0xd8, 0xd5, 0xd2, 0xbd, 0x8f, 0x51, 0xed, 0x7b, 0x28, 0x31, 0xdf, 0x9c, 0x43, 0x7a, 0x6f, 0xc6, 0x92, 0xfa, 0x1c, 0x71, 0xa6];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("9f77e40831046daa2c07e9c72e0054cf2f61b5b93726d10d8f5f7fa6"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("f4b94dc8f31d54475b19aceb11df697042e98cfd65a5966ff3c2e2e3f70bed9c"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("705d8c7850fd9b0fc052c48fc19b9dfb474906532f1989d1233879ae41505ea6c7f1e35b5ca39b1bc9dd8b236e1a0fef"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("b3d840156a35672a6bd4c3edd0095ace22e4f901e04e9a3ac06c1d9c1de59f89dd958f3880372f4011431d22c5ec3f72b104ee3813a9e1c447e4f4d0e53c3b52"));
	let bytes = &[0xf5, 0x2f, 0x3c, 0x2e, 0x3d, 0xaa, 0x28, 0xe9, 0x05, 0x49, 0x6d, 0xc7, 0xd4, 0x29, 0xbb, 0x61, 0xe7, 0xdd, 0x87, 0x9b, 0x7c, 0x45, 0x95, 0x8a, 0x38, 0xd9, 0x85, 0x5d, 0x02, 0x13, 0x80, 0x10, 0xed, 0x0b, 0x6c, 0x62, 0xe6, 0xec, 0xbc, 0xe2, 0xbb, 0xfd, 0xec, 0xb8, 0xa5, 0x07, 0xe3, 0x73, 0x87, 0xbc, 0x2d, 0xe0, 0x9d, 0xe3, 0x03, 0x6e, 0x7b, 0xd7, 0x93, 0x7f, 0xbd, 0xcd, 0xcd, 0x9d, 0xc1, 0x06, 0xe3, 0x81, 0xfe, 0x49, 0x75, 0x3e, 0xf9, 0xda, 0xee, 0x26, 0xec, 0x40, 0xd7, 0x0a, 0x59, 0x06, 0xaa, 0xa5, 0xb6, 0x9b, 0xda, 0x33, 0x30, 0xe6, 0x5a, 0x76, 0xe9, 0x41, 0xbd, 0x7a, 0x15, 0xc8, 0xfe, 0x20, 0x78, 0x52, 0xe9, 0xbe, 0x61, 0x21, 0x98, 0x3a, 0xfb, 0x33, 0xda, 0x61, 0xf4, 0x46, 0xee, 0x93, 0x9a, 0x72, 0x12, 0xd2, 0xa1, 0x45, 0xb0, 0x57, 0x38, 0x6e, 0xd1, 0xd3, 0x7f, 0x5f, 0x11, 0xa6, 0xa9, 0x7d, 0x17, 0x14, 0x9e, 0x52, 0xe3, 0x53, 0x75, 0xc8, 0xa9, 0xec, 0x15, 0x7e, 0xc3, 0x4c, 0x44, 0xef, 0x5e, 0xd9, 0x6d, 0x5e, 0x9a, 0xf4, 0xeb, 0x3d, 0xee, 0xfa, 0xd8, 0x35, 0xbb, 0x04, 0x64, 0x4f, 0x3e, 0x27, 0xa9, 0xdc, 0x13, 0x3b, 0x96, 0xdb, 0x61, 0xaa, 0xd7, 0x1f, 0x79, 0x31, 0x63, 0xde, 0x36, 0x9f, 0x0c, 0xbf, 0xbe, 0x4c, 0x08, 0x30, 0x64, 0x99, 0xe4, 0xda, 0x1b, 0x3b, 0x58, 0x00, 0xc6, 0x38, 0x28, 0x83, 0x21, 0xc9, 0x33, 0xc0, 0xe0, 0xec];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("f62c29064ea471ec9b962d12cd50483cdc0a15a2cbd8829c8e54e11b"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("199ba5d3b633d2e83dfd5a1e64791386e81e13a9a296a95841cff93aea15acbd"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("bb1e32194422668f64f8cee8fb0aaab62b57b2f757de9623820b1212cbf375d784d030169ede174eaaa573cf8f97528b"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("6de1ff63e1fb1539b0915fd1e4d5e9192213a3c7e5542ef8610b40f4a74930a3e4afd62ac7bbd6c12f8a852502013d903bbc4194f0d52ff385001750fbf9fcd7"));
	let bytes = &[0x7f, 0x8e, 0x42, 0xe0, 0x9d, 0xf6, 0xec, 0x45, 0x01, 0x5b, 0x95, 0x9e, 0xd8, 0x7f, 0x47, 0xde, 0xb8, 0x51, 0xe4, 0x0b, 0xdb, 0x8b, 0x4d, 0xc1, 0xa6, 0x4f, 0x9c, 0x7d, 0xc6, 0xd7, 0xf3, 0x33, 0xed, 0xa7, 0x92, 0xc9, 0x37, 0x9c, 0x3d, 0xab, 0x1f, 0xd8, 0xb5, 0x30, 0x39, 0xd4, 0xe9, 0xdc, 0xe1, 0x93, 0x83, 0x7b, 0x2a, 0x7c, 0xe6, 0x24, 0xec, 0x41, 0x6a, 0xc0, 0x5c, 0xf3, 0xb2, 0xb5, 0xdb, 0x72, 0xa4, 0x55, 0x08, 0xcf, 0xc6, 0x88, 0x1e, 0x22, 0x2f, 0x85, 0x8e, 0x38, 0xf1, 0xd9, 0xb2, 0x36, 0x44, 0x6a, 0x8b, 0x45, 0xa7, 0xfd, 0x8b, 0x99, 0x4c, 0x01, 0xdb, 0x33, 0x2b, 0x4f, 0xce, 0xec, 0xb8, 0x23, 0x5a, 0x41, 0xc9, 0x7c, 0x90, 0xee, 0xf5, 0x2c, 0xb6, 0xa9, 0x98, 0x81, 0x8d, 0x69, 0xed, 0x89, 0x8c, 0x3b, 0x2a, 0x82, 0xcb, 0x8c, 0x9c, 0x6b, 0x56, 0x87, 0xa3, 0x91, 0xdf, 0x64, 0xed, 0x06, 0xa9, 0xc8, 0x32, 0xe9, 0x24, 0x7c, 0xea, 0x94, 0x55, 0x4c, 0x5a, 0x4f, 0xc5, 0xbc, 0x0b, 0x28, 0x89, 0x88, 0x18, 0xb1, 0x06, 0x79, 0x42, 0x2d, 0x33, 0x6b, 0xd3, 0x49, 0x6c, 0x42, 0xc2, 0x11, 0x8e, 0xeb, 0xda, 0xee, 0x0f, 0x43, 0x12, 0xa8, 0xd7, 0x60, 0x3c, 0x1f, 0xba, 0xc5, 0xa9, 0x80, 0x6a, 0x90, 0x69, 0x9d, 0x4a, 0xa7, 0x2c, 0x77, 0xad, 0xca, 0x04, 0xba, 0xae, 0x83, 0xe6, 0x82, 0x5a, 0xb4, 0xfb, 0xdb, 0x37, 0x34, 0xcc, 0x10, 0x84, 0x63, 0x1c, 0x1a, 0x35];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("f695acce8845d18a30e467184211114de781bc15f51b64bf75c6e49d"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("ea2988d1b6d833ee232502cbd51b5384214e5e97e50e0866ff0099dc21a03819"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("760c77c1de1eaf90c2dbb4c0737ad892880981c3c7a5e1af4aebcb484b80485a0f674130770b7a46f2b90a7a75ed5470"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("172ba91f2573fd7d8ad25129943c31a20a58107f2c7dbd21ed0143f66c8d0662822c6f58bfd872dc44b970d8c787a9b2e255775e763285354d03d3669ef17bd6"));
	let bytes = &[0x6f, 0x13, 0x07, 0xe0, 0x15, 0x64, 0xac, 0x2f, 0xb5, 0x38, 0x25, 0xde, 0xef, 0x9d, 0x1d, 0x75, 0x23, 0xc6, 0xc6, 0x0c, 0xf7, 0xf4, 0x81, 0xf7, 0x4e, 0x0b, 0xf4, 0x2b, 0x99, 0xc3, 0x27, 0x43, 0xd4, 0x6c, 0xa5, 0x63, 0xfe, 0xba, 0x23, 0xe1, 0x90, 0x44, 0x27, 0xac, 0x07, 0x66, 0x78, 0x09, 0xab, 0x1b, 0x45, 0xc6, 0x1d, 0x09, 0xec, 0x77, 0x63, 0xf1, 0xbc, 0xee, 0x5d, 0x99, 0xab, 0xad, 0xc5, 0xf2, 0x6b, 0x6d, 0x4f, 0x7f, 0x54, 0x36, 0x3b, 0xd4, 0x90, 0x4d, 0xa6, 0x26, 0xe8, 0x5d, 0xfb, 0xed, 0x55, 0x78, 0xa9, 0x3c, 0x25, 0x64, 0xca, 0x17, 0xce, 0x77, 0x05, 0x75, 0x15, 0xb2, 0x5b, 0x94, 0x01, 0xda, 0x58, 0x4b, 0x73, 0xa2, 0x95, 0x94, 0xf5, 0x2a, 0x35, 0xbf, 0xfc, 0x0c, 0xcd, 0xad, 0xc7, 0x7c, 0x70, 0x4a, 0xab, 0x6c, 0xe3, 0xe8, 0x84, 0xe3, 0x47, 0xc4, 0x48, 0x2f, 0x80, 0xc8, 0xcf, 0xcd, 0x64, 0x2f, 0xe3, 0x93, 0x00, 0xf4, 0x1f, 0x48, 0xdd, 0xe6, 0xd9, 0xc4, 0x63, 0x41, 0x70, 0x2a, 0x17, 0xc4, 0x6c, 0x98, 0x15, 0x54, 0xcb, 0x08, 0xc3, 0xb1, 0x0a, 0x0b, 0x91, 0x47, 0x31, 0x0d, 0x9f, 0x60, 0xb1, 0x34, 0x6c, 0xe5, 0x48, 0x67, 0x23, 0x14, 0xf6, 0x49, 0x0b, 0x87, 0xd4, 0xe3, 0x65, 0x22, 0x86, 0x7c, 0xef, 0x75, 0xa2, 0x89, 0x29, 0xa1, 0x16, 0xcf, 0x33, 0x7c, 0xf8, 0x0d, 0x0b, 0x33, 0xda, 0xa8, 0xa4, 0xb5, 0x2f, 0x17, 0x5d, 0xff, 0x83, 0xc8, 0xdd, 0x65];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("14331c3990afc979d453a56f3e8b2af4600809e3a4de9b7defd327ae"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("618f0793412c44d9eb81d0ed9890e0295a0c46268c7e328d8d3517ffdc10df2b"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("e070ee0b35fde2de445ee62c5a052dd73ca014836ddbfc8f69be1d5aa19f1fb0399d39225f9dffc29b29e9c93ccd5413"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("e1383a58dce6e29c5607be96fb89dbddb765fdb45269c9d17a347f8c986feef67dcadc07e1132ceef90e0249095a3f013016c9d3c82187d0eaa3d0b904972b35"));
	let bytes = &[0x24, 0xb3, 0xc5, 0x26, 0xe7, 0x70, 0x10, 0x87, 0xe2, 0x81, 0xa9, 0x90, 0x59, 0x19, 0xe4, 0x17, 0x7e, 0x82, 0xf2, 0x33, 0x0a, 0x60, 0xf4, 0x64, 0x06, 0xee, 0x55, 0x16, 0x4c, 0x68, 0xb0, 0x5e, 0x6a, 0xa0, 0x6a, 0x2e, 0xba, 0xe6, 0xe6, 0x8b, 0xd7, 0x6a, 0x31, 0x14, 0x9b, 0x12, 0xf4, 0x01, 0xb9, 0x4f, 0x8e, 0x85, 0x58, 0x7d, 0x86, 0x5f, 0xb9, 0xd6, 0xb9, 0xa5, 0x09, 0xff, 0xad, 0x26, 0x94, 0xb7, 0xc2, 0x22, 0xf4, 0xb2, 0xb7, 0x29, 0x90, 0xea, 0x98, 0x2a, 0x55, 0xb0, 0xf4, 0xcb, 0x53, 0x7a, 0x03, 0x07, 0x8d, 0x51, 0xcf, 0xc3, 0x6c, 0x41, 0xa5, 0xda, 0x40, 0x2c, 0x21, 0x06, 0xa5, 0x24, 0xe2, 0x0e, 0xaf, 0xd2, 0x42, 0x11, 0x0c, 0x55, 0xf1, 0x14, 0x21, 0xe6, 0xac, 0x57, 0x91, 0xbc, 0x8a, 0x72, 0x14, 0xa0, 0xbb, 0x86, 0x57, 0x13, 0x83, 0xde, 0xd4, 0x9d, 0x0b, 0x6c, 0xf4, 0x13, 0xf2, 0xe1, 0x95, 0xa1, 0x8c, 0x59, 0x2e, 0xa9, 0x85, 0x56, 0x80, 0x39, 0xa0, 0x49, 0x85, 0xb1, 0x2b, 0xd8, 0x66, 0x9b, 0xf3, 0xef, 0x27, 0xf5, 0xf4, 0xba, 0x55, 0xdb, 0xd4, 0x9e, 0x3e, 0x16, 0x00, 0x4c, 0x0a, 0x94, 0xc2, 0x2c, 0x79, 0x83, 0x47, 0x52, 0x11, 0x88, 0xf0, 0xff, 0x04, 0x72, 0xfa, 0x6f, 0xa9, 0x38, 0x72, 0x4a, 0xa7, 0x14, 0x4a, 0xc5, 0xed, 0x2e, 0x0d, 0x55, 0xb5, 0x29, 0xbf, 0xeb, 0xea, 0xc4, 0xbd, 0x06, 0x19, 0x9f, 0x63, 0x8b, 0xc6, 0x4a, 0xda, 0x00, 0x77, 0x36, 0xa0, 0xd3, 0x29, 0xe1, 0xb3, 0xd3, 0xd9, 0x30, 0x79, 0x6b, 0xf4, 0x17, 0x77, 0x1a, 0xfe, 0x72, 0xc1, 0x76, 0x3a, 0x2e, 0xe2, 0x75, 0xce, 0x41, 0x83, 0xe1, 0x32, 0xf4, 0x20, 0x73, 0xf5, 0xec, 0x80, 0x0c, 0xf7, 0x15, 0xd1, 0xe3, 0xe8, 0x23, 0x82, 0x57, 0xc5, 0x7d, 0x1f, 0x2f, 0x39, 0xe1, 0xba, 0x99, 0xb3, 0x24, 0x84, 0x0f, 0x66, 0xca, 0x5e, 0x5e, 0x57, 0x2a, 0x98, 0xc3, 0x65, 0x0a, 0x84, 0x23, 0x3c, 0xa0, 0x77, 0xf6, 0x09, 0x5c, 0x00, 0x04, 0xa5, 0xef, 0x50, 0x84, 0x8b, 0xd2, 0x44, 0xa4, 0x0c, 0x81, 0x99, 0x98, 0xa1, 0xc0, 0x8a, 0x2b, 0x3b, 0x10, 0x78, 0xf9, 0x54, 0xfd, 0x36, 0x6d, 0xfe, 0x73];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("8ee01ae5d72b4c6631b28d52d88f4afc78cc46e0dd63611306789ddf"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("07bc34846759821e49a1ca14f69dbc590d049ad97a85c3c5db775e8c09b2b309"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("9d27309b3ce909221ad61d1207038752ac2df71cd206a717e23a639b49f0030009fecfddd630171d5a2117899469e2b6"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("22dcfc66241dd7c9aeddbc608db22cb320dbe295a90fbeb819afebc203e3d946e6f3f087aaeacb0f60435209ee44773379d301bb6f088607329b4fc785f533e6"));
	let bytes = &[0x06, 0x62, 0x03, 0xb5, 0xda, 0x42, 0xec, 0xbe, 0x1d, 0x87, 0x95, 0xcf, 0x42, 0xe8, 0x4e, 0x21, 0xc9, 0x75, 0xc2, 0xfb, 0x44, 0xfc, 0x07, 0x28, 0x5b, 0x21, 0xe0, 0x94, 0x3c, 0xbb, 0xcc, 0x06, 0xf7, 0x68, 0xdb, 0x91, 0xeb, 0x23, 0xba, 0xff, 0xe9, 0x5a, 0xd9, 0xf9, 0x30, 0x4f, 0xe2, 0xcc, 0x11, 0x5d, 0xa8, 0x9a, 0x63, 0xaf, 0xc2, 0x1f, 0xa2, 0xff, 0x8c, 0x86, 0x9c, 0x0e, 0x6e, 0xee, 0xfb, 0x00, 0x80, 0x3f, 0xd9, 0x97, 0xc5, 0x6d, 0xad, 0x0c, 0x99, 0xcf, 0x47, 0x22, 0x2c, 0xb1, 0x43, 0xfe, 0x5a, 0xcb, 0x15, 0xdb, 0x6c, 0x65, 0xd6, 0xe9, 0xe7, 0x1d, 0x2d, 0xbe, 0x66, 0xa1, 0xfc, 0xd6, 0xbe, 0x02, 0xc1, 0x32, 0x02, 0x02, 0x03, 0xce, 0x24, 0x5e, 0x06, 0x8a, 0xb5, 0x50, 0xbc, 0xc8, 0x92, 0x1f, 0xbd, 0x6c, 0xae, 0x94, 0x0f, 0x56, 0xae, 0x9c, 0x94, 0x22, 0x94, 0xfc, 0x96, 0xcc, 0x33, 0x2c, 0x77, 0x3f, 0x5e, 0x87, 0x47, 0xc3, 0x70, 0xd0, 0x3d, 0x61, 0xd8, 0x09, 0x91, 0x42, 0x64, 0x4b, 0xd8, 0x65, 0x91, 0xf4, 0xc4, 0x7e, 0x64, 0xee, 0xfe, 0x80, 0x28, 0xa4, 0xeb, 0xc5, 0x7e, 0xc9, 0xf2, 0x89, 0x13, 0xe7, 0x6c, 0xb7, 0x4d, 0x1d, 0xb4, 0xe9, 0x67, 0xb1, 0x19, 0x10, 0xa9, 0x1e, 0x86, 0xcb, 0x6d, 0xff, 0xc2, 0x84, 0x88, 0x83, 0xbe, 0x72, 0xaa, 0x2b, 0x51, 0x72, 0xe6, 0xc4, 0xa4, 0x84, 0xb2, 0xa1, 0x72, 0x4f, 0x71, 0x5d, 0xbc, 0x43, 0xa6, 0xcd, 0xd6, 0xa7, 0xc3, 0xf1, 0x72, 0xba, 0x12, 0x1d, 0x31, 0x39, 0x20, 0x92, 0xd2, 0x9b, 0xd8, 0xe4, 0x5b, 0x0d, 0xb5, 0x07, 0x36, 0xa5, 0x6b, 0xd5, 0x6e, 0x63, 0x84, 0x89, 0x0a, 0xe5, 0xa3, 0xe6, 0xc8, 0x1d, 0xe6, 0xd2, 0x48, 0x8f, 0x9c, 0x40, 0x3a, 0xf2, 0xc8, 0xeb, 0xfa, 0x7d, 0xb3, 0x8e, 0xce, 0xaf, 0x25, 0x42, 0xfd, 0x70, 0x55, 0x3c, 0x77, 0x97, 0xb1, 0x86, 0xb6, 0x23, 0x58, 0xbb, 0x77, 0x54, 0xb2, 0x28, 0x15, 0xa9, 0xf7, 0x23, 0xfd, 0x03, 0xc2, 0xdd, 0x93, 0xca, 0x61, 0x31, 0xdb, 0x79, 0xae, 0x8e, 0xe8, 0xfb, 0x48, 0x3f, 0x32, 0xdb, 0xb0, 0xeb, 0x74, 0x83, 0x00, 0x69, 0x5a, 0x27, 0xd8, 0xb4, 0x91, 0xac, 0x91];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("db350ddfb26298b3e1c949f8d3b5d4638d4800fdd2cba17e37bc12a5"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("72e6785d0cb210678aec3e14591e1a1723d15d3f2e8289b4d0a4e9412f748622"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("88f211f00d751fade9339189191d41c36bb66f6cf8d61dc420d4eb4355109d3a7fa60c7092585eb74eddac88d659ffc8"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("11439d9bd497c99c2b066b6c462903282fa3288c1c14046fbf7c13090067092abe86d8898c5146725bdaa69b767e5f2ecf9f916fec934e619c22d2c4937f0090"));
	let bytes = &[0x4e, 0x2f, 0x82, 0xdc, 0x98, 0x69, 0x39, 0x7c, 0x11, 0x95, 0xa8, 0x00, 0x6f, 0x00, 0xc8, 0x23, 0xd5, 0xda, 0x00, 0x88, 0xb2, 0xcb, 0xe0, 0x08, 0x7c, 0x56, 0x41, 0xdc, 0xd4, 0x3f, 0xa3, 0xdd, 0x83, 0x95, 0xbb, 0x82, 0x8d, 0x11, 0x22, 0xcc, 0x27, 0x46, 0x1c, 0x4b, 0x38, 0x5c, 0x7c, 0xa2, 0x16, 0x5d, 0xf8, 0x58, 0x2c, 0x86, 0xd7, 0x56, 0xfa, 0x20, 0x99, 0x7f, 0x4d, 0x02, 0xed, 0xc0, 0x5d, 0x14, 0x78, 0xd2, 0x4a, 0x03, 0x0a, 0xfb, 0xc3, 0x9f, 0xac, 0x6a, 0x06, 0xe7, 0x20, 0xb8, 0x5b, 0xf7, 0x65, 0xbe, 0x62, 0x4a, 0xe4, 0x28, 0x63, 0x89, 0xa9, 0x24, 0xad, 0xcb, 0x02, 0x4f, 0x51, 0xdb, 0x86, 0x62, 0xda, 0xc6, 0x38, 0x2d, 0xf1, 0x2f, 0x9b, 0x5e, 0x29, 0xae, 0xac, 0xe2, 0x10, 0xb2, 0xc0, 0x00, 0xaf, 0x3c, 0x7c, 0x6b, 0x6f, 0x78, 0x01, 0x1f, 0x46, 0xf3, 0x19, 0x38, 0x37, 0x77, 0xae, 0x30, 0x3e, 0x03, 0xb0, 0x2c, 0xe0, 0x5e, 0x4e, 0xb9, 0x14, 0xf2, 0x80, 0xea, 0x04, 0x6c, 0xda, 0xdf, 0x8e, 0x72, 0x16, 0xc0, 0x80, 0xbb, 0x37, 0x46, 0x20, 0x47, 0x27, 0x02, 0x7b, 0x3f, 0xab, 0x7f, 0x7c, 0x41, 0x45, 0x4c, 0x22, 0xc0, 0x6c, 0x33, 0x5f, 0x58, 0x97, 0xf6, 0x37, 0x2b, 0xfe, 0xe9, 0x91, 0xc0, 0xe0, 0xe0, 0xf1, 0xcd, 0xe9, 0xd0, 0x26, 0x71, 0xdd, 0x50, 0x29, 0xc0, 0xe0, 0xd2, 0xea, 0xe4, 0xd2, 0x9d, 0x2e, 0x3f, 0x5e, 0x13, 0xf6, 0x6d, 0xa1, 0xda, 0xcf, 0x0c, 0x37, 0x60, 0xc3, 0xe4, 0x45, 0xaf, 0x8c, 0x98, 0x4a, 0xe9, 0x5e, 0x35, 0x94, 0xe1, 0x28, 0x0f, 0xf5, 0xbd, 0xc9, 0x00, 0x31, 0x7d, 0xed, 0x5c, 0x82, 0x61, 0xb0, 0xba, 0x29, 0xab, 0x0d, 0x1a, 0x1e, 0xe4, 0x0f, 0x66, 0x28, 0xb7, 0x8c, 0xc0, 0x68, 0x98, 0x43, 0xa5, 0xb0, 0xa7, 0xd5, 0x4e, 0xd1, 0x99, 0x9d, 0xaa, 0xc1, 0x2e, 0x36, 0x82, 0x63, 0x48, 0x88, 0x50, 0xac, 0x4a, 0xab, 0xfa, 0xe5, 0x61, 0x64, 0x35, 0x10, 0x38, 0xd3, 0xd3, 0x84, 0x61, 0xe1, 0x82, 0x95, 0x8b, 0x06, 0x5a, 0x99, 0x35, 0x04, 0x95, 0x44, 0xb3, 0x95, 0x53, 0xa8, 0x51, 0x0f, 0x2f, 0x97, 0x6b, 0x44, 0x39, 0x97, 0x46, 0x5d, 0xee, 0x6e, 0x81];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("2ee6436b60492db562618764d19c31bada986979fda122a85753de20"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("a68c5e8c18054df303087ed4e45e37f3a8cd6a6102244678a75a0b789bc34b7c"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("ac98a4fb997666ce4c2a539a808f18ed82bd63bed5c176ea53605f3cc1f0b73625e74858fa56a5c8cc30c8880ed088ae"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("732ada97824e44dd9e6526cb65b1b730063619afea7141eba119a7fca4e1798623405f442dc4d9904000816be97fbf63f0f53cc93ef4eb75cef39d6cc10749da"));
	let bytes = &[0xe7, 0x54, 0xaa, 0x64, 0x34, 0x09, 0x84, 0xa9, 0xa5, 0xc0, 0x8c, 0xd8, 0x8d, 0x1b, 0x8f, 0x24, 0x3f, 0xfa, 0xb6, 0x0e, 0x5d, 0x0c, 0x2c, 0x9e, 0x9a, 0x76, 0x35, 0x90, 0x88, 0x44, 0xc7, 0xee, 0xa2, 0xce, 0xc8, 0xb4, 0x4e, 0x03, 0xa5, 0x8d, 0x3c, 0xd0, 0x63, 0x99, 0x38, 0x74, 0xe0, 0x26, 0xec, 0x57, 0x15, 0xce, 0x9a, 0x4f, 0x4f, 0xc7, 0x9e, 0xa9, 0x97, 0x54, 0xcb, 0x43, 0x2e, 0x6c, 0x5e, 0x71, 0xb0, 0x54, 0x90, 0x26, 0x41, 0x1a, 0x0a, 0x9d, 0x1a, 0x24, 0x81, 0x5e, 0x18, 0x16, 0x30, 0x9c, 0xb7, 0x07, 0xb2, 0x79, 0x9a, 0xa5, 0xb7, 0xb8, 0x99, 0x49, 0x97, 0x0a, 0x9c, 0xa3, 0xe2, 0xdd, 0xbe, 0x7b, 0xbc, 0x16, 0x3a, 0xe3, 0x80, 0x42, 0x04, 0x86, 0x49, 0x41, 0x25, 0x47, 0xc0, 0xd4, 0x9c, 0xc5, 0x5d, 0x3f, 0xb1, 0x3f, 0x27, 0xc8, 0x5c, 0x28, 0x8e, 0x95, 0xd3, 0x40, 0xc7, 0xe6, 0xdd, 0x7a, 0x40, 0xe9, 0x4c, 0xd8, 0x02, 0x01, 0x4b, 0xd7, 0x55, 0x4a, 0x63, 0x31, 0xd6, 0x54, 0x84, 0x51, 0x2c, 0xfe, 0x71, 0xe7, 0xc1, 0x55, 0xe9, 0x05, 0xde, 0x8e, 0x17, 0xba, 0x07, 0x19, 0x4a, 0xc8, 0xcb, 0xcf, 0x38, 0xd9, 0x3c, 0x33, 0xef, 0x9b, 0xde, 0xa8, 0x5d, 0xb4, 0x80, 0xd7, 0xf1, 0x12, 0x6f, 0x02, 0xfa, 0xa5, 0xc0, 0x7d, 0x6c, 0x6d, 0x84, 0xf7, 0x28, 0x1c, 0x47, 0x24, 0x89, 0xa0, 0xfe, 0x8e, 0x5e, 0xde, 0xc3, 0xb0, 0x73, 0x49, 0x44, 0xd7, 0x05, 0xad, 0x4c, 0x73, 0xad, 0xed, 0xc2, 0x99, 0x6b, 0xfc, 0x4c, 0x07, 0x28, 0x14, 0xa7, 0x9c, 0x34, 0x1c, 0x5b, 0xd5, 0x42, 0x4f, 0x9d, 0x46, 0x25, 0x8b, 0xcd, 0xb1, 0x29, 0xaf, 0x31, 0x23, 0x94, 0xb0, 0xd7, 0x56, 0x36, 0xbf, 0x57, 0xfd, 0xdf, 0x64, 0x26, 0xe2, 0x10, 0x0f, 0xfa, 0x0f, 0x75, 0x26, 0x37, 0x30, 0x35, 0x13, 0xd7, 0xfd, 0xfb, 0x8f, 0x4f, 0x25, 0xe7, 0x55, 0x83, 0xc5, 0x82, 0x06, 0xa0, 0x57, 0x1f, 0xce, 0xd0, 0x48, 0xdb, 0x86, 0xea, 0x98, 0xa9, 0xe7, 0x9b, 0xd1, 0x7c, 0xd6, 0x53, 0x27, 0x56, 0xce, 0xbc, 0xac, 0xc4, 0xc2, 0x04, 0xbd, 0xb6, 0x73, 0x23, 0x1b, 0xcf, 0xfc, 0xe4, 0xdb, 0xb5, 0xf4, 0xf4, 0x36, 0xce, 0xf9, 0x8e];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("ca3adcdcdc87b0a7b491467c23ce52bee09765ef7cf4564c4d002dca"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("ad52794333524a9b8195e723bbbb85ec2daada65768a53e2a8ec432ef0088348"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("a451a9821786ab812279ea78ee39877917f78174c0600f99810b016766eeae4d3ca7619cb89b9134e47a8ed70ffbf96d"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("12120b5636d3c5a717036d396c909caf224ddff6786faf51cb6b1b801b7f56100efccffa63e1552bfb6a2d5b2287b89d7085348fe3bb6a1b55d9799ce5913b05"));
	let bytes = &[0x44, 0x55, 0xac, 0xab, 0x0a, 0xb8, 0x73, 0x72, 0xd4, 0xd1, 0xfd, 0xba, 0x28, 0x63, 0x3e, 0x5c, 0x96, 0x9d, 0xf3, 0xc4, 0xbc, 0x02, 0x8d, 0x18, 0x71, 0x01, 0xed, 0x56, 0x3a, 0xe8, 0x8b, 0x1e, 0x4a, 0x7a, 0xee, 0x68, 0xc3, 0x17, 0xf6, 0xc4, 0x9b, 0x48, 0x82, 0x8f, 0x5d, 0xdc, 0x9e, 0x5b, 0x10, 0xea, 0x9d, 0x47, 0xfc, 0x7c, 0xaf, 0x7a, 0x37, 0xc2, 0x64, 0xd3, 0xf6, 0xa2, 0x70, 0x4f, 0x4a, 0x0e, 0x22, 0x79, 0xb7, 0xfa, 0x55, 0xa1, 0x67, 0x66, 0x3e, 0x86, 0x04, 0x14, 0x90, 0x29, 0x85, 0xba, 0xc4, 0x09, 0x97, 0x15, 0x69, 0xe3, 0x13, 0x7d, 0xc5, 0x17, 0x5a, 0x49, 0x1d, 0x7a, 0x45, 0xd5, 0x84, 0x87, 0x59, 0xc1, 0xd0, 0x20, 0xee, 0x4d, 0x59, 0x85, 0x32, 0xb6, 0xe5, 0xcf, 0x86, 0xa1, 0x9f, 0x62, 0x37, 0xef, 0x62, 0x46, 0xa1, 0x00, 0xff, 0x52, 0xb4, 0xbb, 0x7b, 0x12, 0xb0, 0xd4, 0xf6, 0x9d, 0x26, 0x68, 0x59, 0x6b, 0xfb, 0x46, 0x3f, 0xad, 0xa5, 0x84, 0x12, 0x93, 0xf0, 0x6b, 0x5b, 0x92, 0x8e, 0xdc, 0x96, 0x29, 0xb6, 0x80, 0x5c, 0x27, 0x30, 0x86, 0xe0, 0x47, 0xb1, 0x8c, 0xda, 0xc0, 0x2d, 0x8d, 0xed, 0x67, 0x43, 0x67, 0x0c, 0xa7, 0x8c, 0x0b, 0x60, 0x29, 0x9f, 0xd7, 0xe7, 0x2f, 0x15, 0x22, 0xa9, 0x17, 0xb9, 0x3d, 0xdd, 0xad, 0x55, 0x87, 0x4c, 0x46, 0x80, 0x42, 0xd4, 0xaa, 0x04, 0xbb, 0xe0, 0x53, 0xd1, 0x9e, 0x00, 0x4e, 0x01, 0x5d, 0x45, 0x58, 0x98, 0xa6, 0x4e, 0xda, 0xae, 0x35, 0x38, 0x4b, 0xbb, 0xd6, 0x4a, 0x5b, 0xe3, 0x52, 0x40, 0x0d, 0xab, 0x8e, 0x58, 0x24, 0xc4, 0x56, 0xc7, 0xcf, 0x15, 0x74, 0xdc, 0xdd, 0xf0, 0xf7, 0x91, 0xfd, 0x69, 0x14, 0x1f, 0xf9, 0xc8, 0xd5, 0xc7, 0x17, 0x9c, 0x79, 0x29, 0x12, 0x89, 0x21, 0x8f, 0xb2, 0xf4, 0x09, 0xc1, 0xc7, 0xe8, 0x07, 0x0e, 0x8a, 0x16, 0x9f, 0xee, 0x09, 0xe9, 0x5f, 0x82, 0xf9, 0x73, 0xa5, 0x7d, 0x34, 0x21, 0xc5, 0x70, 0xa7, 0x26, 0x3f, 0xd0, 0x88, 0x68, 0x59, 0xeb, 0x6a, 0x5e, 0x38, 0x20, 0x45, 0xe0, 0x0a, 0x22, 0x82, 0x70, 0x5f, 0x20, 0x74, 0x11, 0x07, 0x8c, 0x11, 0x67, 0x20, 0x7e, 0x54, 0xca, 0x2b, 0x61, 0xb1, 0x04, 0xd3];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("8919cf495b19da8ac2891f1a2fe95541a7921fcd6e1fc6896bdceeb5"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("71ca2bbef77cdd396bfb463e53bfebdee5fe2f546682d0ce631cfe113dd7de5d"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("168209fffa10afb46d433fe0b5e08dbeee8b56c059a9dfd765241d426abdd350c1ff001dcf791e1d0ea3714258cead56"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("c488491c770413669293be35f2ea0d8ab296e11b8e15a17ccec14f05dfe5ebd1f7216d2196065d48d9ee9c82cba15afcbea8ff2a220797f33c2ec3577d132e92"));
	let bytes = &[0x26, 0x21, 0x26, 0x24, 0xf4, 0xc3, 0xc1, 0x41, 0x7f, 0x40, 0x42, 0x70, 0x2f, 0x4a, 0x78, 0xba, 0x7b, 0xbe, 0xfc, 0x3c, 0x5c, 0xeb, 0x3e, 0x02, 0x02, 0x1e, 0xcf, 0x15, 0xe9, 0x85, 0x86, 0x86, 0x8f, 0xc0, 0x8a, 0xd0, 0x72, 0x7f, 0xcf, 0x2f, 0x13, 0xef, 0x39, 0x5f, 0x43, 0x1a, 0x9e, 0xd9, 0x1b, 0x68, 0x45, 0x33, 0x36, 0x52, 0x29, 0x5e, 0x6a, 0x45, 0x8d, 0x81, 0x41, 0xc9, 0x85, 0x07, 0x0f, 0x81, 0xcd, 0x17, 0x61, 0xc1, 0x80, 0xf9, 0x6b, 0xac, 0x1c, 0xfc, 0x77, 0x92, 0xfd, 0x22, 0x02, 0x42, 0xb3, 0xeb, 0xd3, 0x93, 0xc4, 0xeb, 0x19, 0xb5, 0x54, 0xd6, 0xe3, 0x0b, 0xba, 0x79, 0xcd, 0xde, 0x38, 0x4d, 0x35, 0xc1, 0xb4, 0x5e, 0x48, 0x32, 0xdc, 0xa3, 0x1e, 0xdb, 0x4a, 0xb7, 0x7b, 0x9e, 0x1d, 0x14, 0x14, 0x27, 0xf9, 0xb9, 0xe8, 0x43, 0x41, 0x09, 0x7b, 0x1f, 0x0a, 0x5c, 0x41, 0xa5, 0x93, 0xd7, 0x2b, 0x87, 0x1a, 0x07, 0x13, 0x82, 0x60, 0xf8, 0x53, 0x90, 0x9e, 0x59, 0x52, 0x51, 0x8e, 0xe9, 0xcb, 0xf2, 0x1f, 0x19, 0x1d, 0xd5, 0xd1, 0x2d, 0x00, 0x8a, 0x99, 0xe6, 0xee, 0x6c, 0xf7, 0xda, 0xbd, 0x1b, 0x34, 0x65, 0xdd, 0x5d, 0x75, 0x09, 0xcb, 0xe7, 0xb3, 0x5e, 0x86, 0x4e, 0xf7, 0xdc, 0x03, 0xc4, 0x10, 0xdf, 0x5d, 0xc9, 0x51, 0xcf, 0xa8, 0xd0, 0x8a, 0x52, 0x6f, 0x25, 0x4c, 0xc0, 0xe2, 0x09, 0x78, 0xd1, 0xac, 0x07, 0xba, 0x04, 0xf9, 0xd6, 0x9c, 0x49, 0xa3, 0x37, 0xa4, 0x69, 0x00, 0xd2, 0xf6, 0x6d, 0xea, 0xde, 0x69, 0x2d, 0x4c, 0x4b, 0xd6, 0xb1, 0xbc, 0xab, 0x06, 0x56, 0xa6, 0x5c, 0xb9, 0x92, 0x80, 0xdb, 0x33, 0x62, 0xb4, 0x03, 0xc3, 0x34, 0xce, 0xfd, 0xe6, 0x49, 0xca, 0x22, 0xef, 0xae, 0xbc, 0x1f, 0xdf, 0xee, 0x31, 0x83, 0x54, 0x4b, 0xe9, 0x97, 0x1f, 0x85, 0xe0, 0x4f, 0xb6, 0xf9, 0x32, 0x63, 0xfe, 0x6c, 0x79, 0xf7, 0xc4, 0x39, 0x05, 0x1d, 0x99, 0xe8, 0x93, 0xad, 0xaf, 0x44, 0x80, 0x58, 0x3c, 0x6d, 0x8f, 0xd5, 0x2b, 0x6b, 0x97, 0xd6, 0x98, 0xa2, 0xe9, 0x3d, 0xcf, 0x81, 0x6e, 0xe1, 0x0d, 0x85, 0xcc, 0xb5, 0x11, 0xbb, 0x12, 0x2a, 0x98, 0x21, 0x4c, 0x89, 0x79, 0x66, 0xb6, 0x9c, 0x05, 0xf0, 0x8e, 0x5b, 0xf3, 0x37, 0x12, 0xa8, 0x57, 0xe8, 0xd0, 0x44, 0xaf, 0x37, 0xae, 0x48, 0x03, 0x5d, 0x0b, 0x8d, 0x36, 0xa6, 0x42, 0x16, 0x6b, 0xef, 0x3f, 0x74, 0xf6, 0xfe, 0x82, 0x54, 0xe8, 0x45, 0x84, 0x13, 0x4c, 0x91, 0x60, 0x5a, 0xfa, 0x0f, 0xab, 0xa0, 0x01, 0x99, 0x00, 0x94, 0x20, 0x81, 0xc5, 0x0b, 0xee, 0x2b, 0xf1, 0x96, 0x11, 0x97, 0xf8, 0xf0, 0x59, 0xf9, 0xc8, 0x40, 0x46, 0x51, 0x1e, 0x67, 0x45, 0x37, 0x2e, 0x52, 0x5e, 0x43, 0x2a, 0xfd, 0xb3, 0xf5, 0x8b, 0xc5, 0xdc, 0x9a, 0x98, 0x09, 0xa0, 0x12, 0x3a, 0x11, 0xee, 0xf4, 0xb6, 0x6c, 0x9f, 0xd1, 0x10, 0x86, 0x54, 0x1d, 0xea, 0xed];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("3c86c4eb8ed2da0523ef62e15578f1b3031dd4bfe0f746016b602f5f"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("48e0b67597176b66b8729fb5435692f02ff92ff42cfc8ec97e84d85ed7951bbb"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("674349aac4449b720411020daf94d152ed48b1fe0ecb1347bd0ce4fa77053ee1f2cfd55c1c11a5d4efca95df6e681fde"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("008f9554841547a1bd1884f47cb131d35e29c28841242e1eba092e26d8af260c278759ae3a4373bd6f28fd2d7978c2e54ea100fd25a12ed15a3991c42e5816a6"));
	let bytes = &[0x80, 0x40, 0xed, 0x6b, 0x3a, 0x99, 0x03, 0xb5, 0x81, 0xd4, 0xfc, 0xdb, 0x99, 0x1c, 0x05, 0x11, 0x38, 0x95, 0xf9, 0xad, 0xd4, 0x44, 0xe2, 0x89, 0x21, 0xc6, 0x65, 0x42, 0xc7, 0xae, 0xe4, 0x65, 0x23, 0xc6, 0x3d, 0xb8, 0x30, 0x9b, 0xe2, 0x4f, 0x6d, 0x46, 0x50, 0xa1, 0xcd, 0x84, 0x80, 0xfb, 0x0f, 0x40, 0x9d, 0xff, 0x2c, 0xaf, 0xe5, 0xf5, 0x90, 0xdf, 0xa2, 0xc6, 0x96, 0xff, 0x11, 0x8c, 0xee, 0x84, 0x72, 0x24, 0xb4, 0x2d, 0xfa, 0x2a, 0x7d, 0x7b, 0x91, 0xb3, 0xd2, 0xc4, 0xcc, 0x1d, 0x7c, 0x80, 0xa8, 0x0d, 0xdf, 0x7b, 0xdd, 0xa2, 0xa9, 0x68, 0x01, 0x03, 0xb1, 0x7d, 0xf0, 0xd8, 0x6b, 0x7a, 0xc7, 0x91, 0x1d, 0x0d, 0x52, 0xda, 0x7d, 0xee, 0x60, 0x9d, 0xc8, 0xfe, 0x17, 0x16, 0xc9, 0x18, 0x87, 0x81, 0xe9, 0x06, 0xe8, 0x10, 0xe3, 0xc2, 0xa8, 0xb8, 0x42, 0x65, 0x55, 0x4d, 0x59, 0xc9, 0x9b, 0x99, 0x03, 0xe2, 0xea, 0xdc, 0xcf, 0x63, 0x91, 0x8c, 0x32, 0x14, 0x94, 0xc0, 0x6b, 0x06, 0x46, 0x7e, 0x1b, 0xa9, 0xd6, 0x95, 0xc4, 0x15, 0xa6, 0x09, 0x13, 0x42, 0xd5, 0xfe, 0x86, 0x50, 0x2f, 0xd7, 0x88, 0x73, 0xfb, 0x38, 0x12, 0x24, 0x6b, 0xf9, 0xed, 0x7f, 0x5b, 0x40, 0x1d, 0x9f, 0xae, 0x78, 0x5b, 0x12, 0x17, 0x3e, 0x36, 0xb6, 0xc3, 0x48, 0xf7, 0x54, 0xcf, 0xbc, 0xd4, 0xde, 0x66, 0x15, 0xf6, 0x8e, 0xaa, 0xc2, 0x09, 0x37, 0xad, 0xba, 0xcf, 0x2f, 0x60, 0xd5, 0x8b, 0xec, 0xe8, 0x2b, 0x54, 0xe7, 0xd5, 0x9e, 0x06, 0xea, 0x16, 0x53, 0x4f, 0xe2, 0x34, 0x85, 0x8d, 0x10, 0x53, 0x70, 0x41, 0x90, 0x33, 0x1a, 0x1f, 0x1d, 0xe4, 0x4c, 0x20, 0x6b, 0x5d, 0xfa, 0x90, 0xed, 0x07, 0xfe, 0xab, 0x0f, 0x8d, 0xfb, 0xb1, 0x8c, 0xbb, 0x28, 0xa3, 0xca, 0x55, 0xf8, 0xcb, 0xba, 0xf9, 0x4d, 0xc9, 0x5b, 0x73, 0xf8, 0x4c, 0x57, 0x51, 0x20, 0x5a, 0x47, 0x2b, 0xd3, 0xe6, 0x58, 0x75, 0x31, 0x4f, 0x2a, 0x14, 0x2c, 0x8a, 0xa7, 0x5e, 0xc0, 0x4c, 0x18, 0xe5, 0xb1, 0x75, 0x42, 0x05, 0x73, 0xcb, 0x53, 0x66, 0x7e, 0xe8, 0xee, 0x7b, 0x08, 0xbf, 0x47, 0xa6, 0xdc, 0xba, 0x41, 0x3e, 0x60, 0xce, 0x78, 0x88, 0x2a, 0xd2, 0x0f, 0x06, 0xb2, 0x71, 0x06, 0x7c, 0x9f, 0xb6, 0x4e, 0x2c, 0x18, 0x21, 0x41, 0xa7, 0x30, 0x1a, 0xd8, 0xc8, 0xbb, 0x3a, 0x71, 0xc7, 0x30, 0x64, 0x9f, 0xd2, 0xfa, 0xcf, 0x58, 0xa4, 0x5b, 0xe9, 0x2b, 0xdd, 0x13, 0x35, 0x84, 0x7f, 0xdd, 0x6b, 0xd0, 0xd1, 0xe5, 0x54, 0x39, 0xcb, 0x1b, 0xf7, 0x13, 0xc4, 0xb8, 0xbb, 0x31, 0xdc, 0x13, 0x88, 0xd3, 0x78, 0x1e, 0xc7, 0x7d, 0xcc, 0xd4, 0xe4, 0x91, 0xdd, 0xa5, 0xb0, 0x11, 0x82, 0xc3, 0xa2, 0x3f, 0xc7, 0x2b, 0x1c, 0xfb, 0xd5, 0xca, 0x40, 0x0e, 0x16, 0x4f, 0xa8, 0xc5, 0x1c, 0xae, 0x99, 0x57, 0x7f, 0xfd, 0xf3, 0x2d, 0x5c, 0xcc, 0x80, 0x4b, 0x9b, 0x94, 0x7e, 0xa9, 0x0e];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("3faf033b1b22daa0b9375f04da05c9600df1425f5a7de884f81ecfe0"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("28ef5b527e07640d2359e2357f315dda138d2422fb8d4bf712954d72662c6565"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("eea693283787401fd06fb28593d024cca4668090ec062edf154936f60f6f09232f00acd5b08f7c48f564cf0141ca6437"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("0a62fff8de2c7b0eafd12a96edca25afb9725e9aef38fc490b0a263beb74e53fd66e55b510cfb1959a6a30c1f51db07fd4f0dc1a37e0c2e6fe5965ecc65d7b23"));
	let bytes = &[0xdd, 0xd1, 0xd5, 0x99, 0x6f, 0x6f, 0x1b, 0x27, 0x17, 0xe3, 0x94, 0x71, 0x4d, 0x3f, 0x85, 0x64, 0xc7, 0xc6, 0x6d, 0xcf, 0x23, 0x51, 0xd6, 0x8f, 0x16, 0xac, 0x01, 0x26, 0x7e, 0x2a, 0x41, 0x87, 0x84, 0x2a, 0xad, 0x9d, 0x68, 0xec, 0xdb, 0xa3, 0x66, 0x23, 0x86, 0xf0, 0xad, 0xfb, 0xb5, 0xa0, 0x00, 0xd9, 0x27, 0x61, 0x03, 0x78, 0xbf, 0x89, 0xa0, 0xf1, 0x18, 0x69, 0xb4, 0x5f, 0x92, 0x78, 0xb6, 0xc8, 0x46, 0x57, 0xe8, 0x4a, 0xbe, 0x58, 0x9f, 0xe9, 0xbe, 0x31, 0xd7, 0x13, 0x34, 0x98, 0x2d, 0x39, 0xe7, 0xd5, 0x78, 0x23, 0xb2, 0x4a, 0xbd, 0xa6, 0x60, 0xc1, 0x2f, 0x68, 0x9b, 0x22, 0xa3, 0x6a, 0x65, 0x18, 0x6e, 0xda, 0x4d, 0x78, 0xd8, 0x91, 0x84, 0x19, 0x3d, 0x76, 0xa2, 0x3a, 0xcb, 0x52, 0xcc, 0x7a, 0x42, 0x23, 0xc6, 0x7f, 0xb9, 0xc5, 0xb7, 0x2c, 0xf5, 0xc6, 0xbc, 0xd6, 0xc4, 0xe9, 0xa0, 0x90, 0x75, 0x89, 0x15, 0x49, 0x3e, 0xd9, 0x4d, 0x93, 0x7e, 0xbe, 0x7a, 0x1a, 0x99, 0x9d, 0xf6, 0x36, 0xd5, 0x54, 0x03, 0x89, 0x47, 0x1d, 0x65, 0x1f, 0x5b, 0xf1, 0x06, 0xc3, 0x4d, 0x4c, 0x58, 0x1e, 0x2a, 0xc1, 0xcb, 0x2c, 0xb3, 0xe8, 0xf0, 0xc3, 0xbc, 0x9c, 0x19, 0x5f, 0xae, 0x12, 0xdd, 0xc6, 0x90, 0x97, 0x07, 0x5d, 0xec, 0x12, 0xef, 0x5b, 0x26, 0x38, 0x1b, 0x48, 0x64, 0xb7, 0xcc, 0x36, 0xc6, 0x8a, 0x29, 0x88, 0x37, 0x4e, 0x73, 0xf8, 0x9e, 0x65, 0xbd, 0x26, 0xe7, 0x8f, 0x7b, 0x7f, 0xd0, 0x60, 0x14, 0x3a, 0x5e, 0x38, 0x53, 0x3f, 0xe7, 0x14, 0xec, 0x1d, 0x9f, 0x73, 0x9b, 0x3e, 0x72, 0x5d, 0x90, 0x65, 0xe6, 0x0d, 0x3e, 0x04, 0xfc, 0xb6, 0x35, 0x18, 0xd4, 0x60, 0xe9, 0x2c, 0xbd, 0x82, 0xe0, 0xb6, 0x5b, 0x09, 0xc2, 0x0e, 0xbf, 0x91, 0x60, 0xa3, 0x7f, 0x30, 0x0c, 0x57, 0x1e, 0xc8, 0xd4, 0x3a, 0x1d, 0x9c, 0xec, 0x90, 0xce, 0x6d, 0x26, 0x15, 0xd9, 0xae, 0x9a, 0x22, 0x61, 0x40, 0x8c, 0x9a, 0x52, 0x33, 0x9f, 0xc5, 0x4c, 0x33, 0x26, 0xc6, 0xdd, 0x88, 0x21, 0x92, 0xfa, 0xb6, 0x3e, 0xd7, 0xaf, 0x01, 0x18, 0x49, 0xc9, 0xfe, 0xda, 0x4d, 0xd3, 0xee, 0x44, 0xa2, 0x56, 0xec, 0x4d, 0x1f, 0xcf, 0xfb, 0x2f, 0xcb, 0x35, 0xb5, 0x00, 0xd9, 0x66, 0xb6, 0x6f, 0x88, 0x64, 0xbb, 0x6e, 0xec, 0x85, 0xff, 0x85, 0xda, 0x19, 0xe1, 0x12, 0xc6, 0xa7, 0x31, 0xc9, 0xc6, 0x7e, 0x6d, 0xe0, 0x87, 0x55, 0x56, 0xb3, 0xe1, 0xf4, 0x99, 0xa7, 0xbb, 0x98, 0x08, 0x31, 0x28, 0xe2, 0xb8, 0x0d, 0x5e, 0x64, 0x22, 0x86, 0x0b, 0x17, 0x11, 0x10, 0x7e, 0xc3, 0x72, 0x8b, 0x38, 0x1c, 0x85, 0x02, 0xc8, 0xdf, 0x85, 0xe8, 0xc9, 0x70, 0xcd, 0x19, 0x86, 0xe8, 0x11, 0x2c, 0x69, 0x2e, 0x5b, 0x5e, 0xae, 0x8d, 0xf3, 0x81, 0xbe, 0x9e, 0x39, 0xeb, 0xaa, 0x1d, 0xa5, 0x3e, 0xcb, 0xf5, 0xc5, 0x8d, 0x60, 0xee, 0x76, 0x2a, 0xe0, 0x42, 0xbb, 0xcf, 0x3d];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("035d402d1e8a19421b03a9f55aaf02095df2b808bc802aab939563a8"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("60c21aeba2685d6398e770e9fdff6c2db0aa13ac90493580e860bc4a706f42c2"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("aa9894fc5a0ebfb22678b3ff9d72f22fa1270ed4cf1a2528d98259f450790df449b047f57e1121900d50b9933daa5ce7"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("e71d6b51570c3ec5163e4068e17085b91bc8da2d9b73f5cba72dada60cd71b2ab2bdef68a2392888fc88563b6d659f1e1b43ef867feec8479b93f9d7717dd161"));
	let bytes = &[0x19, 0xe4, 0x86, 0x12, 0x26, 0xb8, 0xd2, 0x54, 0xa5, 0x69, 0x8f, 0xb7, 0xc5, 0x08, 0x1f, 0x2c, 0x2b, 0x5b, 0xdb, 0x00, 0x92, 0x82, 0x9e, 0x07, 0x3b, 0xeb, 0xbf, 0x4f, 0x35, 0xfa, 0xf2, 0xe2, 0xc8, 0x84, 0x2d, 0x25, 0xa0, 0x0c, 0xf4, 0xde, 0xbc, 0xb0, 0x04, 0x4c, 0xf5, 0x06, 0xf3, 0x61, 0x89, 0xc1, 0x2f, 0x4d, 0x7b, 0x02, 0x4a, 0x5d, 0x5a, 0xa2, 0xf9, 0x64, 0x81, 0xa1, 0x4c, 0xc3, 0xd3, 0xb9, 0x04, 0xb0, 0x5c, 0x42, 0x36, 0xd1, 0x62, 0x88, 0x1c, 0xe8, 0x5a, 0xf9, 0xc3, 0x1b, 0x71, 0xf5, 0x83, 0x05, 0x77, 0x99, 0x8f, 0x7c, 0x94, 0x69, 0x7f, 0x29, 0x45, 0xcc, 0x44, 0xe5, 0x77, 0x9a, 0xaa, 0xc4, 0xe4, 0x4f, 0xce, 0x3e, 0xde, 0xcb, 0x4f, 0x92, 0x43, 0x79, 0xfc, 0x2f, 0xb9, 0x54, 0x33, 0xb1, 0xcc, 0xc6, 0x81, 0x74, 0x8a, 0x2f, 0x05, 0x99, 0x46, 0x96, 0xd2, 0x70, 0xe1, 0x43, 0xc5, 0x6a, 0x5e, 0xaa, 0x57, 0xf1, 0xdc, 0x27, 0x20, 0xe6, 0xb2, 0xf1, 0xcc, 0x8c, 0x31, 0xb8, 0x4c, 0x48, 0x2c, 0xde, 0x25, 0x7c, 0x5c, 0x7f, 0xca, 0x23, 0xdd, 0x0d, 0x07, 0x93, 0x4a, 0x71, 0xa9, 0x76, 0xd2, 0xdf, 0x9e, 0x57, 0x17, 0x48, 0x69, 0x22, 0xea, 0x37, 0x99, 0x20, 0xa6, 0xfe, 0x20, 0x94, 0x66, 0x5f, 0x3c, 0x07, 0x01, 0x7f, 0xb5, 0xe7, 0xb7, 0xb7, 0xb3, 0xca, 0x08, 0xe3, 0xf8, 0x92, 0x7b, 0x0f, 0x23, 0xae, 0x41, 0xf0, 0xd8, 0x5e, 0x74, 0x8a, 0x51, 0xcf, 0x3f, 0xba, 0x2b, 0x33, 0x29, 0xa6, 0x38, 0xc3, 0xd1, 0x5d, 0xe3, 0x51, 0xe7, 0x56, 0xc5, 0xda, 0xd7, 0xdb, 0xc5, 0x9f, 0xda, 0x71, 0x08, 0x1c, 0x01, 0xc4, 0xda, 0xe0, 0x97, 0x03, 0xe0, 0x47, 0xfc, 0x61, 0x12, 0xcd, 0x0f, 0x8b, 0xbf, 0x73, 0x3a, 0xbf, 0x14, 0x15, 0x4f, 0xb9, 0xb7, 0xc0, 0xf9, 0xc7, 0xfd, 0x5b, 0xfd, 0xe9, 0x03, 0xae, 0x3d, 0xd5, 0x8b, 0x99, 0xf6, 0xdc, 0x2e, 0x63, 0xba, 0xee, 0xcd, 0x0c, 0xf7, 0x19, 0xa4, 0xa0, 0x9a, 0xf3, 0x81, 0x7a, 0x68, 0x9d, 0xa7, 0x7c, 0xd8, 0x5d, 0x96, 0x2f, 0x87, 0x74, 0xa5, 0x73, 0x17, 0x6e, 0xe9, 0x6b, 0xe4, 0x33, 0x8a, 0xb8, 0xdf, 0xf3, 0x7e, 0xf9, 0x7d, 0xd0, 0xa3, 0x07, 0x11, 0xef, 0x0f, 0xb2, 0x27, 0xbe, 0xb2, 0x8b, 0x73, 0x67, 0x6a, 0x0a, 0x7a, 0x32, 0x17, 0xa7, 0x1a, 0xf0, 0x8a, 0xe1, 0x76, 0xdd, 0xea, 0xd2, 0x11, 0xec, 0x56, 0xf2, 0x5f, 0x7f, 0xc6, 0x9e, 0xee, 0x95, 0x88, 0xf3, 0xcc, 0x94, 0x42, 0x7d, 0x60, 0x0a, 0x07, 0x34, 0x16, 0x85, 0x27, 0x75, 0xf4, 0xa6, 0x62, 0xe8, 0x46, 0x70, 0x8e, 0xf1, 0x5a, 0x52, 0xa7, 0x9b, 0x3b, 0x9c, 0x37, 0x51, 0xef, 0xff, 0x8f, 0x8d, 0x81, 0x9e, 0x35, 0x6d, 0x01, 0x2c, 0xe2, 0x9a, 0xd6, 0xd0, 0xf7, 0xdb, 0x49, 0xce, 0xfb, 0x4c, 0xb0, 0xed, 0xe5, 0xab, 0xb4, 0xe0, 0x5b, 0x36, 0x9a, 0x2b, 0xd9, 0xf4, 0xf8, 0xe3, 0x5c, 0xbe, 0xa3, 0xdb, 0x7d, 0x89, 0x85];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("2de008375167c4a757d930480c240109dce5500211c89c2427735965"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("13a207c307b18e5521d6dd99c51ccd97549020d7a162c0c023edb8e277720698"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("fd1c1d84a9187ae15329d4587ec9e7b680004039b72f443b736c14123865948131fb01a914233e2e3dae44c243937ada"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("8520d7547a828a03a72e30dd471b421577523c64559f2d8c1ea6627c07fa73901673e7fe7dbd4c92f75ecece1248c2b203909af43a6d1d95bd94a494b5cc0a03"));
	let bytes = &[0x3e, 0x28, 0x63, 0x24, 0x4f, 0xba, 0x37, 0x2e, 0x20, 0x11, 0x4e, 0x08, 0xca, 0xaa, 0x77, 0x16, 0x1a, 0xcc, 0x83, 0x76, 0x2e, 0x03, 0x3b, 0x5c, 0xc5, 0xca, 0xd0, 0xd4, 0xc7, 0xd3, 0xdf, 0x9d, 0x35, 0x59, 0x4e, 0xe7, 0x92, 0xa9, 0xa6, 0x69, 0xc7, 0x65, 0xf6, 0x35, 0x47, 0x04, 0x90, 0x0d, 0x9f, 0x21, 0xae, 0x25, 0xe9, 0xc4, 0xab, 0x23, 0xb9, 0xa4, 0x30, 0xd9, 0x14, 0x95, 0xfc, 0x37, 0x94, 0x2f, 0x6c, 0x3c, 0x96, 0x29, 0x56, 0x1e, 0x00, 0xdb, 0x40, 0xdb, 0x11, 0xa8, 0x93, 0xc7, 0x70, 0x22, 0x5f, 0x89, 0xc0, 0x14, 0x01, 0x79, 0xaa, 0xa0, 0x03, 0x49, 0xb9, 0x38, 0x01, 0x39, 0xae, 0xc1, 0xd1, 0x4b, 0x18, 0x8b, 0x8d, 0x57, 0xa2, 0x3e, 0xd1, 0xf3, 0xaf, 0xc8, 0xfd, 0xa2, 0x1b, 0x3e, 0x7c, 0x16, 0x0e, 0x78, 0x93, 0x96, 0xb9, 0xfe, 0xa6, 0x9c, 0x49, 0x26, 0xf9, 0x57, 0x5c, 0x99, 0x4d, 0x23, 0xfc, 0x84, 0xf5, 0x0f, 0xaa, 0xb8, 0xf5, 0x0f, 0xeb, 0x18, 0xa2, 0x9b, 0x78, 0x7f, 0x13, 0x03, 0xfb, 0xa0, 0x76, 0x7e, 0x41, 0x27, 0x0a, 0x84, 0x20, 0xbd, 0x6a, 0xcf, 0x98, 0x22, 0x03, 0x87, 0x47, 0x5d, 0x70, 0x91, 0xaa, 0x53, 0xcd, 0x33, 0x5b, 0xe8, 0xdf, 0x5d, 0x0b, 0x55, 0xcc, 0x65, 0xe2, 0xd8, 0xf2, 0x72, 0xf9, 0x57, 0xfd, 0xa7, 0x1d, 0x10, 0xb7, 0x1f, 0x97, 0x8d, 0xff, 0x78, 0xd6, 0x92, 0x7b, 0xd7, 0x85, 0x6a, 0x2b, 0x57, 0x19, 0xb4, 0xe6, 0x37, 0x72, 0xbe, 0xa2, 0xa9, 0xeb, 0xe6, 0x69, 0xb4, 0x61, 0x78, 0xf5, 0x5e, 0x8b, 0xfd, 0x30, 0x88, 0x03, 0x19, 0xfc, 0xad, 0x21, 0xd4, 0xf2, 0xcc, 0x87, 0x36, 0x13, 0xaf, 0x9f, 0x14, 0x24, 0x33, 0x2e, 0xe3, 0x29, 0xcb, 0x5e, 0xa3, 0x8e, 0x11, 0x65, 0x2f, 0x6a, 0x52, 0x53, 0x0a, 0x4d, 0x67, 0x03, 0x0f, 0xda, 0x3d, 0xe5, 0x3a, 0x9a, 0xe4, 0x0d, 0x76, 0x57, 0x2a, 0x93, 0x7d, 0x8e, 0xcb, 0x35, 0xb9, 0xec, 0xc4, 0x03, 0x5f, 0xb6, 0xe9, 0x2b, 0x27, 0x8e, 0xed, 0x62, 0x34, 0x3d, 0x11, 0xe4, 0xbf, 0x54, 0x99, 0x70, 0x58, 0x65, 0x21, 0x9d, 0xd6, 0xda, 0xe5, 0x9e, 0xaf, 0x68, 0xd7, 0xc7, 0xcc, 0x75, 0x80, 0x33, 0x35, 0xdb, 0x9e, 0x46, 0x55, 0xd7, 0x5a, 0x33, 0x09, 0xd1, 0xea, 0x26, 0x61, 0x36, 0xeb, 0xa4, 0x07, 0x12, 0x62, 0x75, 0xbf, 0x90, 0xa2, 0x2f, 0x22, 0x30, 0xd5, 0x3e, 0xa9, 0x2e, 0xbd, 0x8c, 0x69, 0x2f, 0xd3, 0xdf, 0x0d, 0x6f, 0x4f, 0xe6, 0x3b, 0x2e, 0x07, 0x31, 0x94, 0x0e, 0x93, 0x54, 0xfd, 0x51, 0x4d, 0xeb, 0x64, 0x4d, 0x6a, 0x79, 0xfb, 0x98, 0xe8, 0x08, 0xbc, 0x1f, 0xf0, 0x6a, 0x9b, 0xf4, 0xfe, 0x12, 0x3c, 0x0d, 0x09, 0xc5, 0x06, 0x22, 0x02, 0x15, 0xec, 0x24, 0xbc, 0x3d, 0x35, 0xe5, 0x63, 0xa3, 0xa9, 0x25, 0xdf, 0xc1, 0xaa, 0x9e, 0xfb, 0x9c, 0x17, 0x82, 0x12, 0xaf, 0x1b, 0x78, 0x01, 0x51, 0x00, 0x93, 0x61, 0xfb, 0x32, 0xee, 0x97, 0x6a, 0x85];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("bbe38f1f7a173bdfb1689f96951ff77a5d123a43304bfc1db3dbe102"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("9ecfa9ba23c7541461693315a57c075b87789823404882a2bfe9d9c784e64f99"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("64d8312e4bc49726f3d270081300a947cb147f8589ce201edb9717174357a92b301928583190634ba88b82621fed1378"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("19822db1652115a6edc0550363fbfc3e4985f78a6dd04bd01e4c25171b85d6a921e1fc8335ac09114adb00823d0c7ece599da75ceb15af7fe54cc49b93d397eb"));
	let bytes = &[0x46, 0xfb, 0x6f, 0x81, 0xb8, 0x22, 0x91, 0x49, 0x5c, 0x94, 0xed, 0xa3, 0xb0, 0x7d, 0x7c, 0x29, 0x17, 0xed, 0xf0, 0x18, 0x60, 0x0a, 0x02, 0x61, 0x6f, 0xa7, 0x4d, 0x5c, 0x10, 0x59, 0xc1, 0x3e, 0xbb, 0xe0, 0x67, 0x1b, 0x92, 0xea, 0x8e, 0xdb, 0xd5, 0xf7, 0x81, 0x46, 0x52, 0x86, 0x24, 0xeb, 0xc6, 0xa0, 0x2a, 0x94, 0xb4, 0xaf, 0x00, 0x53, 0xc2, 0xb2, 0x42, 0x43, 0xe3, 0xdd, 0xdd, 0x5c, 0x94, 0xea, 0xba, 0xb6, 0xa1, 0x7d, 0xb6, 0x33, 0xfe, 0x45, 0xa0, 0x63, 0xe5, 0x0c, 0x51, 0xfb, 0xd1, 0xbb, 0x2e, 0xdd, 0xaa, 0x83, 0x36, 0xa7, 0xa6, 0x6c, 0x1d, 0x09, 0x74, 0x0a, 0xc2, 0x19, 0x94, 0x09, 0x5b, 0x4f, 0xa6, 0x35, 0xe2, 0x83, 0x5b, 0xb7, 0x9c, 0xf1, 0x65, 0x36, 0xfc, 0x58, 0x5c, 0xf9, 0x8f, 0x1f, 0x2d, 0x7e, 0xa0, 0x18, 0x41, 0x30, 0x49, 0x69, 0x12, 0x91, 0x1b, 0x33, 0xef, 0x6a, 0xf2, 0xe2, 0x0a, 0xaa];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("e1663b06759745cfff802609b30955c3f0a1fb6c1e6ebacb84b3ee9f"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("a61947f2df5ea158b25cdab491e087103c6fe99d22c0ccdc41a60cde148c9f72"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("bff82f9b7aa36de7ac6598eac97b0bba2a6f5722c101ef8d2e43d6aa8a386d7fc5cdbbffeb7cd1b8fbb466d1251b8a11"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("e6cda7f975b6f888a273e280ef84b478110739e62883812c8dcab88cb8d3b4563b7f21556ef27a6021acc00b1deb1123b1b9fd0da2b798ba68111d48395a911f"));
	let bytes = &[0x7e, 0x76, 0xee, 0xa5, 0x36, 0x62, 0x64, 0x8d, 0x56, 0x68, 0xaa, 0x4c, 0x23, 0x1b, 0x5a, 0x0b, 0xf2, 0x15, 0xc8, 0xb6, 0xf8, 0xfa, 0xce, 0xea, 0xca, 0xd7, 0x81, 0x37, 0xe6, 0x50, 0x4b, 0xa4, 0xc0, 0x12, 0x0f, 0xa1, 0x66, 0x24, 0x12, 0x68, 0x9f, 0x8d, 0x13, 0xe5, 0x0d, 0xba, 0x76, 0x6c, 0xe9, 0x2a, 0xb0, 0xa5, 0x3e, 0x03, 0x2a, 0xf6, 0x6b, 0x08, 0x6d, 0x73, 0x04, 0x37, 0x96, 0x5d, 0x02, 0x1f, 0x02, 0x9e, 0xa1, 0xfd, 0x9c, 0x1b, 0x51, 0x1c, 0xba, 0x64, 0x02, 0x73, 0x56, 0x49, 0x8f, 0x3a, 0xb0, 0xbd, 0x30, 0x8d, 0x6f, 0x38, 0xc8, 0x11, 0x2c, 0x10, 0x7a, 0x5b, 0xfd, 0xab, 0x23, 0x29, 0xc6, 0x8c, 0x4c, 0xfe, 0x4d, 0x2f, 0x54, 0xd1, 0xfd, 0xe8, 0xd2, 0xd9, 0x32, 0xc4, 0xef, 0xbb, 0x57, 0x9c, 0x29, 0xd1, 0xbf, 0x3c, 0xa6, 0x90, 0x2f, 0x88, 0x52, 0x49, 0x67, 0xc6, 0x30, 0x96, 0xce, 0xb1, 0x22, 0x67, 0xb3];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("6ec59c6a5ee69e81e32c8165f14b92aa2047976cefd05beaaa6e93ba"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("885e4e65559fda793f55bdaa26688235f43253087813776e266434e55fd23630"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("4760276ed1a9c063a22b292ff8948992b40cdd053b4fb2c39acebc7ba7cdeefbff8d16d0f754defc7acbc947b15ecdf3"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("af73afde895a96fdbf16c31651bc548238b2a3367570e76a4303f537eb9ca571b30a24572604d2f845c1e4973c8bb8d74ef59cea2b09fc4b89056f43cfe57ebb"));
	let bytes = &[0xd8, 0xfa, 0xb2, 0x07, 0x7b, 0xf9, 0xf4, 0xbe, 0x6b, 0xf9, 0x5d, 0x82, 0x96, 0xef, 0x26, 0x1f, 0x6f, 0xbd, 0x21, 0xce, 0x04, 0xc2, 0x44, 0x57, 0x43, 0x15, 0x17, 0x8d, 0xaf, 0x65, 0xc4, 0xd1, 0xb8, 0x50, 0x2a, 0xba, 0x6b, 0x3b, 0x26, 0x24, 0x6e, 0x6e, 0x8f, 0x64, 0x4f, 0x72, 0x43, 0x1e, 0xc6, 0xb1, 0x65, 0x46, 0xc0, 0xb5, 0x72, 0xea, 0x04, 0xe0, 0xaf, 0xfa, 0x83, 0x91, 0x1a, 0xcf, 0xf3, 0x9b, 0xa3, 0x89, 0x2a, 0x8a, 0x52, 0xc4, 0x27, 0x17, 0x57, 0x64, 0x2f, 0xe3, 0x28, 0xa7, 0x2d, 0xbe, 0x0d, 0x33, 0x50, 0x5d, 0xe4, 0x3f, 0xde, 0x6d, 0xdf, 0xb7, 0x50, 0xab, 0x20, 0xbc, 0x5a, 0xb7, 0xda, 0xa6, 0x6c, 0x9c, 0x54, 0xca, 0x5f, 0x04, 0xc7, 0xb0, 0x88, 0x47, 0xef, 0xca, 0x4f, 0x3d, 0x80, 0x1d, 0xea, 0x7e, 0x36, 0xed, 0x79, 0x26, 0x58, 0x3d, 0xc5, 0xec, 0x62, 0x8f, 0xe3, 0x95, 0x3c, 0xab, 0x11, 0x83, 0x13, 0x6c];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("81ee1c0fa280fc554ff8da78220d93b45321b766f6a0a093ede6b8e1"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("e2995fee45b0fa3b381c55a4368b0a0a114a5a60b4833849d0e853fc114238e6"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("9b5d52e9eec5a4b78fc7652af1a73f7e67bb54cbbd4ebd1d2ddc1e2102b9fd30a32819d72843fcb29efc54a6080922bc"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("6ad51ae7fa8de97528ff4f5919e80c4a9c115770d5a3cec6878728e38d6dc87e0731eb56c845debe25633fcb0fc9b49c1a42339910bbe525e138839ed1fca020"));
	let bytes = &[0x1b, 0x6b, 0xbb, 0x06, 0x79, 0x65, 0xf9, 0x64, 0x60, 0x95, 0x6c, 0x4f, 0xb6, 0xe4, 0x77, 0x06, 0xb8, 0x27, 0x9f, 0x1e, 0xec, 0x10, 0x3d, 0xcc, 0x8e, 0x18, 0xd7, 0x75, 0x28, 0xc1, 0xf4, 0x76, 0xc0, 0x2f, 0xb9, 0xac, 0xba, 0x13, 0x12, 0xdd, 0xb4, 0x05, 0xb0, 0x6a, 0xac, 0x8c, 0x46, 0x29, 0x01, 0x41, 0x54, 0xcd, 0x87, 0xdc, 0x59, 0x10, 0x7e, 0x6d, 0x37, 0xa7, 0xe5, 0xf2, 0x7c, 0xec, 0x4f, 0x61, 0xe6, 0x71, 0xc8, 0x79, 0xb3, 0xe6, 0x04, 0xdf, 0xe2, 0xa7, 0x52, 0xbf, 0x59, 0xc6, 0xba, 0x0c, 0x32, 0x24, 0xe8, 0x32, 0x50, 0x5c, 0x93, 0xcb, 0xa7, 0x9d, 0x2c, 0x9c, 0x87, 0xdf, 0xbf, 0x4d, 0xd3, 0x2e, 0x44, 0x92, 0xa6, 0x5f, 0xc2, 0xc1, 0x49, 0x03, 0xb8, 0xcc, 0xab, 0x57, 0x9f, 0xd9, 0x5f, 0xcc, 0x4e, 0x96, 0x47, 0x24, 0x4e, 0x47, 0xfc, 0x49, 0x6b, 0x9d, 0x78, 0x26, 0x0a, 0x83, 0x51, 0x74, 0x93, 0x78, 0x48, 0x60, 0x73];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("374499bd2d93e77b7ff805052912635df92baddc6a3c5d70674031d4"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("001fe06c47bf958947b2ebf4416e42735e56f512ede6fa541512883c9756114e"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("24b893c2eef76b8a740a5bcc4b5d0b0cb3edcad905d61b2be545e7c4ec8a7db90d8428d8eef50de35074c318dc77ba6f"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("4039dc92fdf3c314765bcd24e0942a7113012a32edcb2a78dbd31ba2ee2fc769794f008b08048123a360f929c1c347e282646eb9cfeb5e572dca2c341249d991"));
	let bytes = &[0x12, 0x19, 0x4d, 0x37, 0x92, 0x01, 0x01, 0xe9, 0xd3, 0x8f, 0x7d, 0x6c, 0x63, 0x02, 0x8f, 0x4c, 0x41, 0x22, 0x7a, 0x0a, 0xe6, 0xff, 0x45, 0x51, 0x40, 0xf2, 0x7c, 0x3f, 0x77, 0xa7, 0xc6, 0x69, 0xec, 0xb6, 0xf6, 0xe1, 0xc7, 0x7a, 0xa3, 0x12, 0x4d, 0x21, 0xb0, 0x7d, 0x15, 0xeb, 0xd6, 0xea, 0x46, 0xe7, 0xe7, 0xaa, 0xe6, 0x0c, 0xd0, 0xee, 0x99, 0xd8, 0xbf, 0x37, 0x01, 0x4c, 0x40, 0x4c, 0x84, 0x26, 0xba, 0x64, 0x5e, 0x81, 0xb9, 0xc5, 0xf9, 0xd5, 0x9c, 0x40, 0x64, 0x21, 0x5d, 0xb4, 0xcc, 0x04, 0x1c, 0x3c, 0x59, 0x4e, 0x8c, 0x63, 0x01, 0x4f, 0x62, 0x35, 0x67, 0xee, 0x54, 0xb8, 0xd3, 0xbb, 0xaa, 0x01, 0x1a, 0x35, 0xfe, 0x33, 0x1d, 0x9d, 0xc3, 0x61, 0x3d, 0x3b, 0x44, 0x19, 0x75, 0x9a, 0x71, 0x20, 0xec, 0x08, 0x3f, 0xa4, 0xcb, 0x55, 0x88, 0xe4, 0x0f, 0x84, 0x6f, 0x5a, 0xc7, 0x65, 0x30, 0xb3, 0x00, 0x1b, 0x1c, 0x13, 0x7a, 0x1a];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("7dcf6360f9d6801b2464dc04c5edebc10f2b49c7d312b425755c3939"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("d047a946267b7305b4791169760f72b015b7cf2fa13a71b265cae1cf860e83fb"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("37a8728b0e92e02c50ddca4640f6f42fd3b484240c4373c4d011cb10ccfea662a0f7c478c65cf8bcb344777a8b9471f9"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("1898266e0be14531e1b692092a1b04fbede36a5651757d3b92929fa56946f1c7097c9efe0e18f427de19d93755a9943e5aed0558874167302f922e2d5e010382"));
	let bytes = &[0x24, 0xab, 0x72, 0x72, 0x6c, 0x5b, 0xa6, 0xfc, 0x7a, 0x36, 0x4d, 0x65, 0x81, 0xcf, 0xe2, 0xd8, 0x1e, 0xa5, 0x60, 0x4c, 0x1b, 0x51, 0x5f, 0x89, 0xf4, 0xb8, 0xff, 0xb0, 0x9e, 0x8f, 0x39, 0xbb, 0x17, 0x9d, 0x86, 0x3c, 0xc6, 0x16, 0x5a, 0xf8, 0x80, 0x11, 0x24, 0xcb, 0x23, 0xd9, 0xa1, 0x20, 0x4f, 0x86, 0xcd, 0xd0, 0x3a, 0x2d, 0x68, 0x2b, 0xbb, 0x54, 0xeb, 0xc0, 0x3d, 0x9d, 0x7c, 0xde, 0x1e, 0x09, 0x19, 0xb8, 0x84, 0xb5, 0x04, 0x0d, 0x69, 0x5a, 0x8f, 0xe9, 0x68, 0xb8, 0x2e, 0x25, 0xbb, 0x1a, 0x20, 0x39, 0x45, 0x9b, 0x0d, 0x08, 0xa0, 0xe7, 0x7c, 0x32, 0x4f, 0x55, 0x50, 0xec, 0x4e, 0x88, 0xf9, 0x3b, 0x3f, 0x0a, 0x18, 0x51, 0x5c, 0xaa, 0x39, 0xee, 0x58, 0x97, 0x1a, 0x46, 0x49, 0x9d, 0xc8, 0xed, 0xc5, 0xbc, 0xfb, 0x2d, 0xcf, 0x44, 0x3b, 0x52, 0x28, 0x37, 0xcb, 0x30, 0xc9, 0x76, 0x8e, 0x54, 0xe3, 0x64, 0x13, 0x06, 0x8b, 0x7c, 0xba, 0x7d, 0xef, 0xf5, 0x8f, 0x55, 0x19, 0xef, 0xa3, 0x1b, 0x4e, 0x66, 0x91, 0xd6, 0xdb, 0xc0, 0x03, 0xb4, 0x0c, 0x02, 0x4b, 0x39, 0x5e, 0x7d, 0xad, 0x45, 0x24, 0xdb, 0x7b, 0x22, 0x69, 0xc2, 0x7c, 0x96, 0xbd, 0x88, 0x42, 0xfd, 0x9e, 0xc3, 0x46, 0x7c, 0xe3, 0xb3, 0xaa, 0x2a, 0x2d, 0xff, 0xef, 0x13, 0x01, 0xa1, 0xfb, 0xa7, 0x62, 0x9b, 0xc6, 0xda, 0x34, 0xee, 0x06, 0x03, 0x9f, 0x60, 0x35, 0x82, 0xad, 0xd8, 0x9f, 0xdb, 0xab, 0x99, 0x15, 0x7a, 0x5e, 0x17, 0x78, 0xfd, 0xae, 0x02, 0x2f, 0x2b, 0x5d, 0x37, 0x53, 0x1b, 0xf8, 0xf7, 0xee, 0xdf, 0x65, 0xda, 0xce, 0xb3, 0xa1, 0x85, 0x43, 0x2b, 0xa3, 0x72, 0x6a, 0x22, 0xc1, 0x87, 0xb3, 0x39, 0x91, 0x71, 0x2c, 0x40, 0xeb, 0xed, 0x46, 0x4a, 0xc7, 0x94, 0x9e, 0xe2, 0xca, 0xd1, 0xd8, 0xcd, 0xa0, 0x37, 0x96, 0x14, 0xbf, 0x92, 0x45, 0xc1, 0xd2, 0x9f];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("aa31463fffe79f0b0fb51a05dbdb3828a8b0d4e5d76babe2deb939cd"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("2ef52c52592227d1cf33932527254ffac528dc983c94905ca6cb4e7e96b97bb5"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("7b2f9827e2feac9e3bc8fdd8d69fa15965186d4000fecb441d42d5f0cffd40b31392cef5754cad36d7ac8b305eb9a261"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("5e4c42c223357d840067e12400dd41183722de1b2c3d925d6969c1512a73507c8410d4dd63b134e42ef7efa2d3ce27ebf52083780978f429a336791a301f1d15"));
	let bytes = &[0xad, 0xa0, 0xdb, 0x43, 0xc1, 0x5b, 0xef, 0xcc, 0x23, 0x41, 0xa2, 0x85, 0x9c, 0xc3, 0x38, 0xa4, 0x2b, 0xa8, 0x18, 0x5e, 0x0d, 0xf6, 0xd5, 0x8b, 0x68, 0x18, 0x78, 0xc5, 0x75, 0x45, 0x50, 0xf9, 0x05, 0xfa, 0x71, 0xa8, 0x8e, 0xb3, 0x30, 0x41, 0x6e, 0xab, 0x2d, 0xbe, 0x2b, 0x96, 0x4b, 0x5c, 0x15, 0xdb, 0x6c, 0x5e, 0x51, 0xc1, 0xdf, 0x01, 0x04, 0x81, 0xd7, 0x9f, 0x98, 0xf4, 0x87, 0x1a, 0xa3, 0x88, 0xd4, 0x17, 0x8e, 0xa9, 0x83, 0x17, 0x8c, 0x44, 0xed, 0x3a, 0xa4, 0x09, 0x6d, 0xad, 0x3a, 0x54, 0x3a, 0x19, 0xae, 0xc6, 0x52, 0x37, 0xe2, 0x96, 0x90, 0x2e, 0x85, 0xc0, 0xc7, 0x8c, 0xd7, 0xd8, 0x44, 0xa6, 0xc4, 0x34, 0xec, 0x37, 0xef, 0xf2, 0xdd, 0x7c, 0xd0, 0x4b, 0xce, 0x3e, 0xab, 0x09, 0x18, 0x62, 0xb5, 0xe2, 0x85, 0xc0, 0xaf, 0x0f, 0x03, 0x4c, 0x92, 0x74, 0x4b, 0x21, 0x37, 0xe7, 0x5b, 0xee, 0x16, 0xf0, 0xcc, 0xcf, 0x0e, 0x1f, 0x00, 0x99, 0x48, 0x1b, 0x67, 0x80, 0x96, 0x59, 0x64, 0xc9, 0x2e, 0x4c, 0x82, 0x43, 0xfc, 0x4a, 0x67, 0xbf, 0x4e, 0x48, 0x30, 0x89, 0x26, 0x90, 0x96, 0x2c, 0xfd, 0xbe, 0x0a, 0x9a, 0xd6, 0xe8, 0x03, 0xaf, 0x5a, 0x84, 0x47, 0xd4, 0x36, 0xfd, 0xfd, 0xac, 0x2e, 0xe9, 0xa5, 0x1e, 0xd1, 0x6b, 0x7b, 0x27, 0x17, 0xca, 0x95, 0x55, 0x8c, 0x2d, 0xfc, 0x68, 0xff, 0x60, 0x08, 0xd0, 0xf4, 0xb8, 0xf0, 0x89, 0x6e, 0x48, 0xcc, 0x63, 0x2f, 0x8c, 0x72, 0x12, 0x49, 0xa0, 0xa7, 0x48, 0x66, 0xc7, 0x45, 0x5b, 0x92, 0xf8, 0x95, 0xf1, 0x87, 0x36, 0x49, 0xec, 0xbc, 0x21, 0x6d, 0x50, 0x11, 0x6c, 0x21, 0xd6, 0x8b, 0x7b, 0x87, 0xca, 0x72, 0xb9, 0xdc, 0xbd, 0x2b, 0x1e, 0xd4, 0xcf, 0xfe, 0xc6, 0xd4, 0x0d, 0xcb, 0x24, 0x1d, 0x8b, 0xd5, 0xd1, 0x6f, 0x8d, 0xdc, 0xf3, 0x69, 0x8d, 0xe4, 0xc7, 0x50, 0xce, 0x67, 0x8e, 0x8f];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("903f79310c423401236d5d4fb86b9742a72fdc89455e8d88ed3558a1"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("bacaa6db2dfaf5cf8258f41441b6955d58a7d7519b617e8219b85d8c459f8155"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("50590111ccc36ce01d7af79455cc919179bbfc41e30d41535b1e41c0cbf18e6d28515fe93c87e0ac17f158b50eb04e1d"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("a97eb96b5e18a46a9590d18a3d260ad82e4ff4568ed7d72342be39dfde7fd6f81b5d0f39b4060123b407ca2cd437254c1eaf5fe65021e8c5b2455e52fa76181a"));
	let bytes = &[0x14, 0x54, 0xed, 0xa3, 0x89, 0x31, 0xe5, 0x92, 0x27, 0xb5, 0x46, 0x59, 0xd3, 0xde, 0xd1, 0x53, 0x86, 0xc9, 0x8d, 0x46, 0xac, 0x0a, 0x1a, 0x59, 0x4e, 0x68, 0xe9, 0x58, 0x46, 0x59, 0x45, 0xdf, 0xc5, 0x55, 0xcd, 0x70, 0x8f, 0xe0, 0x0a, 0xdd, 0x6a, 0xa6, 0xc2, 0x92, 0x10, 0x3d, 0x55, 0xc2, 0x12, 0x2c, 0xa8, 0xe7, 0xc1, 0x36, 0x35, 0xc6, 0x08, 0xbd, 0xbe, 0x56, 0x92, 0x90, 0x5c, 0xfd, 0x7e, 0xb3, 0x36, 0x23, 0xf2, 0xe3, 0xf1, 0x13, 0x76, 0x3c, 0x1d, 0x41, 0x7d, 0xa9, 0x77, 0xa4, 0xee, 0x81, 0x03, 0x51, 0x8b, 0xa6, 0x44, 0xc3, 0x17, 0x50, 0x7a, 0x78, 0x87, 0x6d, 0x54, 0x5f, 0x31, 0xbf, 0x40, 0xf7, 0x06, 0xc8, 0x0c, 0x5a, 0x5c, 0x9d, 0xa2, 0xc3, 0xfa, 0x2a, 0xa6, 0x4a, 0x10, 0x8d, 0xab, 0x77, 0x2b, 0xc3, 0x92, 0x77, 0xda, 0x0d, 0x8d, 0x0a, 0x55, 0x9d, 0x2a, 0x4d, 0x77, 0xd9, 0x26, 0x69, 0x22, 0x32, 0x14, 0x69, 0x97, 0x0c, 0x51, 0x58, 0x9c, 0x70, 0x11, 0xd7, 0xe9, 0x6b, 0xe6, 0x10, 0x9b, 0x10, 0x13, 0x68, 0xd4, 0xf1, 0x2f, 0xf8, 0x4f, 0x3f, 0x71, 0x53, 0xc7, 0x46, 0xe2, 0xf5, 0xf5, 0xf5, 0x0d, 0x59, 0xf6, 0xd4, 0x29, 0xb9, 0xad, 0x6a, 0x3e, 0x56, 0x53, 0x15, 0xdb, 0x4a, 0x93, 0x6d, 0x10, 0x58, 0x4b, 0x45, 0x12, 0x30, 0xc5, 0xe1, 0x01, 0xba, 0x91, 0xef, 0x1f, 0x0b, 0x58, 0xcb, 0x5f, 0x0c, 0x89, 0xc5, 0xcd, 0xd7, 0x62, 0x25, 0x33, 0x6c, 0xc2, 0xdf, 0xde, 0xf2, 0x67, 0x3d, 0x66, 0x12, 0xbd, 0x40, 0xd4, 0x07, 0x35, 0xac, 0x0c, 0x1a, 0xb5, 0xfc, 0x62, 0x65, 0xc2, 0x9b, 0x1d, 0x65, 0xa3, 0x6e, 0xad, 0xb8, 0xb6, 0xa0, 0x91, 0x7c, 0xa6, 0xde, 0x92, 0x4f, 0x8a, 0x34, 0x79, 0x5d, 0x11, 0xd0, 0x25, 0xfe, 0x32, 0xec, 0x04, 0xbe, 0x61, 0xb3, 0x33, 0xf9, 0xf9, 0xc5, 0xe1, 0xed, 0xf8, 0xbe, 0xf1, 0x50, 0xf6, 0x81, 0x90, 0xa1];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("84a71345bd31254040436f382c1f9385a501dcb9a2d368519dbbc7dc"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("11308b14022f98dc01d590bd2ec019aa74f4429750054351245d9cccdea2263d"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("f5f0d51ea9cd21f47e76ac1bfc6f52aaad679af30df12a7e7d91aca28a48c8cd51dfa56343d6b8ec6a033d59e411ed83"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("8ce65a5e8f0922514a7c43a612ef8129500e0b38d240f19dc75c344113637a1120753d2d6b3c1f726100380433e264d114f5407bd0d505423ce9c34a5eb791a1"));
	let bytes = &[0x2f, 0x51, 0x55, 0x6c, 0x33, 0x8c, 0xa1, 0x62, 0xa5, 0xed, 0x80, 0x4a, 0x7c, 0x14, 0xfb, 0xbf, 0xd5, 0xb6, 0x6b, 0x6b, 0x6d, 0x59, 0x3d, 0xb5, 0xd9, 0xbd, 0x04, 0xc7, 0xae, 0x6d, 0x77, 0x72, 0xd1, 0x81, 0x32, 0xa0, 0x2f, 0x76, 0x0e, 0xec, 0xc7, 0xf0, 0x38, 0xce, 0xe2, 0x89, 0x0c, 0xb6, 0x7d, 0x59, 0xd5, 0x97, 0xf9, 0x63, 0x01, 0xeb, 0x3d, 0x41, 0xe3, 0x21, 0xf0, 0x56, 0x49, 0x84, 0x18, 0x97, 0x3d, 0x48, 0xfc, 0x7d, 0x82, 0x5c, 0xdc, 0x30, 0x25, 0x81, 0xb5, 0x3f, 0x3a, 0x8f, 0xa0, 0xc1, 0xac, 0xff, 0x69, 0x07, 0x89, 0xe4, 0x5f, 0x8f, 0x33, 0x0c, 0xe2, 0xb8, 0xa3, 0xd0, 0x80, 0x39, 0xb7, 0x40, 0xfd, 0x12, 0x85, 0xe8, 0xf4, 0xfe, 0x68, 0x4f, 0x46, 0xbe, 0xa3, 0x0e, 0x64, 0x95, 0xab, 0xfb, 0x12, 0x38, 0x4b, 0xed, 0x1c, 0xd8, 0x61, 0x6e, 0xaa, 0xe9, 0x3f, 0xc1, 0x3b, 0x90, 0xba, 0x8e, 0x77, 0x06, 0xae, 0xed, 0xb6, 0x15, 0x21, 0xe9, 0x5e, 0xd8, 0x9c, 0xb3, 0x42, 0x7d, 0xf8, 0x77, 0xd4, 0xf4, 0x42, 0xb4, 0xd0, 0x71, 0xdb, 0xf9, 0xcc, 0xb2, 0xcb, 0x99, 0x8d, 0xdd, 0x6a, 0x8b, 0xe6, 0x2e, 0xbf, 0xb5, 0xfb, 0x5a, 0xa5, 0x08, 0x83, 0x73, 0x91, 0xfe, 0xaa, 0xfc, 0x03, 0xdd, 0xbb, 0x02, 0xf3, 0xcc, 0x64, 0xc6, 0x47, 0x57, 0x4e, 0x38, 0x3a, 0x65, 0xd0, 0x3f, 0xfc, 0xb3, 0xee, 0xa6, 0x40, 0x3e, 0x68, 0x4c, 0xbb, 0x5e, 0xbc, 0x67, 0xc9, 0x8c, 0xee, 0x6d, 0xcb, 0xc6, 0x57, 0xfd, 0x30, 0xee, 0x11, 0xf6, 0x98, 0xb1, 0x06, 0xb3, 0x45, 0x3f, 0x8e, 0xf7, 0x2f, 0x19, 0xde, 0x69, 0xa1, 0xef, 0x46, 0xd3, 0x9a, 0x4b, 0x84, 0x69, 0x7b, 0x6e, 0x59, 0x83, 0xa1, 0x59, 0x58, 0x28, 0xb9, 0xed, 0xac, 0x55, 0x9a, 0xe1, 0x57, 0xef, 0xef, 0xd5, 0x72, 0x27, 0x62, 0x70, 0xc4, 0x10, 0xfd, 0xbc, 0x84, 0x42, 0xf1, 0x27, 0xd3, 0xc1, 0x0d, 0x64, 0xf3];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("90cbb211713b7fb28858367cdbd425e36eac40c52031ae08b84826a0"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("14f34276fbe85c08434fff98627ce54d75f70d9cc7020fd3fa73b6b7a7e8980b"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("fa5d21d5278b4de00a3fdde104fc37ced5c086eea656cda4efeb569227de8fa05e6a462368a42448cfce627748acb8ee"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("2823ab3d363ec0b7b558184413527e4da18e6b18f3755b58134211c022c70b2daf0394e031cd0ea794cfd367ee381b742a153eb780ea49a4701d811f67206eb1"));
	let bytes = &[0xfb, 0xb6, 0xca, 0x3c, 0xba, 0xb2, 0xdf, 0xed, 0xd8, 0xab, 0x4d, 0x8e, 0x2d, 0x11, 0xb6, 0xdb, 0x2a, 0x55, 0xc3, 0x6c, 0xa6, 0x6a, 0x3f, 0x54, 0x5c, 0xd7, 0x8a, 0xa7, 0x49, 0xea, 0x49, 0x48, 0x54, 0x79, 0x0e, 0x49, 0x16, 0xd3, 0x01, 0xf5, 0x54, 0xb8, 0x66, 0x40, 0xf7, 0x4b, 0xab, 0xda, 0x37, 0xd1, 0xf3, 0x62, 0x76, 0x3a, 0x1c, 0x5a, 0xd3, 0x66, 0xea, 0x88, 0xf2, 0x6b, 0xd6, 0x7b, 0xc7, 0xf0, 0x3c, 0x19, 0xe5, 0xa4, 0x31, 0x6d, 0x7c, 0xb8, 0xee, 0xc0, 0x7f, 0xb6, 0x52, 0x12, 0x13, 0x5c, 0x45, 0xf7, 0x1e, 0x22, 0xc2, 0x8e, 0x62, 0x93, 0x27, 0x06, 0x60, 0x6b, 0x4b, 0x7d, 0xe6, 0x1b, 0x2c, 0x05, 0xdd, 0x93, 0x8b, 0x8f, 0x42, 0x3f, 0x66, 0x87, 0xda, 0x0d, 0x48, 0x11, 0x83, 0x55, 0xf8, 0x8d, 0xe0, 0x40, 0xd4, 0x9a, 0xa3, 0xdf, 0x0a, 0x65, 0x9d, 0x92, 0xad, 0x65, 0x85, 0x52, 0x92, 0x79, 0x8b, 0xfa, 0x0e, 0xe0, 0x59, 0xf2, 0xb0, 0x1e, 0x86, 0x50, 0x59, 0x30, 0x05, 0x61, 0x06, 0x97, 0x3f, 0x79, 0xf5, 0x58, 0xb0, 0x4e, 0xf4, 0x03, 0x37, 0xf6, 0x35, 0xc4, 0x39, 0x6b, 0x6b, 0x8f, 0xf4, 0x3f, 0x76, 0xda, 0x13, 0xe2, 0xbf, 0x87, 0xcb, 0xaa, 0x56, 0x54, 0x51, 0xc7, 0xaf, 0x5e, 0x6a, 0x26, 0x34, 0xd3, 0x50, 0xf1, 0x28, 0x60, 0xaf, 0x21, 0x01, 0xd2, 0xfc, 0x4e, 0x47, 0xc5, 0x28, 0x2d, 0xcf, 0xbb, 0xad, 0x64, 0x07, 0x90, 0xdb, 0x3d, 0xa6, 0x6f, 0x0c, 0x68, 0x48, 0x4e, 0x76, 0xa4, 0xc2, 0x15, 0xef, 0x88, 0xf8, 0x7a, 0xde, 0xff, 0x7b, 0x90, 0x40, 0xa5, 0x65, 0x03, 0xbc, 0xe5, 0xd6, 0x99, 0x2f, 0x85, 0xd5, 0x7c, 0xb0, 0x2f, 0xff, 0x2a, 0x4d, 0xae, 0xc4, 0x13, 0xe5, 0x13, 0xdf, 0x29, 0x63, 0x83, 0x1f, 0xd7, 0x9e, 0xfd, 0x7b, 0x2a, 0x66, 0xa5, 0x3f, 0x73, 0x88, 0x29, 0x05, 0x34, 0xe6, 0x5c, 0x35, 0xc8, 0x59, 0xec, 0x54, 0xc9, 0x5e, 0x5b];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("86e8cbd994af899dfb5634231af04c656c6093043531041e992f1396"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("48d0a999f6157d533b8b82708314f80eea4269632bbfd3ac168bce9bae030418"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("b14187ab701a037b33d0b67972975415bed14f8dda147a6c2b57ab23258eecf881aa4dd818a9c9e887935791f193508d"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("0f1bac23a9ac22d0b3cc7b6a0f104eaa4bbf17f0169c67e66258aab7ca5b1b7a92d59788b00b757a919186401bb6cb5e5bf018bacd7da4c947f01f548aa64ed9"));
	let bytes = &[0xf5, 0xf7, 0x1f, 0x3a, 0x23, 0xde, 0x1a, 0xd8, 0xc6, 0xcc, 0x98, 0x77, 0x23, 0x92, 0x9e, 0x49, 0x40, 0xdb, 0xf1, 0x6d, 0x2b, 0xad, 0x61, 0xf5, 0xd3, 0xa8, 0xbc, 0x96, 0x3b, 0x8d, 0xec, 0x65, 0xcf, 0xbb, 0x64, 0x76, 0x46, 0x49, 0x81, 0x84, 0x67, 0x52, 0xa9, 0x18, 0x69, 0x48, 0x6d, 0x75, 0x59, 0xe5, 0x5a, 0x30, 0x68, 0xd1, 0xd6, 0x99, 0x16, 0xcb, 0x24, 0x86, 0x8c, 0x49, 0xef, 0xb1, 0x46, 0x61, 0x5a, 0x0a, 0x03, 0xcd, 0x16, 0x33, 0xbb, 0x58, 0x42, 0x21, 0xf7, 0x5a, 0x77, 0x68, 0x91, 0xf9, 0xcb, 0xc7, 0x84, 0x16, 0xb0, 0xad, 0xf9, 0x4c, 0xeb, 0x53, 0xc1, 0x8b, 0xdf, 0xe9, 0x2b, 0xb4, 0x32, 0xe4, 0x33, 0x64, 0x29, 0xbb, 0x71, 0xf1, 0xb5, 0x57, 0x67, 0x6d, 0x17, 0x1a, 0x49, 0x3e, 0x37, 0x90, 0x9f, 0x0d, 0x80, 0x87, 0xb5, 0x2c, 0x9b, 0x4e, 0xb9, 0xa2, 0xcf, 0x55, 0xd7, 0xa6, 0x9d, 0x54, 0xef, 0x86, 0x17, 0x4c, 0xee, 0x48, 0x17, 0xed, 0x03, 0xce, 0x3b, 0xf9, 0xbb, 0xbc, 0xb9, 0xdc, 0xca, 0x82, 0xea, 0x66, 0x48, 0xe7, 0x26, 0x98, 0xca, 0x2d, 0x8f, 0x32, 0xb6, 0x65, 0x7b, 0x30, 0x41, 0x24, 0x3f, 0x3a, 0x3e, 0x37, 0xee, 0x16, 0x1a, 0x3d, 0x23, 0xe0, 0xdd, 0xaf, 0xad, 0x79, 0x08, 0xcb, 0xc0, 0x92, 0xf0, 0xb8, 0x38, 0xd2, 0xa1, 0xa4, 0x33, 0xaa, 0x50, 0x7d, 0x71, 0xcd, 0x0e, 0x46, 0xfb, 0x98, 0x81, 0x6c, 0x1f, 0xa7, 0x12, 0xeb, 0xa5, 0x3f, 0x98, 0xb3, 0x6f, 0xc1, 0x95, 0xb6, 0x18, 0x28, 0x5b, 0x0f, 0x8c, 0x20, 0x79, 0xe2, 0xd7, 0x0e, 0x94, 0xa3, 0x9e, 0x69, 0x47, 0x88, 0x3c, 0xf0, 0xf6, 0x0c, 0x37, 0x0d, 0x52, 0x83, 0x60, 0xfb, 0x2d, 0x7e, 0xe3, 0x43, 0x33, 0xdc, 0x55, 0x35, 0x26, 0x2e, 0x56, 0x2b, 0x20, 0xca, 0xdc, 0xbd, 0x26, 0xeb, 0x69, 0xdf, 0xeb, 0xcb, 0x71, 0xc5, 0xd9, 0xeb, 0xca, 0x13, 0x5e, 0xf6, 0x0a, 0x23, 0xfd, 0xbf, 0x00, 0x32, 0x75, 0x2e, 0x47, 0x9b, 0x44, 0x93, 0xee, 0xde, 0xfe, 0x6c, 0x05, 0xcb, 0xef, 0x52, 0x9d, 0x6b, 0x9d, 0x35, 0x6c, 0xa3, 0x7a, 0xef, 0xc0, 0xb8, 0x75, 0x24, 0x42, 0xbc, 0xb0, 0xcb, 0x8b, 0xd7, 0x19, 0x3c, 0xbe, 0x75, 0x5e, 0xb7, 0x73, 0x1d, 0x82, 0x77, 0xb5, 0xf4, 0x38, 0x62, 0xbb, 0x7d, 0x5b, 0x8c, 0xdd, 0xb2, 0x3d, 0x92, 0x94, 0x33, 0xe8, 0xae, 0x2c, 0xc6, 0xd1, 0x1e, 0xbb, 0xd2, 0xcc, 0x4e, 0x21, 0x7a, 0xce, 0x6d, 0xe8, 0x05, 0x9b, 0x7c, 0xd4, 0x85, 0x84, 0xb2, 0x64, 0xd6, 0x02, 0x0e, 0x08, 0x2d, 0x5e, 0x44, 0x92, 0xd1, 0x6d, 0x55, 0x6a, 0x5c, 0x7e, 0xc2, 0x66, 0x2e, 0x14, 0x9c, 0x2c, 0x00, 0x42, 0xcd, 0x0a, 0x5a, 0x29, 0x0d, 0xf5, 0x47, 0x16, 0xe0, 0x6a, 0x7b, 0xf1, 0x78, 0xb0, 0x16, 0x96, 0x2b, 0x8d, 0xde, 0xf1, 0x63, 0xe8, 0xcd, 0x21, 0x41, 0x4a, 0x27, 0xf7, 0x09];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("55d085c644ec88db412f466bba3459da131cf49141e65ac2e6217837"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("eef06cdf87ef821b311042ff6cf4cb29d0a1c8d591e61b1ebc5e427fcbf59bd3"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("cc583dd902e71776b086107eee2c342a62dfe36dd8d409dafc8caf6104caddb81eb460a97d846a55af9a35b4e7c62b14"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("ee0817b894394bbe16d9e4d8832be728e26e3a6a99589a2878e8b073812434c2778b155d0b9e4155845fe33dfa6d2a76fb7624cb0655688159badef17af14ab6"));
	let bytes = &[0xc8, 0x10, 0x84, 0x65, 0xe4, 0x93, 0x31, 0x57, 0xb7, 0xac, 0xd1, 0xbc, 0x00, 0x54, 0x77, 0x0d, 0x49, 0x5a, 0xce, 0xec, 0x2f, 0xfe, 0x73, 0x69, 0x52, 0x65, 0x62, 0x2c, 0x34, 0x39, 0xaa, 0x99, 0x1e, 0x6f, 0x9d, 0xf2, 0x68, 0x38, 0x3d, 0x89, 0x8c, 0xd6, 0x43, 0x46, 0x8f, 0x56, 0xdb, 0x0c, 0x13, 0x58, 0xe7, 0xf9, 0xcd, 0x9f, 0x28, 0xaf, 0xea, 0x8f, 0x1b, 0x7b, 0xd1, 0xfe, 0x75, 0x8b, 0x07, 0x7a, 0xc4, 0xcf, 0x9a, 0x0a, 0x0c, 0x05, 0x30, 0x62, 0x2b, 0xbe, 0xca, 0x48, 0x7f, 0x70, 0xac, 0x96, 0x50, 0xbd, 0x24, 0xc7, 0x15, 0x74, 0x49, 0x77, 0x72, 0x39, 0x9f, 0xf8, 0x11, 0xb9, 0x78, 0xea, 0xf6, 0xa0, 0x11, 0xe0, 0x15, 0xf1, 0x2c, 0xf8, 0x6e, 0x34, 0xa6, 0x36, 0x51, 0xa5, 0xdb, 0x6c, 0xd1, 0x1f, 0x5c, 0x53, 0x78, 0x23, 0x31, 0xc1, 0x35, 0x8a, 0xa8, 0xb6, 0xc1, 0xed, 0x4f, 0xc5, 0x3c, 0x5c, 0x99, 0xff, 0x8b, 0x69, 0x6f, 0x01, 0x01, 0xc9, 0x08, 0x1d, 0xab, 0xc8, 0x75, 0xe4, 0xc4, 0x3f, 0x59, 0x80, 0x63, 0xf6, 0xea, 0x02, 0x94, 0x8d, 0x76, 0x7c, 0xcb, 0x3b, 0xab, 0x98, 0x50, 0x6d, 0xa3, 0x56, 0x09, 0xbb, 0x0c, 0x0c, 0x38, 0xff, 0x3d, 0xa7, 0x28, 0x89, 0x2f, 0x02, 0x5c, 0xcf, 0x0e, 0xc8, 0x5a, 0xc8, 0x64, 0x57, 0xa1, 0x58, 0x12, 0xe9, 0xfc, 0x8d, 0xe2, 0xce, 0xed, 0x09, 0xc3, 0xbf, 0x81, 0x30, 0x43, 0xe2, 0xd4, 0x8d, 0xca, 0x38, 0x18, 0x7b, 0xf3, 0x1f, 0x1b, 0xb6, 0x8e, 0xd3, 0x3f, 0xc2, 0x67, 0xe9, 0xde, 0x86, 0xc8, 0xbe, 0x3b, 0xef, 0xc3, 0xb1, 0x06, 0x73, 0x7b, 0xab, 0xbe, 0x73, 0x6a, 0xa7, 0xcb, 0x3a, 0x13, 0x33, 0xdf, 0x74, 0x67, 0x9e, 0x6c, 0x5e, 0x89, 0x34, 0xbe, 0x6d, 0x0c, 0xa3, 0xc0, 0xa5, 0x5c, 0x7b, 0xb1, 0x46, 0xd0, 0x39, 0x9a, 0x79, 0xbf, 0xef, 0xbf, 0xab, 0x9e, 0xb2, 0xc4, 0x53, 0x89, 0xc2, 0x08, 0xfc, 0x34, 0xd0, 0xb1, 0xa5, 0xb0, 0x40, 0x8c, 0x29, 0xc0, 0xec, 0x65, 0xb3, 0x65, 0x4f, 0xf6, 0xae, 0xa4, 0xc9, 0x05, 0x86, 0x39, 0x43, 0x5a, 0x9c, 0x3d, 0xa6, 0x00, 0xcb, 0x59, 0xde, 0x04, 0x3b, 0x63, 0xc3, 0xa8, 0x0d, 0xdb, 0x77, 0x40, 0xea, 0x80, 0x38, 0xad, 0x23, 0x22, 0x40, 0x6d, 0xc9, 0xda, 0x18, 0xd4, 0x6e, 0xac, 0xeb, 0xb0, 0xfe, 0xd1, 0x06, 0xec, 0x17, 0xa9, 0x7a, 0x9b, 0x2e, 0x05, 0xcb, 0x13, 0x3f, 0xd6, 0x8d, 0xbf, 0x69, 0x75, 0xb0, 0x42, 0xfd, 0x83, 0x3f, 0x7f, 0x7e, 0x64, 0xc1, 0x33, 0x84, 0xd8, 0xa8, 0xde, 0x4a, 0xbb, 0x3c, 0x2f, 0xe1, 0x8e, 0x4b, 0x6d, 0x68, 0xcf, 0xac, 0x4b, 0xe5, 0xd1, 0x4d, 0x84, 0xd1, 0x4c, 0xd3, 0x47, 0xaa, 0xf0, 0x19, 0x54, 0x36, 0x78, 0xda, 0x11, 0x00, 0x52, 0x60, 0xeb, 0x10, 0x61, 0xe6, 0x0b, 0x8d, 0xbc, 0x3d, 0x32, 0x43, 0xeb, 0xa6, 0x8a, 0x74, 0x91, 0x3b, 0x2b];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("6ebda0d0e2533646d200b8c697af4453f33d3ea991f10bac8f2beb40"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("59247c4c264eae4a817e91f2f7b8bdb8fdb67495f61ab3a9be62d84d8de89790"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("3437ae5bf6b96e65e28e6969566893cd6134179f3ec64a2bca154520999ac3d895326c9362815209ce5d72fd619a9a02"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("aa3cb0a53da19c76e405a66382d9135ffd3a435ffdf32a980497fb89b14d40f6d8ee49dbe1d265ebb629e5caaa0eb56501c7634554caff2583179bc8d7bdd3eb"));
	let bytes = &[0x06, 0xac, 0x9d, 0x11, 0xdb, 0x2c, 0xad, 0xfd, 0x6b, 0xa4, 0xbf, 0xeb, 0x8d, 0x81, 0xbb, 0xf7, 0x68, 0x37, 0x4b, 0x6c, 0xd5, 0x9f, 0xbe, 0x41, 0xdd, 0xdf, 0xc1, 0x26, 0x97, 0x25, 0x0d, 0xc5, 0xcf, 0x25, 0x61, 0xc9, 0x58, 0xd3, 0x7c, 0xe9, 0x75, 0x82, 0xec, 0x5b, 0xd2, 0xd1, 0x30, 0x51, 0xfc, 0x47, 0x90, 0x87, 0xfc, 0xe6, 0xa1, 0xfe, 0x7a, 0xf3, 0x6c, 0xa5, 0x9f, 0x1d, 0x6c, 0x23, 0x5a, 0xbc, 0x99, 0x42, 0x49, 0xbd, 0x9b, 0x72, 0x45, 0x90, 0x11, 0x7d, 0x4c, 0x74, 0x72, 0xf2, 0xae, 0x60, 0x83, 0x0e, 0xe9, 0x1d, 0x56, 0xb2, 0x09, 0x54, 0x7b, 0xce, 0x5e, 0x25, 0xf1, 0xe9, 0x69, 0x67, 0xb8, 0x03, 0xdf, 0x10, 0xa7, 0x7c, 0x52, 0x41, 0x14, 0xa7, 0xc9, 0xa5, 0x2e, 0xd3, 0x01, 0x88, 0xe7, 0x29, 0x9b, 0x12, 0x10, 0xf2, 0x5e, 0xb7, 0x08, 0xd2, 0x6f, 0xcb, 0x06, 0x30, 0x11, 0x2d, 0xe8, 0xed, 0xfb, 0x4d, 0x0e, 0x99, 0xde, 0x18, 0xa0, 0x73, 0xfe, 0xf2, 0x56, 0xd0, 0x1e, 0xb6, 0xac, 0x4f, 0xc8, 0x40, 0x0f, 0xad, 0x6c, 0x09, 0xa6, 0x01, 0xb4, 0x3b, 0x84, 0x74, 0x75, 0x78, 0x7c, 0x28, 0x32, 0x41, 0x3c, 0x95, 0x6a, 0x87, 0xc7, 0xda, 0xed, 0x61, 0xf4, 0x90, 0x1a, 0x6c, 0x86, 0xe3, 0x43, 0x49, 0xf2, 0x38, 0x83, 0x50, 0xe6, 0x8b, 0x0f, 0xa9, 0xc7, 0x03, 0x38, 0x89, 0x4e, 0x2e, 0xa8, 0x8c, 0xb9, 0x0a, 0x50, 0xbe, 0x86, 0x6f, 0x70, 0x96, 0x9d, 0x2a, 0x61, 0x7c, 0xfb, 0x7a, 0xbd, 0x9b, 0xc0, 0xf8, 0xf5, 0x91, 0x2f, 0x44, 0xa0, 0xac, 0xbb, 0xcd, 0x00, 0xde, 0x10, 0xb6, 0x24, 0x94, 0xb8, 0xed, 0x7b, 0xa0, 0x91, 0x37, 0x15, 0x09, 0x52, 0x94, 0xeb, 0x66, 0xc6, 0x08, 0x19, 0x8c, 0x9a, 0x94, 0x7a, 0xe8, 0x3a, 0xf8, 0x0d, 0xcf, 0xd6, 0x51, 0xf4, 0x13, 0xe7, 0x0a, 0xed, 0xa1, 0xfc, 0x0d, 0x6b, 0x51, 0x73, 0xc3, 0x62, 0x38, 0xf7, 0x32, 0x75, 0x16, 0xe4, 0x1b, 0x5f, 0x64, 0x64, 0x30, 0xf7, 0xc6, 0xfe, 0x0e, 0xdc, 0x75, 0xab, 0xd6, 0x19, 0x08, 0xb9, 0x50, 0x01, 0x82, 0xaf, 0x02, 0x4f, 0x93, 0x3c, 0x4c, 0x54, 0xc6, 0xca, 0xac, 0x69, 0x37, 0x0c, 0x44, 0x53, 0x83, 0x47, 0x04, 0x65, 0xac, 0xcd, 0x5a, 0xaa, 0xb1, 0xf7, 0x1c, 0x7c, 0xde, 0x2b, 0xc9, 0x35, 0x2a, 0xd9, 0x6a, 0xef, 0x77, 0xef, 0xc3, 0xfb, 0xb9, 0xc2, 0xeb, 0x73, 0x6c, 0xe0, 0xaa, 0x89, 0xbd, 0x38, 0xdd, 0x09, 0x9c, 0xfa, 0x2b, 0x7a, 0x7d, 0xf6, 0x6f, 0xbf, 0x9e, 0x92, 0xd7, 0x16, 0x2c, 0xdf, 0xa6, 0x1f, 0xf6, 0xec, 0x42, 0xcf, 0xa1, 0xef, 0x7a, 0xae, 0x57, 0xed, 0x2f, 0xdd, 0x24, 0x08, 0xf2, 0xa1, 0xe5, 0xbb, 0x6b, 0x7a, 0xce, 0x6c, 0x3d, 0x3b, 0x09, 0xb5, 0xa9, 0x8e, 0xa6, 0x64, 0x90, 0x7e, 0xff, 0x15, 0x0c, 0xad, 0xec, 0x9c, 0x19, 0xce, 0x37, 0x3d, 0x4d, 0x43, 0x3a, 0x64, 0x06];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("556f9447e6b352b98d35515a1ecd8190d97cdb13c9717601357a8af2"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("7a627fd6dfc8b1f2c528fffa87a3c734b4269a58bbc2ed6bddf51f477e348332"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("e50a77269fcf04045cd1fa0cab9d47b6314b415cb03e91f8adf13975d50c1b2d0f81cb8284016e576a54789d620c61f7"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("be0b67ad3ea4f5cd6c25499836c1186aa044522fa477c8a8865205f504088c9fd56cdaef9a136beb3194102aa17713dfa1255e794f18616edadb42611d28d96d"));
	let bytes = &[0xa5, 0x83, 0x5c, 0x5c, 0xb0, 0x17, 0xd3, 0xdb, 0xc5, 0xb8, 0xe0, 0x01, 0xfd, 0x8e, 0xc8, 0x28, 0x29, 0xf6, 0x09, 0x0b, 0xe8, 0x5a, 0x9b, 0xdf, 0x15, 0x3f, 0x0f, 0x2d, 0xc8, 0x6a, 0x52, 0x43, 0xb7, 0xbc, 0x8e, 0x95, 0x02, 0xb7, 0xfe, 0x2c, 0x62, 0x10, 0x10, 0xb0, 0x30, 0xf1, 0x0f, 0x7f, 0x8f, 0xf5, 0x02, 0x03, 0x1a, 0xb2, 0x14, 0xcc, 0x7b, 0x0b, 0xaf, 0xf5, 0x9d, 0x0f, 0x27, 0x5a, 0xc4, 0xc2, 0xaf, 0xd0, 0x01, 0xee, 0x93, 0x8f, 0x10, 0x31, 0x29, 0x97, 0x70, 0x60, 0x11, 0xc6, 0x28, 0xa9, 0x86, 0x84, 0xf4, 0xb9, 0x0e, 0x5d, 0xd5, 0x24, 0x65, 0xe8, 0x99, 0x07, 0x35, 0xa1, 0x64, 0x7d, 0x0f, 0x12, 0x2f, 0x19, 0xc6, 0xeb, 0x54, 0xda, 0x13, 0xea, 0x35, 0x4b, 0xd9, 0x11, 0x05, 0x6a, 0x0d, 0x37, 0xe6, 0xde, 0x18, 0xb1, 0x85, 0xd9, 0xed, 0x29, 0x2d, 0xf0, 0x8f, 0xac, 0x5e, 0x0a, 0x7a, 0x8e, 0x0d, 0xb5, 0xcd, 0xdf, 0x7c, 0x25, 0x8f, 0x9a, 0x92, 0x7f, 0x9f, 0xa7, 0x8c, 0xe6, 0x05, 0xa9, 0x56, 0xdb, 0x81, 0x21, 0xfd, 0x20, 0x4c, 0xe8, 0xf9, 0xd4, 0x8d, 0x86, 0xde, 0x79, 0x9c, 0xd0, 0x91, 0xe5, 0xe3, 0xd3, 0xb4, 0x16, 0x43, 0x75, 0x88, 0xa2, 0x3e, 0x33, 0x86, 0x63, 0x0e, 0xdc, 0xe7, 0x46, 0x9f, 0x58, 0xee, 0xe6, 0x7c, 0x79, 0x1b, 0x88, 0xf0, 0xb5, 0xc6, 0xc5, 0xa0, 0xab, 0xda, 0xce, 0x12, 0xba, 0xff, 0x31, 0xcc, 0xce, 0x93, 0xcc, 0x37, 0xf7, 0x62, 0xe0, 0xda, 0xc3, 0x5c, 0x30, 0xc6, 0x43, 0x3b, 0xe3, 0x99, 0x8e, 0x96, 0x82, 0x70, 0xfe, 0x0d, 0xf5, 0x0e, 0xc5, 0x7d, 0x7a, 0x21, 0x7a, 0x63, 0xa2, 0x57, 0x4f, 0xb0, 0xe2, 0xf3, 0xa6, 0xa8, 0x4b, 0xa5, 0xe6, 0x10, 0x86, 0x9b, 0x0b, 0x74, 0x56, 0xbf, 0xd8, 0x86, 0x57, 0xff, 0xa0, 0xbf, 0x5c, 0xba, 0x2d, 0x5c, 0x97, 0x42, 0x92, 0xbf, 0xb5, 0x14, 0x22, 0xba, 0x5b, 0xf4, 0x7f, 0x2f, 0x85, 0xc8, 0x33, 0xae, 0x42, 0x07, 0x29, 0xd6, 0x1a, 0x9b, 0x0b, 0xc8, 0xc0, 0x80, 0x95, 0xaa, 0x3c, 0x00, 0xaf, 0x6e, 0x6d, 0x93, 0x8c, 0x91, 0xa6, 0x3d, 0x1e, 0xe1, 0x70, 0x6b, 0xec, 0x7d, 0x3e, 0x60, 0xd8, 0x1e, 0x05, 0x69, 0x0c, 0xf5, 0xb8, 0x36, 0x8e, 0x41, 0xc8, 0xb7, 0x02, 0x1a, 0x31, 0xef, 0x7d, 0x07, 0x38, 0xd9, 0xce, 0x41, 0x4e, 0xe2, 0xa8, 0x45, 0xa2, 0x45, 0xdc, 0x8a, 0x55, 0x74, 0xfd, 0x77, 0xde, 0xa6, 0xe3, 0x9d, 0xf4, 0xbb, 0x12, 0xd9, 0xb5, 0xed, 0x52, 0xd3, 0xaf, 0xc0, 0xbb, 0xd9, 0xd7, 0x4b, 0xaa, 0xcf, 0xc4, 0x6b, 0x69, 0x8f, 0x53, 0xcd, 0xa6, 0x1a, 0x90, 0xf8, 0x78, 0x79, 0xcb, 0x09, 0x9c, 0x85, 0xb6, 0x6d, 0xf1, 0x41, 0x20, 0x60, 0xd5, 0xfb, 0xca, 0x57, 0x19, 0x51, 0x56, 0x6e, 0xf8, 0xcf, 0xfe, 0x56, 0x66, 0x3d, 0x08, 0x37, 0x7d, 0x7f, 0x5f, 0x4a, 0x3c, 0xf2, 0x15, 0x75, 0xf1, 0xaa];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("350504373132dee61c2daad5e42100c361ceac594a284c068bf8561e"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("602e6c3234017d5a1dfa37bdc741723c70880f252e490459c87d56d0c31f4419"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("f35f3692cc94c793e1321a9bea7d944b04a8171bf5c82d7fef02648828f20c9a2fa961813db810f807d2016a5fe9cbcb"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("78f8fdce4e86e526d7d0e36824d553c4c930e1ee122a8f1b9327526f689b3ff101eb5e04c463d443538c3c4479aea27bae72a0e66686b47c56baae04eebe12c5"));
	let bytes = &[0x5b, 0x68, 0x9a, 0xbb, 0x2b, 0xd3, 0x72, 0xd1, 0x9a, 0xe7, 0xdb, 0x32, 0x12, 0x6e, 0xcd, 0x6d, 0xea, 0x0b, 0x7e, 0x43, 0xc7, 0x54, 0xe5, 0x74, 0xdd, 0x51, 0xac, 0x2d, 0x25, 0x41, 0x66, 0x93, 0x27, 0x4f, 0x10, 0xb4, 0x5d, 0xe6, 0x5a, 0xf5, 0x19, 0x8a, 0x5a, 0x30, 0x8b, 0x50, 0x58, 0x6e, 0x24, 0xc3, 0xc4, 0xaa, 0x72, 0x39, 0x64, 0x04, 0xbd, 0x51, 0xb2, 0x5a, 0xb8, 0xd1, 0x98, 0x6f, 0x92, 0x19, 0x5d, 0xe5, 0x19, 0x57, 0xbe, 0x95, 0x10, 0x1d, 0xac, 0x40, 0x4a, 0xa2, 0xa3, 0x93, 0x90, 0x32, 0xab, 0x6b, 0x28, 0x47, 0x0a, 0x98, 0x79, 0x0d, 0xd2, 0x97, 0xcf, 0x09, 0xf3, 0xa4, 0x49, 0x0c, 0x19, 0xbb, 0x89, 0xc0, 0xe3, 0x63, 0xef, 0x60, 0x79, 0x59, 0x90, 0x24, 0xc6, 0xa0, 0x8e, 0xe6, 0x44, 0x19, 0x8e, 0x9d, 0x17, 0xda, 0x5d, 0x7a, 0x13, 0x81, 0xac, 0xda, 0x60, 0x5c, 0x1d, 0xf9, 0x3e, 0xbd, 0x76, 0x41, 0x49, 0xa5, 0x4f, 0xf8, 0x7e, 0xf2, 0x78, 0xbb, 0x65, 0xc4, 0xcd, 0x09, 0xb5, 0xb9, 0x4d, 0x8f, 0xc4, 0x2b, 0x34, 0x1d, 0x68, 0x2a, 0xe9, 0x51, 0x2a, 0x0e, 0x42, 0x05, 0xd6, 0x5d, 0x84, 0xba, 0x9f, 0x8a, 0xc1, 0xbf, 0x2d, 0x78, 0xd3, 0x80, 0x34, 0xcb, 0x98, 0x35, 0xba, 0xb5, 0x36, 0x1b, 0x6f, 0x8a, 0xd8, 0xef, 0x30, 0xea, 0x53, 0x76, 0xd4, 0xa7, 0x82, 0xec, 0x71, 0x98, 0xe7, 0x57, 0xad, 0x57, 0xf7, 0x4e, 0xd6, 0x5e, 0x6c, 0x3c, 0x7b, 0xc2, 0xdb, 0x92, 0xd8, 0x3a, 0xf2, 0xa6, 0x28, 0x2f, 0x23, 0xce, 0xa3, 0x7a, 0xaa, 0x63, 0x48, 0x43, 0x4d, 0x87, 0x70, 0x17, 0x29, 0x36, 0x3f, 0x2d, 0xc4, 0xe1, 0x74, 0x57, 0x80, 0x72, 0x1e, 0xe0, 0xe1, 0xea, 0xd4, 0x77, 0x4f, 0x84, 0x2d, 0x60, 0x97, 0x03, 0x0e, 0x3d, 0x58, 0x9f, 0x96, 0x29, 0xdf, 0xba, 0xee, 0xee, 0xc5, 0xc4, 0x10, 0x66, 0x01, 0xcf, 0x49, 0x05, 0xff, 0x21, 0x69, 0x67, 0x84, 0xf2, 0xe4, 0xb3, 0x86, 0xa9, 0xfe, 0x32, 0x01, 0x1a, 0x15, 0x72, 0x89, 0x17, 0x34, 0x2f, 0xb1, 0xdc, 0xc8, 0xc0, 0x08, 0x78, 0xb9, 0xb5, 0x4f, 0xd4, 0x6a, 0x98, 0x26, 0x5f, 0x7a, 0x9a, 0xfe, 0x74, 0xb4, 0x44, 0x78, 0xa0, 0x15, 0x45, 0x9c, 0xbd, 0x32, 0x27, 0x3d, 0xaf, 0x4a, 0xab, 0xf4, 0xee, 0xed, 0x4f, 0x00, 0x1f, 0x1f, 0x37, 0xc3, 0xba, 0xcc, 0x83, 0xc1, 0x41, 0xd4, 0xd2, 0x03, 0xbe, 0xbc, 0x3e, 0x85, 0x15, 0x1a, 0xca, 0x88, 0x4f, 0x1a, 0x9c, 0x06, 0x2a, 0x45, 0x36, 0x4c, 0xfa, 0x2b, 0xe7, 0x5e, 0x02, 0xf1, 0x09, 0xb1, 0x3d, 0xb2, 0x2c, 0x48, 0xcb, 0x95, 0xa4, 0x64, 0x3a, 0xf1, 0xff, 0x2e, 0xb2, 0xe6, 0x6c, 0x1f, 0xbf, 0x0b, 0x6d, 0xf7, 0xe5, 0xd8, 0x3f, 0xcb, 0xb4, 0x9e, 0x5d, 0x73, 0x0f, 0x47, 0x82, 0xf9, 0x9c, 0x64, 0x49, 0x9e, 0x4d, 0x35, 0x3c, 0xac, 0xe8, 0xd1, 0x4c, 0x8f, 0x33, 0xb3, 0x87, 0x2c, 0x13];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("130d85a19255d2eef0c78d82ed577643267c5b685190fb975f1e5037"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("555f5c48901a5756605aace2dfb7dbecf84ec11183a37847defbb834d56478d9"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("a67162c516022c1c13e10d3420255dd80abd66b3aff31def873a3494cdcb5d14a6213e9f38891e08da5c69a9a6e49a3b"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("5a7626ab40ca52d76eb29efb8f5053514f39c5eea074d55d338e8860829de8de863289c3e051e30768ad07998c44e9e043475773da1c158c766db29db836ced9"));
	let bytes = &[0x93, 0xdd, 0x27, 0x53, 0x93, 0x03, 0xdd, 0x21, 0xc2, 0x50, 0x4e, 0xdc, 0x42, 0x4b, 0xa4, 0x6c, 0xad, 0xa9, 0x7a, 0x99, 0x1c, 0x45, 0xaf, 0x2c, 0xc2, 0xaf, 0x00, 0xb0, 0x03, 0x47, 0xf4, 0x67, 0x83, 0xfb, 0xa9, 0xab, 0x8f, 0x33, 0x9f, 0x01, 0x12, 0xda, 0x20, 0xff, 0x3b, 0x4e, 0x2e, 0x37, 0x71, 0xf9, 0x70, 0x2f, 0x62, 0x26, 0x0a, 0xb3, 0x82, 0x8a, 0xa5, 0x9f, 0xe7, 0x9d, 0x98, 0x66, 0x5c, 0xa8, 0x02, 0x3a, 0xb6, 0x46, 0x91, 0xe9, 0x6e, 0xff, 0x40, 0x14, 0x5e, 0xae, 0xcd, 0x4b, 0x8f, 0xa2, 0xb7, 0xff, 0xee, 0x20, 0x5d, 0xa8, 0x11, 0x4f, 0x96, 0x3f, 0xe5, 0x27, 0x60, 0xe2, 0x33, 0xa6, 0x23, 0x7b, 0x6d, 0x25, 0x33, 0xb9, 0x34, 0x00, 0xb2, 0xe2, 0x25, 0xa2, 0xf2, 0x86, 0x8b, 0x47, 0x55, 0x5e, 0xc9, 0x2b, 0xba, 0xcd, 0xc5, 0x07, 0x02, 0xdf, 0xc8, 0xa4, 0xb0, 0x3b, 0x4b, 0x81, 0x03, 0x8a, 0x51, 0x67, 0x96, 0x92, 0x6f, 0x9f, 0x62, 0x25, 0xfe, 0x24, 0xe0, 0xba, 0x1d, 0xdb, 0x7b, 0xab, 0xd4, 0xf4, 0xd7, 0x93, 0xdf, 0x47, 0x20, 0xc0, 0xe3, 0xe0, 0xb7, 0xea, 0x3e, 0x32, 0x04, 0x6b, 0x8b, 0x46, 0x05, 0x16, 0x51, 0x00, 0x82, 0xa8, 0xee, 0x25, 0x4e, 0xe1, 0xbd, 0x94, 0x38, 0xcb, 0xe8, 0xe8, 0xa7, 0xf2, 0x2a, 0x23, 0x71, 0x46, 0x69, 0x29, 0xcb, 0x6d, 0xa8, 0x06, 0x25, 0xc0, 0x76, 0x8b, 0xbc, 0x48, 0xd7, 0xdd, 0xdc, 0x2b, 0xc8, 0xe0, 0xd6, 0x64, 0xb0, 0x1c, 0x7a, 0x26, 0xfa, 0x92, 0xc0, 0xc7, 0x95, 0x5b, 0x5e, 0xb6, 0xe3, 0x5f, 0x39, 0x4e, 0xab, 0x3c, 0x5e, 0xa9, 0x8a, 0x37, 0x01, 0xcb, 0xe6, 0xff, 0x22, 0xa9, 0xe0, 0xb4, 0x03, 0xf9, 0x73, 0xc0, 0xb5, 0x2b, 0x62, 0xd6, 0x2c, 0xf0, 0x0a, 0xb2, 0x93, 0xa6, 0x87, 0x74, 0xbe, 0x7e, 0xcc, 0xd7, 0xca, 0x16, 0x69, 0xb1, 0xff, 0xbd, 0x4f, 0xcf, 0x87, 0x1a, 0xd7, 0xb6, 0xe7, 0xa5, 0xee, 0xeb, 0xd0, 0x23, 0xf7, 0x91, 0xe5, 0xe4, 0x54, 0x79, 0x2e, 0x73, 0x9e, 0x19, 0xe3, 0xdd, 0xd8, 0x34, 0x80, 0xf5, 0xcf, 0xc5, 0x58, 0x63, 0x02, 0x7b, 0xb7, 0x25, 0xe9, 0xec, 0x3a, 0x56, 0x84, 0x75, 0x59, 0x36, 0x45, 0x0d, 0x07, 0x9a, 0x3f, 0xbb, 0x69, 0x4d, 0x2a, 0xb0, 0x9f, 0x79, 0xdc, 0x8d, 0x70, 0xc9, 0x84, 0x0f, 0xf7, 0xc4, 0xfa, 0xb5, 0x0c, 0xd6, 0x77, 0xcd, 0x1a, 0xbe, 0xb7, 0x6a, 0x88, 0x24, 0xda, 0x54, 0xa2, 0x7b, 0xec, 0xb1, 0xbb, 0xa2, 0x18, 0x41, 0x98, 0xd2, 0x27, 0x14, 0xbc, 0xd6, 0x53, 0xf7, 0x37, 0x00, 0xf6, 0xaa, 0xd9, 0x46, 0x5e, 0x63, 0x0a, 0x75, 0x41, 0x6d, 0x74, 0xb3, 0xb1, 0x5f, 0x45, 0x4d, 0x2e, 0x1f, 0x38, 0x39, 0x75, 0xaf, 0x7e, 0x82, 0xe3, 0x84, 0xd3, 0xbc, 0x87, 0xe4, 0xd2, 0x6d, 0x34, 0x65, 0xf3, 0x9e, 0x7a, 0xce, 0xd3, 0x0a, 0x89, 0x62, 0x29, 0x19, 0x22, 0x3c, 0x81, 0x12, 0x86, 0x9f, 0xd3, 0x95, 0xa3, 0xdb, 0xcc, 0xe1, 0x45, 0x6f, 0x5d, 0xef, 0xfb, 0x69, 0x1b, 0xb2, 0xf7, 0x6e, 0x5c, 0x6c, 0x5d, 0x03, 0xc2, 0x09, 0xc6, 0x13, 0x77, 0x70, 0x1a, 0x2b, 0xa1, 0xa6, 0xb4, 0x50, 0x6b, 0x7b, 0x4c, 0x96, 0x49, 0xa6, 0xa6, 0x23, 0xb7, 0xbc, 0x6e, 0x64, 0xd5, 0xae, 0x78, 0x31, 0x54, 0x83, 0xbf, 0xb0, 0x3b, 0x17, 0x5e, 0x97, 0xb9, 0xbd, 0x89, 0xfa, 0xa6, 0x12, 0x2d, 0x81, 0xf8, 0xcf, 0x4f, 0x5d, 0x00, 0x75, 0x2e, 0x5c, 0x85, 0xca, 0x3c, 0xf8, 0x6d, 0x67, 0xb0, 0xd0, 0x7e, 0xac, 0x7f, 0x92, 0xf4, 0x15, 0xf9, 0x54, 0xdc, 0x14, 0x4f, 0x75, 0xe1, 0x22, 0x74, 0xad, 0x8a, 0xdf, 0xbb, 0x4d, 0xb0, 0x58, 0xe5, 0x27, 0x59, 0x85, 0x76, 0x63, 0xa7, 0xca, 0x4a, 0xa6, 0x9d, 0x86, 0x95, 0xce, 0x76, 0x05, 0xd2, 0xb5, 0xfd, 0xe1, 0x93, 0xcb, 0xfa, 0x65, 0x43, 0x72, 0x8e, 0x44, 0x9c, 0x5d];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("6ec3babed173e481fea5022b248889061a2dabee763f9a5ed6a4daaf"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("acd81710d4d9d9caaa7a7fb09972065a609256e0291e1954d7b4c9127d2b4462"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("12c1c5117275a3ac48777a6757811a0c745f833195ae6f8d9b44cd15caeebdda561b955e11a5d704eabf3627997131f8"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("6697d029430796e406405f9634cc014389011584e685693e6e77b7d387a37adf42d538af79c86ffc6b17a7d6b7f02f5057ce85031853ecc796c7b4ea4c65750b"));
	let bytes = &[0x17, 0xde, 0x6e, 0xb1, 0x4b, 0xfb, 0x16, 0x0e, 0xaf, 0xcf, 0xe8, 0xee, 0xf1, 0x3d, 0x1a, 0xaa, 0x43, 0x8c, 0x72, 0xbc, 0xf6, 0x79, 0xbf, 0xaf, 0x4f, 0xee, 0x03, 0xd7, 0xb1, 0x71, 0x31, 0x93, 0x9b, 0xa2, 0x0f, 0x5b, 0x7f, 0x61, 0x35, 0xd0, 0x96, 0x2b, 0x84, 0xdb, 0xe6, 0x25, 0x4a, 0x0c, 0x19, 0xd6, 0xb5, 0x02, 0x6e, 0x9e, 0x0a, 0xbb, 0x03, 0x13, 0x66, 0x9a, 0x23, 0x7e, 0xb0, 0x52, 0xba, 0x8c, 0xa4, 0xd2, 0x57, 0x8c, 0x2f, 0xe0, 0x22, 0x8e, 0x97, 0x7d, 0xd1, 0x8d, 0x84, 0xef, 0x85, 0xdb, 0x0b, 0x2a, 0x40, 0xff, 0x59, 0xdb, 0x1a, 0x27, 0xf0, 0x6d, 0x60, 0x2e, 0x3f, 0x71, 0x7b, 0x9e, 0xf5, 0x5a, 0xa8, 0xa6, 0x2a, 0x44, 0x7c, 0xff, 0xa9, 0x3e, 0x70, 0x3f, 0x66, 0x7e, 0x1e, 0x65, 0x75, 0x85, 0xbb, 0x42, 0x9d, 0xac, 0x52, 0xde, 0x24, 0x39, 0xec, 0x3d, 0x75, 0xa9, 0x42, 0xd1, 0xf5, 0x4d, 0x44, 0x06, 0x65, 0xa6, 0x3e, 0x33, 0x4e, 0x62, 0x72, 0xf5, 0xb1, 0x1f, 0x6b, 0xe7, 0x96, 0xd2, 0x6b, 0x93, 0x21, 0x0c, 0xc1, 0xa2, 0xae, 0xd0, 0xe4, 0xc8, 0xfb, 0x45, 0x9d, 0x27, 0xb1, 0xa6, 0x9d, 0x42, 0x03, 0xc7, 0x7c, 0x9f, 0x47, 0xdb, 0xdd, 0x18, 0xba, 0xd4, 0x50, 0x4e, 0xe1, 0x8a, 0xe5, 0xe7, 0x9b, 0xa1, 0xec, 0x2f, 0x58, 0x01, 0x63, 0xb3, 0x48, 0xb5, 0x20, 0xa1, 0x3b, 0xd7, 0x85, 0xd0, 0x50, 0xb0, 0x7d, 0x74, 0xbb, 0x90, 0x5f, 0xc5, 0x41, 0x8d, 0xb1, 0xfb, 0x50, 0x35, 0x26, 0x44, 0x0e, 0x01, 0xd5, 0xb7, 0x6b, 0x39, 0xe2, 0x3e, 0xd5, 0xad, 0x7e, 0x34, 0x84, 0x95, 0x78, 0xeb, 0xff, 0x4b, 0xaf, 0x7a, 0x81, 0x92, 0x00, 0x7a, 0x1a, 0x7f, 0x41, 0xae, 0x94, 0x93, 0x33, 0xc8, 0xfb, 0x2a, 0x48, 0xac, 0x3a, 0x28, 0x8c, 0xba, 0x4b, 0x5b, 0xae, 0x7d, 0x9e, 0xf1, 0x1d, 0x81, 0xf4, 0x3f, 0x56, 0x75, 0xe8, 0x0d, 0x36, 0xc5, 0xac, 0xb5, 0xa5, 0x6a, 0x65, 0x0e, 0x38, 0x8f, 0x5e, 0x22, 0xb6, 0xe1, 0x04, 0x97, 0xb0, 0x68, 0x09, 0xf0, 0xa4, 0x63, 0xc6, 0xe0, 0xfc, 0x13, 0x48, 0x11, 0xec, 0x17, 0x95, 0xcb, 0x11, 0xe7, 0x3b, 0x36, 0x9d, 0x15, 0xcb, 0x61, 0x56, 0x5d, 0x44, 0x39, 0x97, 0xf1, 0x23, 0x7f, 0x70, 0x77, 0xdc, 0x1c, 0x30, 0xba, 0x45, 0xd4, 0xac, 0xf7, 0x48, 0xaa, 0x94, 0xe2, 0x9f, 0xce, 0x4a, 0x16, 0xf0, 0xe5, 0x26, 0x28, 0x87, 0x6d, 0x7e, 0xe7, 0xfc, 0x3a, 0xde, 0x7a, 0x74, 0x0c, 0xc7, 0x78, 0x24, 0xd9, 0x28, 0x40, 0x70, 0x21, 0x0c, 0x5b, 0xcd, 0xae, 0x9d, 0xdb, 0xf3, 0x9a, 0x7b, 0x85, 0x80, 0x16, 0xce, 0x0f, 0x06, 0x9d, 0x52, 0x35, 0x27, 0xeb, 0xb6, 0x06, 0x4a, 0xcb, 0x61, 0x32, 0xf4, 0xb5, 0x44, 0xd4, 0x13, 0xa7, 0xd0, 0x55, 0x5c, 0x1c, 0x20, 0x7a, 0xbf, 0xf5, 0xb4, 0xc5, 0x1e, 0x9c, 0xd6, 0x73, 0xf1, 0xee, 0x31, 0x28, 0xb5, 0xb5, 0xdf, 0x71, 0x1c, 0xd6, 0xf6, 0x39, 0xf4, 0x72, 0xc7, 0x72, 0xa4, 0x65, 0xad, 0x13, 0x65, 0x77, 0x9c, 0xfb, 0x54, 0x73, 0x85, 0x30, 0xf2, 0x98, 0xa5, 0x8a, 0x04, 0xd7, 0xd8, 0x4c, 0xe0, 0xb8, 0x2e, 0xb5, 0xb7, 0x1d, 0x87, 0xde, 0xc4, 0x3f, 0x5f, 0x71, 0x7e, 0x7e, 0x8e, 0xf1, 0xc1, 0x67, 0xa6, 0x06, 0x08, 0x7f, 0x07, 0x41, 0x09, 0xe9, 0x5d, 0xc5, 0xa8, 0x0a, 0x65, 0xed, 0x85, 0xa1, 0x99, 0x49, 0xb2, 0xaf, 0x54, 0x99, 0xa5, 0x85, 0x3b, 0x4a, 0xfc, 0x38, 0x49, 0xa1, 0x61, 0x2a, 0x70, 0x95, 0x77, 0x90, 0x62, 0x53, 0x8f, 0xc8, 0x06, 0x7a, 0x54, 0x54, 0xc3, 0xc8, 0x01, 0xd3, 0xf7, 0x18, 0xc1, 0x40, 0x4e, 0x70, 0x5b, 0x15, 0xf2, 0x02, 0xc5, 0xa7, 0x83, 0xd2, 0x4d, 0xf3, 0xbc, 0x6a, 0x38, 0xd1, 0x84, 0x82, 0x37, 0x91, 0x77, 0xdf, 0xd5, 0xb0, 0xa5, 0x09, 0x55, 0x3f, 0xcf, 0x78, 0x22, 0xa5, 0xf0, 0xa9, 0x17];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("741d47c8b0c6a4e0ad9ca1fc97a1d991c0aa7304ed906f083c79ac85"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("376df256fdb94f88dafe35961ed32e572d48c99e1c437519b1c543e6411d9c44"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("ebf0f7ad74e647df2380a8a45b3523a9b08eee576de3992d22544d8ef985e4cb722bf208da5b053f0738d0f721c504f3"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("feb55eee341e4f8d45d5f6c7ed5ba9a3d25284b20f917adf1034b54944593031dc3190d27f8afb31d4ed9b65d71869e60a559b229c5a46ce16961f71b1b8a7cf"));
	let bytes = &[0x94, 0x72, 0xec, 0xe6, 0xf3, 0x38, 0x2c, 0x87, 0x4f, 0x57, 0xdc, 0xe5, 0xa2, 0xa3, 0x41, 0x6a, 0xa7, 0x23, 0xb7, 0x47, 0x1c, 0x68, 0xa8, 0x48, 0x86, 0x63, 0x8e, 0xba, 0x62, 0x02, 0x21, 0x59, 0xb6, 0xaf, 0x9c, 0xb2, 0x6a, 0x22, 0x64, 0x59, 0x28, 0x18, 0xbc, 0x0c, 0x71, 0x53, 0x2a, 0x6b, 0xf8, 0x89, 0x30, 0x8d, 0xf6, 0x1a, 0x81, 0xfa, 0xb5, 0xac, 0x46, 0xb9, 0xe2, 0x69, 0xf3, 0xd0, 0x63, 0x40, 0xa5, 0x81, 0x4c, 0x6e, 0x11, 0xfd, 0xfc, 0x98, 0x28, 0x47, 0x0c, 0x6a, 0x4d, 0x3f, 0xcb, 0xfa, 0x35, 0xdb, 0xa7, 0x9b, 0xbf, 0x8e, 0x14, 0x2e, 0x10, 0xd6, 0x81, 0x3d, 0xf6, 0xbb, 0x27, 0x5d, 0xd1, 0x5c, 0xef, 0x4e, 0x05, 0x2c, 0x7e, 0x4d, 0x6f, 0x65, 0xe4, 0x8a, 0x41, 0x36, 0xd7, 0xbc, 0xe5, 0x3c, 0xc6, 0xac, 0x5d, 0x84, 0xfc, 0x53, 0x26, 0xa8, 0xe2, 0x48, 0xa2, 0x02, 0x04, 0xbb, 0x88, 0xfe, 0xb6, 0xd2, 0xb7, 0x3c, 0xf8, 0xe0, 0x49, 0x17, 0x63, 0x20, 0x28, 0x4c, 0x29, 0xa6, 0x43, 0xc8, 0xd2, 0x3f, 0x74, 0xd7, 0xf0, 0x28, 0x38, 0x5e, 0x22, 0x9d, 0xfa, 0x8c, 0x1c, 0x15, 0xcd, 0xc4, 0xd2, 0x10, 0xef, 0x1e, 0x7a, 0x4e, 0xd8, 0xe2, 0xdc, 0xfd, 0x87, 0xb2, 0x32, 0xa8, 0x46, 0x19, 0x08, 0x30, 0x34, 0x1d, 0x9c, 0xbb, 0xa0, 0x41, 0x5d, 0x55, 0x38, 0x84, 0x84, 0xfc, 0x86, 0x5a, 0x47, 0xe3, 0x19, 0xe1, 0x16, 0xbf, 0x86, 0x89, 0x70, 0xd0, 0x75, 0x19, 0x90, 0x37, 0x66, 0x91, 0xd0, 0x0e, 0x67, 0x2d, 0xf3, 0x7a, 0xaf, 0xee, 0xf7, 0x97, 0xab, 0x00, 0xee, 0xc1, 0x09, 0x7a, 0x07, 0xb3, 0xce, 0xcf, 0xe4, 0x77, 0xfd, 0x4b, 0xeb, 0x05, 0x81, 0xe9, 0xc6, 0x8f, 0x4e, 0x39, 0x23, 0xb8, 0x87, 0xef, 0xf9, 0x59, 0x5d, 0x7b, 0x5d, 0x7b, 0x6f, 0x49, 0x00, 0xd2, 0x61, 0xd0, 0x77, 0x9d, 0x82, 0x44, 0x46, 0xcb, 0x97, 0x33, 0x65, 0x72, 0xe3, 0x1e, 0xf0, 0x5a, 0x3b, 0xae, 0xeb, 0x50, 0x43, 0x89, 0x56, 0x7b, 0x62, 0x72, 0x89, 0xfe, 0x26, 0xad, 0x14, 0x4e, 0xf4, 0xf9, 0xa2, 0x6d, 0xb3, 0x4e, 0x59, 0x35, 0x20, 0xdc, 0x1f, 0xfc, 0x17, 0x4a, 0x7c, 0x19, 0x4b, 0x3a, 0xca, 0xbb, 0xb1, 0x3b, 0xfc, 0xe5, 0x3f, 0xc6, 0xeb, 0xfb, 0x56, 0x58, 0x37, 0x7f, 0xb5, 0x43, 0xe5, 0x20, 0xd4, 0x3d, 0x17, 0xa5, 0xe2, 0xd3, 0x57, 0x33, 0x6b, 0xe8, 0x72, 0xb4, 0x1a, 0x0d, 0xaf, 0x52, 0x3a, 0x56, 0x3b, 0x1d, 0x7c, 0x5c, 0x19, 0x16, 0xff, 0x8c, 0x7c, 0x4c, 0x36, 0xde, 0x97, 0x9d, 0xcc, 0xe1, 0xf0, 0xa7, 0xf6, 0xf2, 0x72, 0x1b, 0x01, 0x37, 0x7d, 0x03, 0x5e, 0xcb, 0x45, 0xd9, 0x3e, 0xf2, 0x33, 0x8f, 0xad, 0x83, 0x58, 0xff, 0x02, 0x20, 0xd3, 0xd6, 0xed, 0x4a, 0x41, 0xd2, 0xb6, 0x26, 0x4b, 0xc5, 0x4a, 0x88, 0xec, 0x01, 0x7c, 0x78, 0x2f, 0xe4, 0xb0, 0x20, 0x2b, 0xb9, 0x19, 0xc5, 0x8d, 0x75, 0xb3, 0x13, 0x39, 0x65, 0x58, 0x94, 0x0d, 0xfc, 0xe6, 0x71, 0xfb, 0xd3, 0xf3, 0xdf, 0x89, 0xba, 0x46, 0xef, 0x94, 0x76, 0xca, 0x86, 0x0a, 0xa8, 0xbf, 0xb3, 0x5a, 0x81, 0xb8, 0x24, 0xd0, 0xc9, 0x78, 0x7d, 0xe9, 0xf7, 0x76, 0x93, 0x47, 0xa1, 0xc0, 0xec, 0x0f, 0x4a, 0xd3, 0x4d, 0x8b, 0x65, 0xea, 0xac, 0x87, 0xfb, 0x97, 0x5e, 0xa3, 0xd7, 0x10, 0xdb, 0x6b, 0x00, 0x3c, 0x36, 0xdf, 0x4d, 0xf7, 0x14, 0x01, 0x96, 0xd0, 0x25, 0x87, 0x67, 0x2d, 0xae, 0x2c, 0x49, 0x2e, 0x18, 0xa7, 0xee, 0xf2, 0x47, 0xcf, 0xdd, 0xad, 0x25, 0xaf, 0xa1, 0x7b, 0x35, 0x03, 0x6c, 0x38, 0x66, 0x68, 0x53, 0x5f, 0x3c, 0x04, 0x6a, 0xc6, 0xd1, 0x48, 0xf2, 0xba, 0xf8, 0x99, 0xe5, 0xdd, 0x50, 0x2a, 0xc8, 0xa5, 0x26, 0xa7, 0x11, 0x59, 0x78, 0x16, 0x75, 0x55, 0x1d, 0x48, 0x41, 0x87, 0xe5, 0x6b, 0xff, 0xf1, 0xca, 0xa0, 0xc7, 0x32, 0x89];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("7fe18ff6290d4f098dd0c14dcc12cd62785db97769b5e373dcaa39d6"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("cf6b4fc391d28f668b771095f649c364e38fb2d372328e06a16ea1b603f10d2d"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("f6984149cbf5bf029b4bb247d6bc327a7f69ac7d48cbfa1385ac5e00f8c39dfd7c3ad3cc13e5b8ca3a0a8141d776eaa6"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("c998d5e931e9092aa45205459e44f328a9b59b0d1977e98ec502143122bfd33062ff7843d8c8d3c7eac1b27c58c05b40d3fba56cce4d81a7f0dfd1d2fc9d95a4"));
	let bytes = &[0x98, 0xe0, 0xdc, 0x09, 0x26, 0x56, 0x92, 0x9d, 0x29, 0xcb, 0x60, 0x1b, 0x78, 0xe0, 0xe4, 0x58, 0xe4, 0xda, 0x32, 0xc4, 0xae, 0x5d, 0x2a, 0x32, 0x98, 0x87, 0xc6, 0xd9, 0x46, 0x4d, 0xb6, 0x9a, 0x91, 0x5f, 0x65, 0x62, 0x4d, 0xd4, 0xd4, 0x53, 0x75, 0xb8, 0x7a, 0x84, 0x0b, 0x02, 0x10, 0xef, 0x6a, 0xda, 0x65, 0x64, 0x1a, 0x09, 0xef, 0x75, 0x99, 0x58, 0x9f, 0x20, 0xf3, 0xe6, 0x54, 0xfc, 0xb0, 0xc3, 0x12, 0x6f, 0x01, 0xaa, 0x43, 0xc3, 0x83, 0x75, 0x54, 0xd2, 0x0c, 0xb2, 0xca, 0x76, 0x43, 0x00, 0xa6, 0x9f, 0xb6, 0x86, 0xdc, 0x92, 0x65, 0x19, 0x82, 0xce, 0x6b, 0x4c, 0x88, 0x00, 0x30, 0x59, 0x3b, 0xcc, 0xab, 0xef, 0x71, 0x86, 0x9b, 0x71, 0x63, 0x12, 0xef, 0x76, 0x98, 0xac, 0x0d, 0xaf, 0x80, 0x06, 0x63, 0x67, 0xaa, 0x6f, 0x20, 0xdb, 0xba, 0x50, 0x45, 0x38, 0x37, 0x5a, 0x0b, 0xff, 0x3f, 0xd0, 0x4f, 0x17, 0x73, 0xf4, 0xc0, 0xda, 0xce, 0xd3, 0x3f, 0x85, 0x77, 0x53, 0x06, 0x2a, 0x6e, 0x70, 0xb5, 0xaf, 0xa2, 0x8e, 0xef, 0x8f, 0xb8, 0x54, 0x10, 0xe0, 0x11, 0x1b, 0x93, 0x78, 0x14, 0xde, 0xfc, 0xf0, 0x6d, 0x9f, 0x69, 0x41, 0x75, 0xcb, 0xcf, 0x00, 0xe2, 0xce, 0xef, 0x60, 0xd8, 0xc6, 0x44, 0x08, 0x59, 0x9c, 0xc9, 0x6e, 0x6a, 0xd3, 0xf4, 0x98, 0x3b, 0xc2, 0xd4, 0x51, 0x6b, 0x74, 0x6e, 0x98, 0x91, 0x11, 0xfe, 0x42, 0x60, 0x3b, 0x93, 0x22, 0x90, 0xb2, 0xfb, 0x8a, 0x68, 0x48, 0x27, 0xea, 0xa9, 0x68, 0xfe, 0x95, 0xcf, 0x16, 0x73, 0xea, 0x97, 0xd3, 0x31, 0x54, 0x21, 0x93, 0x41, 0xbd, 0x98, 0x5b, 0x4e, 0xec, 0x99, 0x5c, 0x33, 0x97, 0xad, 0x26, 0x8a, 0xb0, 0x33, 0x22, 0x13, 0x42, 0x3e, 0x33, 0x76, 0xa8, 0xf2, 0xd7, 0x29, 0x3f, 0x54, 0xe2, 0xda, 0x3e, 0xa8, 0xdc, 0xb9, 0x59, 0x81, 0x36, 0x10, 0x0b, 0xd8, 0x27, 0x75, 0x46, 0xd3, 0xf4, 0x2d, 0xdf, 0x4b, 0x0b, 0x0a, 0x89, 0x0d, 0x73, 0xbc, 0x10, 0x2d, 0x32, 0xdd, 0x52, 0xa1, 0x68, 0x3b, 0xcc, 0xe5, 0x68, 0xb8, 0x52, 0x60, 0x7a, 0xec, 0xf8, 0xb1, 0x2b, 0x92, 0x3f, 0x52, 0x5a, 0xd3, 0x8d, 0x19, 0x72, 0x69, 0x5a, 0x87, 0xf0, 0xe1, 0x78, 0xd3, 0xf1, 0x54, 0x55, 0x08, 0xe9, 0x9f, 0xfb, 0x5a, 0x8a, 0x56, 0x98, 0x56, 0x36, 0x71, 0xc6, 0xad, 0x1f, 0xb9, 0x59, 0x30, 0x52, 0x4e, 0x82, 0x2e, 0x71, 0x21, 0xb7, 0x7a, 0x24, 0x5b, 0xbf, 0x4f, 0x8e, 0x1c, 0x9e, 0x5a, 0xaa, 0x88, 0x9d, 0x55, 0xbe, 0x93, 0x01, 0xe7, 0x55, 0x35, 0x05, 0x31, 0x11, 0x9c, 0x44, 0x80, 0x2d, 0x8f, 0xcc, 0xb0, 0x78, 0x40, 0xb5, 0xcb, 0x5a, 0xd7, 0xb4, 0x17, 0xdf, 0x12, 0x0e, 0x77, 0x90, 0x9a, 0x3e, 0xd1, 0x51, 0x7c, 0x50, 0xf2, 0x65, 0x7c, 0x7e, 0x8d, 0xe4, 0x14, 0x28, 0xbd, 0x7f, 0x92, 0xd7, 0x8d, 0x7a, 0x7c, 0xf0, 0x1f, 0x64, 0x45, 0xdb, 0x99, 0x62, 0x57, 0x3b, 0xdb, 0x9d, 0x17, 0x52, 0x56, 0x46, 0x89, 0x2e, 0x55, 0x78, 0x43, 0x55, 0xb7, 0xd0, 0x0f, 0xc6, 0xf8, 0x5a, 0x51, 0x4c, 0x2c, 0x16, 0xfb, 0x14, 0x42, 0x9a, 0xe3, 0x7a, 0xf5, 0xe5, 0x88, 0xae, 0xd5, 0xf7, 0x6e, 0xb4, 0x47, 0x16, 0x65, 0x6c, 0x81, 0x72, 0x23, 0x98, 0x14, 0x86, 0xe6, 0x88, 0xf0, 0xe8, 0x94, 0x59, 0xa9, 0x2a, 0xee, 0x28, 0x5c, 0x43, 0x97, 0xea, 0xbe, 0xb9, 0xfe, 0xa6, 0x35, 0xad, 0x7a, 0xf5, 0xc8, 0xf8, 0x5c, 0xa3, 0x2f, 0x9c, 0xbe, 0xf0, 0x67, 0x33, 0xcf, 0x3a, 0x13, 0x5d, 0x3e, 0x9c, 0xad, 0x58, 0xb9, 0x7f, 0xd2, 0xcc, 0x7b, 0x96, 0xaf, 0xc6, 0xae, 0x5f, 0xab, 0x75, 0x38, 0xe6, 0x20, 0xd7, 0x12, 0x1e, 0xb6, 0x90, 0x15, 0xa9, 0x35, 0xca, 0xa0, 0xdc, 0x5b, 0xad, 0x53, 0xb6, 0xcc, 0x3c, 0x6e, 0x99, 0x9d, 0x1a, 0xef, 0x24, 0x31, 0x12, 0x81, 0x2d, 0x60, 0x90, 0x30];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("90718446b1912101a1b73419507d784a71782f8a5e4190ab970ec5b9"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("694da5cc730c51aa1ed5657621009bda9e833ae6f87a84d8af46b6bccc5d21d0"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("bfab1d6beee4d660a29bcd883c646e5db44babad19b406fe5fd6c8cd431e0595a7f15e959fd608ed1c76f9dc9092d01b"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("f6538ce878c97d3cc65cb6730c173600953793e897dbe4ddd1d1adb96205914ddb822424ec3ec82f0018ea32345b3f9a194024f62d343e48cb4626fa9fe1c9a9"));
	let bytes = &[0x7a, 0x0b, 0x93, 0x0f, 0x48, 0x24, 0x10, 0x3f, 0x04, 0x5a, 0xf1, 0xe9, 0xab, 0x6f, 0x31, 0x53, 0xe9, 0x2e, 0xf9, 0x26, 0xc4, 0xba, 0xd5, 0xc7, 0x5e, 0xbc, 0xfd, 0xd5, 0xc7, 0x11, 0x98, 0xd5, 0xc3, 0x4b, 0x66, 0xe5, 0x0f, 0x76, 0x1d, 0x33, 0xf4, 0xec, 0x44, 0x10, 0x23, 0x6e, 0xe5, 0x81, 0xba, 0xa4, 0x28, 0xb0, 0xc5, 0x71, 0x4b, 0x9c, 0xae, 0xd2, 0x56, 0xc2, 0xdf, 0x89, 0x8b, 0x4a, 0x83, 0x38, 0x31, 0x0f, 0x00, 0x17, 0x39, 0x6f, 0xc2, 0xc2, 0x68, 0x37, 0x60, 0xd1, 0x80, 0xfd, 0xec, 0x96, 0x64, 0x2b, 0x39, 0x08, 0x74, 0x73, 0x49, 0xc9, 0xc1, 0xa3, 0x88, 0xe4, 0x1a, 0x1a, 0x15, 0x11, 0x86, 0xc9, 0x82, 0xa1, 0x6f, 0x56, 0xa2, 0x0f, 0x67, 0x62, 0xe4, 0x1a, 0xc8, 0xf1, 0x27, 0xed, 0x2e, 0xd5, 0xcd, 0xa3, 0xbe, 0xf0, 0x5e, 0x77, 0x6a, 0x67, 0x76, 0x53, 0x7d, 0xb2, 0xd9, 0x55, 0x89, 0x2b, 0xee, 0x56, 0xf9, 0x69, 0xda, 0x5d, 0xae, 0x3c, 0x06, 0x10, 0x3a, 0xcf, 0x0b, 0x67, 0x60, 0xf9, 0x98, 0x9d, 0x7f, 0xd6, 0x4d, 0x96, 0x69, 0x0f, 0xab, 0x7e, 0xd1, 0x2a, 0x39, 0x2e, 0xcd, 0xe9, 0x12, 0x3a, 0x19, 0x44, 0xed, 0x03, 0x8f, 0x16, 0xdb, 0x71, 0x9c, 0xcb, 0x80, 0x91, 0x7a, 0xf8, 0x7a, 0xd3, 0xa1, 0x08, 0x70, 0xd8, 0x30, 0x27, 0xdc, 0x43, 0xfe, 0xf5, 0xdc, 0x37, 0x8a, 0xa0, 0xca, 0x6d, 0x83, 0xe3, 0x1e, 0x3f, 0xdb, 0x96, 0x6a, 0x15, 0x91, 0x7d, 0x06, 0xd3, 0x25, 0x30, 0x56, 0x2d, 0x25, 0xd0, 0x34, 0x5f, 0xde, 0x67, 0x7f, 0x35, 0xca, 0x09, 0x47, 0x88, 0xb9, 0x38, 0x2d, 0x2f, 0x6f, 0xf5, 0xb3, 0xd0, 0x05, 0x6d, 0xa0, 0x62, 0xe2, 0x2f, 0x06, 0x0f, 0x90, 0xa0, 0xff, 0x9e, 0xbf, 0x7a, 0x37, 0xdf, 0xe9, 0x0f, 0x8c, 0xb3, 0xe1, 0xbd, 0x70, 0xa7, 0x7f, 0x44, 0xe3, 0xc3, 0x89, 0x56, 0xb1, 0xb2, 0xa7, 0x2f, 0x1b, 0xaa, 0xa4, 0x70, 0x78, 0x53, 0xfd, 0x7a, 0xe7, 0x30, 0xc3, 0x40, 0x6e, 0xe1, 0x4f, 0x44, 0x96, 0xea, 0x07, 0xab, 0x58, 0x4e, 0xf0, 0x03, 0x2f, 0x51, 0x32, 0xcb, 0xb6, 0xed, 0x19, 0x72, 0x5c, 0x73, 0x65, 0xd1, 0x5e, 0xeb, 0x10, 0x5b, 0xe3, 0x2f, 0x9b, 0xbc, 0xc5, 0xb3, 0x27, 0xcb, 0xac, 0xd0, 0xe1, 0xf1, 0xf2, 0x23, 0xbc, 0x9f, 0x6a, 0x30, 0x83, 0x53, 0xc8, 0x17, 0x05, 0x1b, 0xe4, 0xa8, 0xad, 0xc8, 0x25, 0x65, 0xc4, 0x9b, 0x79, 0x32, 0xc7, 0x2e, 0xad, 0x5b, 0xd0, 0x8c, 0xf5, 0xcf, 0x11, 0x6c, 0xe5, 0x08, 0x67, 0x2f, 0x24, 0xc7, 0xc8, 0x1f, 0x8a, 0x91, 0xcd, 0x7b, 0xb2, 0x47, 0x68, 0x2a, 0xd0, 0x97, 0x90, 0x0e, 0x18, 0x1e, 0x16, 0x4a, 0xc1, 0xca, 0xe4, 0x5a, 0x6e, 0xbc, 0x4d, 0xee, 0xdf, 0x24, 0x9f, 0xe0, 0x8b, 0x6a, 0x8d, 0x68, 0x8f, 0xa6, 0x5b, 0x61, 0x78, 0xb8, 0x47, 0x7c, 0xc5, 0x42, 0xad, 0xf0, 0xcd, 0x77, 0x77, 0x4e, 0xc1, 0x35, 0x1e, 0xf0, 0x40, 0x13, 0xb1, 0xdb, 0xb5, 0x72, 0xa5, 0xe4, 0x27, 0xd2, 0x05, 0xd8, 0xb2, 0x07, 0x34, 0x3c, 0xdc, 0x4a, 0xfd, 0x41, 0x73, 0x42, 0x52, 0x19, 0x78, 0x73, 0x58, 0xb5, 0x9c, 0x59, 0xa6, 0x6e, 0xee, 0xb0, 0x32, 0xc1, 0x92, 0x83, 0xff, 0x2f, 0xde, 0x49, 0x8b, 0xec, 0xab, 0x9e, 0xd3, 0x0a, 0x54, 0xfb, 0xfc, 0x6e, 0x24, 0xa5, 0xd6, 0xc1, 0x63, 0xfe, 0x2c, 0xb4, 0xeb, 0x79, 0xaa, 0xaf, 0xbe, 0xd4, 0xc5, 0x27, 0x32, 0x64, 0xe9, 0x08, 0x53, 0x92, 0x1e, 0xc6, 0xb3, 0xfc, 0xf9, 0x0e, 0xc7, 0x30, 0x47, 0xe5, 0x1c, 0xc4, 0x39, 0xd6, 0xbf, 0xb5, 0x4b, 0x8d, 0xad, 0xb5, 0xab, 0x13, 0x14, 0x49, 0xb4, 0xa3, 0x7e, 0x3d, 0x46, 0x41, 0x19, 0x83, 0x66, 0xb7, 0x8e, 0x0f, 0x55, 0xea, 0x41, 0x5c, 0xea, 0x7b, 0x75, 0xd4, 0xad, 0x04, 0x77, 0xe1, 0x3b, 0x9a, 0xea, 0xf6, 0x57, 0x3c, 0xc1, 0xfd, 0x99, 0x8f, 0x3b, 0x3e];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("c07da0d972457de1c57ffa9448b8b8e08e0a6add06e3ce15989e9da2"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("bda4cf80b9d0aa53050a14196a5f224f0200fb33c6518d56092544641bccf9e0"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("b512752d1610605aff690d57c2702b5d6a55ae8dc3cf8a4ac92a296f8d73df1876bdc8bbdb87d53ae6b00c721c061c29"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("b57e74e9ff6de9a88c3c8bd9c2c182573d8d7cce3c18eecf3d5bcc52ab8d8563a89626ba211bc46379f38efbfcd3a19b2c7939e23dc9ffff8dc573c831121c8d"));
	let bytes = &[0x1f, 0xd5, 0x28, 0x05, 0x54, 0x17, 0xba, 0xdf, 0xd6, 0xbd, 0xfa, 0x3c, 0x3b, 0xf2, 0xe3, 0xa8, 0x90, 0x26, 0x8b, 0xd9, 0xfa, 0x12, 0x5f, 0xf0, 0x6f, 0x8b, 0xe9, 0xaf, 0x74, 0xb1, 0xb2, 0x27, 0x2b, 0x55, 0xaf, 0xc7, 0xcc, 0xed, 0x9e, 0xec, 0x8a, 0x98, 0x5b, 0x7d, 0xd3, 0x40, 0x95, 0x66, 0x11, 0x90, 0x68, 0x05, 0xca, 0x9e, 0xc6, 0x99, 0xd6, 0xd5, 0xf8, 0x08, 0x78, 0x9d, 0xbb, 0xd2, 0x47, 0xe9, 0xaf, 0x98, 0x11, 0x9a, 0x49, 0x97, 0x12, 0x13, 0x43, 0xb3, 0x57, 0x7e, 0x06, 0x07, 0x9d, 0x1d, 0xc3, 0x56, 0x29, 0x19, 0xe7, 0x75, 0x4b, 0xcd, 0xbd, 0x42, 0x8b, 0x95, 0x46, 0xdd, 0x7a, 0x12, 0x4d, 0x60, 0x35, 0x78, 0xe1, 0x66, 0x50, 0x63, 0xa7, 0x5f, 0xfd, 0x60, 0xd3, 0x7b, 0x3d, 0x05, 0xc5, 0x0f, 0xd1, 0x12, 0xfc, 0xf3, 0xc4, 0xf6, 0xf2, 0xc4, 0xed, 0x72, 0x2e, 0x85, 0x59, 0x21, 0x07, 0x6b, 0x20, 0x80, 0xf0, 0x5d, 0xa2, 0x1e, 0x98, 0x74, 0x6a, 0xd4];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("3b81325602cfed378fd7e306dfc2b83409d1602281dd9d6f20086202"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("5f95e80fa8dacddf7251e6c4a67bd3706372012c6271ed718f026357dc5f1ddd"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("d5769628812087388984605bf0ac9afb2e37ac5442ae3fb96bc4531222cb491a9fb8bd6f46677112299234d8260d5ffb"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("18665592ed108f2d5dbf07d516636c4b7329e3d4ec37adbc13d841832e0359e9b66153256aa84c65649a1079046d2255b3f71d24545f46d79dca4727eb6e5072"));
	let bytes = &[0x41, 0x19, 0x50, 0xc6, 0x3d, 0x1a, 0xc9, 0x3b, 0x57, 0x16, 0xca, 0x08, 0x9c, 0x4c, 0x5d, 0xf4, 0xa9, 0x67, 0x86, 0xc5, 0xa7, 0xbc, 0x78, 0xc9, 0x32, 0x73, 0x74, 0xe6, 0xd0, 0x2d, 0xbd, 0x26, 0xb8, 0x9e, 0xf5, 0xd2, 0x01, 0xfd, 0xbe, 0x2d, 0xc6, 0x96, 0x6a, 0x12, 0xb9, 0x9b, 0xa3, 0x85, 0x84, 0xe4, 0xdf, 0xd4, 0x1d, 0x62, 0x25, 0x77, 0xd4, 0xe5, 0x66, 0x1b, 0x38, 0xad, 0x9e, 0xd7, 0xb5, 0xfd, 0xad, 0xf5, 0x09, 0xf6, 0xd1, 0x58, 0xc3, 0xb5, 0x5a, 0x32, 0x89, 0x40, 0xb7, 0x50, 0x02, 0xa5, 0xba, 0x15, 0xe6, 0xe4, 0x71, 0xef, 0x8b, 0x98, 0xa9, 0xa0, 0x85, 0x9d, 0x07, 0x43, 0xc2, 0xf1, 0xb1, 0x78, 0xe2, 0x93, 0x8a, 0x72, 0x7a, 0x06, 0x3f, 0x62, 0xd2, 0xc2, 0x86, 0xc3, 0x55, 0xe4, 0x7c, 0xe7, 0x5d, 0x4b, 0xf1, 0xde, 0x46, 0xe6, 0x82, 0xcb, 0x2b, 0x98, 0xc2, 0xb9, 0xd9, 0x05, 0x2e, 0x8e, 0x92, 0x4b, 0xe6, 0xb0, 0xa1, 0xcf, 0xeb, 0x8b, 0x36, 0xc6, 0x97];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("3813bca15f34f1be37ab45f64565415b9db0945392f36f7ce9213e3d"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("662f6d41dc9130cd3516403b653dc891af967d2db817562132bf4d6e5f5e52f6"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("492054f83c9137ae38b757bfbb74353495655369be5bc17931dbdab4471fac785863670912e1f2d7edbacdc1a3a92a75"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("479e3261e7a86032d937e53de52b5f69b759f2249195c2763e7f1579bf287e13a7e877a38033ceb12c44af19338f4ee71f5adf970017fdd2e727acfffeecb24f"));
	let bytes = &[0x2e, 0x4e, 0x1a, 0x73, 0x4c, 0x35, 0x49, 0xe0, 0x2b, 0xae, 0xaa, 0xec, 0xae, 0x6b, 0xf2, 0x70, 0x70, 0xe3, 0xb0, 0x06, 0x91, 0xa5, 0x4d, 0xa3, 0xd7, 0x4a, 0xb0, 0x06, 0x61, 0x71, 0x87, 0x91, 0x77, 0xb9, 0x68, 0x82, 0x11, 0xd8, 0x59, 0x26, 0xf6, 0x23, 0x60, 0x03, 0x40, 0x01, 0x34, 0x00, 0x74, 0x70, 0xf7, 0xa1, 0x37, 0xcc, 0xd5, 0x3e, 0x42, 0xc6, 0x65, 0x15, 0x8f, 0x5f, 0x62, 0x7b, 0x3a, 0xec, 0x97, 0x41, 0x56, 0x01, 0x6e, 0x2c, 0xae, 0x79, 0x46, 0x7b, 0xec, 0xf1, 0x56, 0x79, 0x94, 0x7b, 0xea, 0x4b, 0x8a, 0x7e, 0x7a, 0xe3, 0xf3, 0x27, 0xc8, 0x6c, 0xac, 0x32, 0xf4, 0x4c, 0xe3, 0x9f, 0xd6, 0xbb, 0x03, 0xf2, 0x52, 0x50, 0x3f, 0x5f, 0x65, 0x6e, 0x4b, 0x2a, 0x8e, 0x39, 0x28, 0x15, 0xd9, 0xa9, 0xad, 0x7d, 0x2c, 0xe0, 0xfd, 0x38, 0x25, 0x0b, 0x4d, 0x4f, 0xd2, 0x01, 0x37, 0x34, 0x0c, 0xa7, 0xd9, 0x5a, 0xd8, 0x4c, 0x2f, 0x25, 0xd0, 0x3a, 0x4e, 0x55, 0x0e, 0xeb];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("e3ae54c42b0b65d7f9e1c5fe364ecf74259c47b1785fb79f609d1efe"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("ffc0aa4e56a5e4150bfa0f7137a0018b623390461a5381ac2aa13cf55e7bc66c"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("fd12af47d13640573c1a8ecd1c11e77feced6a116811ae4f9a5445c118960cfac28ead6e48327d596e0c47a5aeb23814"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("b1235625c480d8af5a2bdb89443f8b646752831cba9993d34dba4a37586ff9e1f89dade76c0e5c256ff3719f821b9d04d1458baede319f107b70568f0af5a2ff"));
	let bytes = &[0x79, 0x62, 0x84, 0xbf, 0x09, 0x14, 0xce, 0x01, 0x38, 0x02, 0xc7, 0x99, 0xd4, 0x01, 0xd4, 0xce, 0xf6, 0x3f, 0x56, 0x6d, 0x49, 0x03, 0xb1, 0x24, 0x14, 0x5c, 0xa3, 0xe6, 0x7a, 0x41, 0x7d, 0x4c, 0xc8, 0xd5, 0x48, 0xa5, 0x40, 0xb9, 0x15, 0x7f, 0x24, 0xf3, 0xfd, 0xaf, 0x64, 0x1b, 0x79, 0xbf, 0x86, 0xf3, 0xb3, 0xd5, 0x71, 0xe4, 0x04, 0x11, 0x51, 0xaa, 0xe1, 0x70, 0xf4, 0x1d, 0xa5, 0xbd, 0x18, 0x20, 0xc8, 0x5b, 0xfc, 0x73, 0x07, 0x39, 0x59, 0xb5, 0x86, 0xfb, 0x05, 0xdf, 0x89, 0x64, 0x4d, 0x94, 0x88, 0x08, 0x65, 0x50, 0xec, 0xa9, 0x44, 0xc7, 0x76, 0x28, 0x54, 0xe6, 0x40, 0xc1, 0xbe, 0xe8, 0xde, 0x32, 0xda, 0x8a, 0x55, 0x2f, 0x45, 0x62, 0x31, 0x4d, 0x96, 0x0f, 0xc8, 0x2d, 0x1a, 0x86, 0x26, 0xea, 0x5e, 0xa4, 0x01, 0x42, 0x09, 0xf9, 0xe0, 0x56, 0xca, 0x15, 0x4c, 0x00, 0x3e, 0x75, 0x99, 0x78, 0x1d, 0x33, 0xf6, 0xd1, 0x81, 0x9c, 0xe5, 0x0b, 0x43, 0x0c, 0xce, 0xe2, 0x8b];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("a2138aadf41c05d9d5a30079d8ab901dc5397bb1c814ed6de51c964a"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("adac761670b7756fffb578b9a4083b6d0f5fc4f98344a900f7006c85c21b90a2"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("b35788aeed035842be464370ce007801844de3e9b1fb86473f5e9e423fb1d193d827679345c26fb504d0afc7bc4f1a95"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("f5f6f7c58a7be1167e99aa55fe34f181de320bbbd33907499f49d4e75670febcb41ae6d2fde68ca2acce251b4165791e59ea10ab1d2d3c62d88280f2e183439c"));
	let bytes = &[0xd3, 0x1e, 0x6e, 0x5c, 0x3e, 0xe5, 0xd4, 0x2b, 0x7d, 0x02, 0xbd, 0x7b, 0xfd, 0x5d, 0x3e, 0xef, 0x61, 0xeb, 0x05, 0x44, 0xae, 0x44, 0x7a, 0xee, 0xd9, 0x28, 0x1d, 0x33, 0x75, 0x70, 0xa4, 0x0f, 0x4b, 0x03, 0x37, 0xc5, 0xa0, 0x1c, 0xbb, 0x76, 0x13, 0xae, 0x46, 0x5d, 0xcd, 0x6a, 0x70, 0x1a, 0xf0, 0x71, 0x7d, 0xf1, 0xf1, 0x5c, 0xf5, 0xb3, 0x7f, 0x5e, 0x3d, 0xab, 0x4e, 0xba, 0x25, 0x74, 0xe4, 0xdc, 0x2c, 0xd4, 0xb9, 0x12, 0x11, 0xc1, 0x44, 0xb9, 0x3f, 0x13, 0xd5, 0x75, 0xfc, 0x92, 0x2a, 0x08, 0xb2, 0xf2, 0x60, 0xd1, 0x19, 0xe3, 0xc8, 0x17, 0x80, 0x22, 0x45, 0x2d, 0xd1, 0x14, 0xa6, 0x30, 0x26, 0x8c, 0x83, 0xf5, 0x2b, 0x33, 0xb3, 0x38, 0x31, 0x7b, 0x5e, 0x63, 0xa2, 0x73, 0x6b, 0x84, 0xd2, 0xb2, 0x56, 0x86, 0xe6, 0xab, 0xb4, 0xbe, 0xfa, 0xc1, 0x74, 0xf8, 0x20, 0x87, 0xf6, 0xde, 0xad, 0xc5, 0xc1, 0x47, 0x79, 0x9c, 0x41, 0x67, 0x0b, 0xbf, 0x7c, 0x96, 0xb3, 0x18, 0xd9, 0x09];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("de3e1be08b66bcdc9679ce9ee5b8e1b3d7e0a1339737174bf243d5a9"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("1534c435e661ef2ae10308d266a4a17a4376ac46314e1bfd8514814b820d403b"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("3ec7429777cd6391a99b35a5f99e9b7455ad3c7a278c8c323158cc12904e2bf1a0b14394dd951cb8bd235bf20951bbd3"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("cb8c15fd4bb7e06eef974ce52fe8016c4f0caa4c8643741d1bb8a9cdb9dc26b7bdf5b7f76df89098bd6f77a72de130e3dc559f384ca454b8c5173249eaac0bd0"));
	let bytes = &[0x9d, 0xec, 0xe7, 0xf0, 0x90, 0x39, 0xd1, 0x92, 0x7f, 0x8f, 0x93, 0x52, 0xa0, 0x47, 0x02, 0xe4, 0x32, 0x53, 0x3d, 0xef, 0xd6, 0x12, 0xe9, 0x0d, 0xbf, 0xac, 0xb3, 0x66, 0xc0, 0x22, 0x0d, 0x06, 0x59, 0xa4, 0xf7, 0xa8, 0xd9, 0x24, 0xee, 0x89, 0x29, 0xf5, 0x87, 0x75, 0x77, 0x0c, 0x79, 0xe5, 0x4a, 0xf6, 0xe6, 0x5d, 0x91, 0x50, 0x10, 0x31, 0x12, 0xfa, 0x23, 0xdd, 0x58, 0xef, 0x34, 0x46, 0x85, 0x47, 0xc8, 0x2b, 0xee, 0x1e, 0xb2, 0xa9, 0xc8, 0x97, 0x85, 0xf7, 0x11, 0xd6, 0x2c, 0xb5, 0x3d, 0x4f, 0x9d, 0x14, 0x03, 0xfd, 0xb0, 0xe1, 0xb2, 0x48, 0xbc, 0xe2, 0xdc, 0x9d, 0x8e, 0x88, 0x92, 0xdd, 0x9a, 0x6f, 0xba, 0x97, 0x3d, 0xb3, 0x31, 0xeb, 0xb0, 0x1a, 0xec, 0xe4, 0xd0, 0x08, 0x54, 0xe4, 0xcc, 0xe9, 0x21, 0xa0, 0x16, 0x75, 0xa4, 0x33, 0x61, 0x98, 0x16, 0xf8, 0x6e, 0x35, 0x38, 0x91, 0xf4, 0x79, 0x85, 0xd3, 0xc4, 0xf6, 0x68, 0xab, 0xcd, 0x57, 0x8d, 0xdb, 0x66, 0x12, 0xe1, 0x04, 0xec, 0x3c, 0x89, 0xc5, 0xce, 0x01, 0x17, 0x84, 0x64, 0x51, 0x31, 0x77, 0x3d, 0x64, 0x3e, 0x45, 0xa2, 0x10, 0x53, 0xe5, 0x3e, 0x2d, 0xac, 0xf4, 0x8a, 0x8e, 0x47, 0x7e, 0x47, 0x40, 0x3e, 0xdf, 0xe0, 0x99, 0x58, 0x50, 0x94, 0x27, 0xcc, 0xa1, 0x82, 0xe4, 0xa4, 0xdc, 0x82, 0x45, 0xc6, 0x23, 0x11, 0x6a, 0xa0, 0x38, 0xf1, 0x01, 0x14, 0xe7, 0x74, 0xbb, 0x93, 0x44, 0x6e, 0x46, 0x98, 0x32, 0x7e, 0x3f, 0xa1, 0xe1, 0x72, 0xbd, 0x91, 0x90, 0xd0, 0x97, 0x58, 0x23, 0x2c, 0xbc, 0x66, 0x22, 0xda, 0x32, 0xda, 0x70, 0xd2, 0x68, 0x6f, 0xbe, 0x25, 0x06, 0xb3, 0x55, 0x41, 0xf3, 0x83, 0xb0, 0xdb, 0xbc, 0x89, 0x06, 0x4a, 0xe5, 0xcd, 0xc2, 0xd4, 0xee, 0x1f, 0xe6, 0xb3, 0xc9, 0x67, 0xb5, 0x8a, 0x6e, 0xc7, 0xd5, 0x58, 0x3f, 0x13, 0x95, 0xb4, 0xea, 0x99, 0x93, 0x35, 0xca, 0x1f, 0xd8, 0x0f, 0x09, 0x8a, 0x43, 0x16, 0x08, 0xee, 0xae, 0xfa, 0x6e, 0x82, 0x12];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("1a80f69c8d2728da37fb0f914dffbcdd03357a85e1fda4b5105fa5e8"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("b23b1a69a34c476eb806b923ac0db10056835c036f80d2af34d288635bfec0ee"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("f62171a427179f3a1748867b8866ccf5c649568e39537344d8e525ea1bf9fa8f3a27ac146051ff5c228862b15c28fd9b"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("cbeae31bbcc04ba8ddcc6f20b0a529faf4fe64d47333b5cfb24de95bd5bda006a1f1ddd6b04e96ed2866efa7c1ac344b84e68fb06b442baa4068face2bf83393"));
	let bytes = &[0xa3, 0xb5, 0xa4, 0x03, 0x93, 0xb4, 0x6d, 0x7f, 0xef, 0x57, 0x2c, 0xc2, 0x10, 0x0a, 0xe6, 0x64, 0xe2, 0xc9, 0x05, 0x51, 0xdc, 0x95, 0xcb, 0x73, 0x81, 0x41, 0x5f, 0x6f, 0x7e, 0x92, 0x43, 0xab, 0x9d, 0xf9, 0x33, 0x8e, 0xe3, 0x01, 0x35, 0x77, 0xac, 0x6d, 0xee, 0x84, 0xec, 0x2c, 0xcc, 0xcb, 0xc4, 0x08, 0x48, 0x2b, 0x38, 0xc2, 0x4a, 0x60, 0x05, 0x77, 0xc0, 0x0f, 0xf8, 0x41, 0x67, 0x87, 0x69, 0x12, 0xd9, 0x92, 0x36, 0xd0, 0x85, 0x88, 0x5c, 0xa5, 0x30, 0x94, 0xa0, 0xbb, 0x65, 0x32, 0x32, 0xe5, 0x60, 0x1a, 0x5b, 0xac, 0xe0, 0xda, 0xd1, 0xe0, 0xf0, 0x40, 0x88, 0x18, 0xba, 0x3d, 0xde, 0x2f, 0xb8, 0x3c, 0x1c, 0x14, 0x6c, 0xd1, 0xc1, 0xb5, 0x09, 0x23, 0x37, 0x07, 0x49, 0xc1, 0xa7, 0x3a, 0x6b, 0xf7, 0xa0, 0xfd, 0x76, 0x75, 0xc6, 0x23, 0x6f, 0xda, 0xf3, 0x01, 0x1d, 0x2e, 0xa8, 0x80, 0xb6, 0xa5, 0x7b, 0x08, 0xd5, 0x36, 0xaf, 0xd6, 0x92, 0x3e, 0x34, 0x7c, 0x60, 0x0c, 0x13, 0x6f, 0xc0, 0x60, 0x6f, 0x3b, 0x9c, 0x7c, 0xb1, 0x17, 0xa2, 0x1e, 0xfb, 0xb6, 0x07, 0x2f, 0xb3, 0x0c, 0xb0, 0xfa, 0xaf, 0x83, 0xa2, 0x37, 0xf1, 0x5a, 0xb0, 0x78, 0xb1, 0x8c, 0x42, 0x51, 0xf5, 0x27, 0xb8, 0x52, 0x61, 0x1f, 0xbe, 0xcf, 0x27, 0x56, 0x4e, 0xed, 0xc1, 0x50, 0x15, 0x65, 0xcb, 0x28, 0x5e, 0x48, 0x63, 0x6f, 0x09, 0x9d, 0x71, 0x37, 0x25, 0x8e, 0x7c, 0xac, 0xd8, 0x25, 0x65, 0xbb, 0x92, 0xb4, 0x12, 0xde, 0x19, 0x6e, 0xf8, 0x97, 0xee, 0x77, 0x09, 0x60, 0x81, 0x27, 0x09, 0x12, 0x34, 0xe5, 0xce, 0xc0, 0x0f, 0x50, 0xba, 0x25, 0xff, 0xa8, 0xe3, 0xa7, 0x75, 0x6a, 0xd0, 0x6b, 0x8c, 0x72, 0x9b, 0x33, 0xb4, 0xa5, 0xfe, 0x46, 0x1a, 0x85, 0x16, 0xd7, 0x62, 0x8e, 0xb4, 0x0c, 0x4a, 0x8e, 0xba, 0x33, 0x5d, 0x08, 0x36, 0xff, 0x39, 0xb5, 0x46, 0xd5, 0xbf, 0x12, 0x3e, 0xe0, 0x6c, 0xf9, 0x56, 0xdb, 0x58, 0x5d, 0x05, 0x2f, 0x2a, 0x14, 0x6a, 0x09, 0xe1];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("87d2302332fd65d6b669b518ae21cb58fb82a8c348f4ce26b101f0b1"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("d297db36a976ce35093765b8f7ea70d477a779345ccb155a5778b91012772896"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("b7a283c5a7f8b25f122f1c0948f9b06389b72e9d2ad00ff2cc125bd2a9cb9e1dc10033ba365554ef1fc525b16b43a7e7"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("184aca48431d59b545432cf9e712dc149648b93902fc85e5050956be82e8d824b1ba90f42212e5c4830c003a8f3a7313d035cbf1609470d0054890c67a3396ba"));
	let bytes = &[0x1f, 0x53, 0x2c, 0x0b, 0x50, 0x42, 0x31, 0x84, 0x83, 0x3e, 0xae, 0x6d, 0x1e, 0x26, 0xc6, 0x7d, 0x12, 0xdf, 0x27, 0xde, 0x17, 0x67, 0xc2, 0x0b, 0xf2, 0x59, 0x1b, 0xef, 0x50, 0x84, 0xe4, 0xe3, 0xff, 0x66, 0x62, 0x70, 0x5d, 0x89, 0xed, 0xf6, 0x5b, 0x51, 0x0a, 0x85, 0x94, 0x5c, 0x46, 0x03, 0xbd, 0x8d, 0x4a, 0x1f, 0x21, 0x07, 0x09, 0x1a, 0xb7, 0x5c, 0x50, 0x51, 0x3c, 0xee, 0x63, 0xbb, 0xa4, 0x50, 0x20, 0x1b, 0xeb, 0x5e, 0x0a, 0xaf, 0x55, 0xf4, 0x67, 0x53, 0xb9, 0xfd, 0xc9, 0x83, 0x23, 0xc5, 0x20, 0x6a, 0x71, 0x36, 0x2c, 0x77, 0x10, 0x62, 0xd4, 0x93, 0x9d, 0xfa, 0xf8, 0xf5, 0x2f, 0xd0, 0xf3, 0xa0, 0xd2, 0xfc, 0x3f, 0x94, 0x30, 0x4d, 0x8a, 0x47, 0x14, 0xea, 0xa1, 0x01, 0xea, 0xe3, 0x8e, 0xc4, 0x3e, 0x16, 0x17, 0x8b, 0xc5, 0x00, 0xe5, 0x6f, 0x5a, 0xea, 0xe5, 0xb3, 0x00, 0x6c, 0xdd, 0x69, 0x06, 0x91, 0x0c, 0x3c, 0xe7, 0x11, 0x23, 0x96, 0x2a, 0xee, 0x3b, 0x15, 0xfb, 0x16, 0x79, 0xa9, 0x27, 0x33, 0x3c, 0xb5, 0xf7, 0x30, 0xfb, 0x61, 0xc5, 0x23, 0x99, 0x3d, 0x81, 0x3f, 0x47, 0xbd, 0xdf, 0x7c, 0xdf, 0xd7, 0x61, 0x49, 0x7e, 0xb6, 0xe8, 0xac, 0x51, 0x4d, 0x7f, 0x01, 0xb5, 0xd1, 0x7a, 0x3e, 0x2d, 0x6d, 0xe6, 0x8f, 0x35, 0xa7, 0xd9, 0x2f, 0xc9, 0x4c, 0x4f, 0x8a, 0x65, 0xde, 0x4e, 0xfe, 0xa6, 0xf4, 0x05, 0xda, 0x7b, 0x3a, 0x7a, 0xc6, 0x0b, 0x2e, 0x92, 0x52, 0x15, 0x8c, 0x35, 0xdc, 0xd9, 0x98, 0x07, 0x37, 0x99, 0x86, 0x5b, 0x4d, 0x6c, 0x49, 0x5b, 0x64, 0x59, 0xa9, 0xe0, 0x1e, 0xbc, 0x48, 0x2c, 0x53, 0xf9, 0x56, 0xdd, 0x7b, 0xcf, 0x03, 0x74, 0xf5, 0x38, 0x47, 0x00, 0xb3, 0x44, 0xd4, 0xbc, 0x02, 0x35, 0x3b, 0xe7, 0xf1, 0x23, 0x07, 0x5d, 0x6c, 0xc3, 0xb6, 0x96, 0xa3, 0xaa, 0xb9, 0xb2, 0xca, 0x53, 0x91, 0xdf, 0x24, 0x8a, 0xbc, 0xce, 0x65, 0x07, 0x5b, 0xd5, 0xd0, 0x44, 0xaf, 0x3a, 0xf0, 0xf2, 0x3d, 0xca, 0x32, 0x26, 0x92];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("a5f298e0d87b9b6866deb59677dc8b7cdbbe61048c6b494f5ef38d17"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("88f93c7bc1c923eb07333d88d7d34dc5a90c9b8b85f6bc2c26924c5ff1a075fb"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("1c8f16165c732d3616ff65003bf6c0e841d9f3b7a37b4ec2f83f1128136c063f79b40d5fbba1d0ba629a82d6c5dcf432"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("71d13f1038f431e05187da6413a5e0279b1e24437bcf8e4e56b8de814a3a220ebcf5ae4e80de988fd08b2475f441cee2a959f70d26e645c72ef0d9acacec4330"));
	let bytes = &[0x5d, 0xdc, 0x67, 0x57, 0x91, 0xeb, 0x7c, 0x44, 0x29, 0xd3, 0x73, 0xd1, 0x12, 0xde, 0x90, 0x4a, 0xa0, 0x85, 0x5e, 0x43, 0x2b, 0x43, 0xbe, 0xf7, 0xdb, 0xe4, 0xf6, 0xb5, 0xf1, 0xde, 0x13, 0xc4, 0xbb, 0x61, 0x82, 0xb5, 0x8b, 0x89, 0xa9, 0x5a, 0x9b, 0xa3, 0x2e, 0xa8, 0xe8, 0x3b, 0x9a, 0x28, 0xfc, 0xcc, 0x82, 0xaf, 0x20, 0x78, 0xfc, 0x02, 0x8b, 0x00, 0x56, 0xba, 0x9a, 0xbf, 0xde, 0x92, 0xee, 0xd8, 0x5a, 0xd6, 0x5a, 0x6c, 0xb0, 0xf6, 0x22, 0xa1, 0x0e, 0x79, 0xfc, 0x50, 0x57, 0x58, 0x2e, 0x88, 0xa5, 0xae, 0xaa, 0x9a, 0x86, 0xbc, 0xf8, 0x29, 0x95, 0xcf, 0x9f, 0x72, 0x3f, 0x64, 0x14, 0x8f, 0x1a, 0xa1, 0xd6, 0x80, 0x88, 0xba, 0xd8, 0x4c, 0x4f, 0xbd, 0xf1, 0xd2, 0x17, 0x4d, 0xa7, 0x94, 0x17, 0x66, 0x26, 0xec, 0x0d, 0xfb, 0x54, 0x6e, 0x8c, 0xf4, 0xd6, 0x76, 0x9f, 0x10, 0x42, 0x97, 0x65, 0x16, 0x20, 0xab, 0x9d, 0x7c, 0xf6, 0x41, 0xe0, 0x19, 0x55, 0xf7, 0x89, 0xa6, 0x2c, 0x2a, 0xdd, 0x17, 0xd5, 0x25, 0x2d, 0x5c, 0x00, 0x87, 0x7a, 0xaa, 0x7a, 0x2e, 0x4c, 0x69, 0x5a, 0x0c, 0x3c, 0x7e, 0x99, 0x4f, 0x08, 0x1f, 0x03, 0x9b, 0x8e, 0xec, 0x61, 0xee, 0x0b, 0x1d, 0xa8, 0xae, 0x3e, 0xcd, 0xde, 0x35, 0xac, 0xa2, 0x18, 0x23, 0x4e, 0xdc, 0x55, 0xc6, 0x08, 0xa4, 0x0a, 0x23, 0x4e, 0x66, 0x9d, 0x3c, 0x9f, 0x65, 0xe5, 0xb2, 0x65, 0xd4, 0x48, 0xad, 0x1f, 0xa0, 0x4d, 0x27, 0x67, 0xa5, 0x58, 0xc5, 0x7a, 0xd2, 0x54, 0x4a, 0xbe, 0xfe, 0x75, 0x9f, 0x25, 0x03, 0x75, 0xd4, 0x96, 0xb7, 0x62, 0x01, 0x9d, 0xe6, 0x4a, 0xf2, 0x01, 0x40, 0x23, 0xca, 0xe0, 0x15, 0x57, 0x2e, 0x2f, 0x47, 0xcf, 0xe2, 0x38, 0x28, 0xf2, 0x87, 0x83, 0xe2, 0x4d, 0x1e, 0xe0, 0xf3, 0xa8, 0xd9, 0x08, 0x29, 0xa1, 0x23, 0x00, 0x64, 0x1b, 0x81, 0x90, 0x4f, 0xdf, 0xe4, 0x6d, 0x52, 0xa5, 0xfe, 0x7a, 0xa7, 0xe3, 0xee, 0x8e, 0x97, 0x18, 0xc0, 0xd2, 0x06, 0x32, 0x64, 0xf0, 0x0f, 0xfc];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("94f8d0ac6441e5f3e77c4f42646f0422fc18283645e5db4001355742"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("9c8f435a205e5fc8c3ad24db8233d119826dd941eb839bc4f57397dd855a3d11"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("01046268cfdb45ed49de06aebad99f2b74fdfcdc77cb22d0d16691fff65205f2998b180f3ef1eb7fbf07ec27b162944e"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("e3498ea91a92f72e8bf87a912ad472a0bbe1e87672599af0463e5a19f649f5dfd2b552d9f9978e884f74ba7e5b4fb0aa3159c46b5f947fb49b1c1b165c968197"));
	let bytes = &[0xe3, 0xf2, 0xa5, 0x59, 0x1d, 0x2c, 0xfe, 0x88, 0xc8, 0x7d, 0x17, 0x46, 0x5c, 0x26, 0x3b, 0x29, 0x95, 0x79, 0x4d, 0xd3, 0xee, 0x28, 0xb7, 0x3a, 0x05, 0x80, 0x8b, 0xf1, 0xa4, 0xba, 0x18, 0x80, 0xde, 0xd7, 0x35, 0x2f, 0xe1, 0xc8, 0xb3, 0xe2, 0x6d, 0x67, 0x2a, 0x1c, 0x70, 0x81, 0x78, 0x05, 0x63, 0xed, 0x36, 0x3d, 0x5a, 0x79, 0xb6, 0x33, 0x80, 0x5d, 0x6a, 0x5d, 0xf8, 0x10, 0xfb, 0x08, 0x69, 0x9b, 0xf4, 0xf7, 0xef, 0x3d, 0xa6, 0x9d, 0x26, 0x1c, 0x29, 0x83, 0x87, 0x85, 0x92, 0xfa, 0xef, 0x1b, 0xed, 0xa4, 0x6e, 0x57, 0xcd, 0xa9, 0x5b, 0x5c, 0x85, 0x7a, 0xb7, 0x5f, 0x14, 0x32, 0x0f, 0x8d, 0x04, 0x06, 0xeb, 0xec, 0x82, 0x7f, 0xca, 0x3d, 0x87, 0xc3, 0xf2, 0xa5, 0xa6, 0xf9, 0x7f, 0x94, 0xfc, 0x4a, 0x60, 0x77, 0x4d, 0xed, 0x39, 0xdc, 0x74, 0xfa, 0x59, 0xdb, 0xa4, 0x72, 0xf3, 0xc0, 0xcd, 0x59, 0xc9, 0xa0, 0x92, 0x0b, 0x03, 0x28, 0xce, 0x83, 0x0e, 0x68, 0x50, 0xf9, 0x10, 0x82, 0x34, 0x0b, 0x56, 0xed, 0x44, 0x0a, 0xcc, 0xf4, 0xbc, 0x09, 0x74, 0xb1, 0xb1, 0x51, 0x3a, 0x00, 0x6f, 0x26, 0x32, 0xd6, 0x98, 0x48, 0x5e, 0xf5, 0x7b, 0xcd, 0x81, 0x50, 0x77, 0x19, 0xa8, 0xd7, 0x5e, 0x48, 0x87, 0x7c, 0x77, 0x44, 0xf5, 0xa7, 0x3f, 0xe9, 0x14, 0xbe, 0x96, 0x7a, 0x03, 0x37, 0x0f, 0xc9, 0x8c, 0x4b, 0x34, 0x8e, 0x8b, 0x90, 0xca, 0x40, 0xac, 0x2f, 0x96, 0x32, 0x07, 0x36, 0x06, 0x3e, 0xb5, 0x98, 0x6e, 0x4f, 0xe7, 0xa8, 0x12, 0x8f, 0xf6, 0xd8, 0x46, 0x50, 0x74, 0xd0, 0xa8, 0xe0, 0x09, 0xd4, 0x76, 0xdd, 0x6c, 0xea, 0xbf, 0x49, 0x31, 0x30, 0x0b, 0x0e, 0x09, 0x2f, 0x01, 0x7a, 0x66, 0x27, 0xec, 0xb6, 0x4d, 0x76, 0xf8, 0x3c, 0xb8, 0x7b, 0x61, 0xb2, 0xbb, 0x74, 0x89, 0x96, 0x96, 0xac, 0x0b, 0xad, 0x64, 0x23, 0x5e, 0xdd, 0x25, 0x78, 0xd9, 0x66, 0x1d, 0x75, 0x4d, 0xbd, 0xaf, 0xc4, 0x50, 0x32, 0x20, 0x63, 0x8a, 0xe8, 0xc8, 0x95, 0x76, 0xa9, 0x8a, 0xe6];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("b16afdd52b72ba0fa8595cdba4afda8877e12f7afcda94e3e41d49ab"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("eb83652c9489dbf238ec09a01d00c4a850fb4b02f32609aafc429053c32aaee2"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("db9c10cbc06854e6f6859e4f1d217b66e46edd6910c6996254157efff19bf1769d2cf6512fc93be40d45de54abee4e3f"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("7142a8c9d9e43d468592b8dcf1a48a435d3b88aa6644b5251d4de4dfdb45749c9b92197b272330c3fdf19dcfda895b82fc19417b9e99595789918a687487a537"));
	let bytes = &[0xa1, 0xb0, 0xe4, 0xb1, 0x3e, 0x50, 0x0c, 0x81, 0x03, 0xc9, 0xf3, 0x62, 0x4e, 0x06, 0x3f, 0xf9, 0x59, 0x6b, 0x4d, 0xf1, 0x08, 0x7c, 0x9f, 0x5b, 0xda, 0x55, 0x54, 0xe5, 0x2b, 0x84, 0x58, 0x16, 0xe6, 0x9a, 0xdf, 0xde, 0xf5, 0xdb, 0xe8, 0x5f, 0x3e, 0xb2, 0xa9, 0x5e, 0xcd, 0x6d, 0x73, 0x6e, 0xfa, 0x45, 0xbe, 0x90, 0x85, 0x03, 0xa7, 0xf7, 0xef, 0x2c, 0xf8, 0x79, 0x79, 0xf9, 0x65, 0x3e, 0xe4, 0x20, 0x97, 0x29, 0xc0, 0xc0, 0x07, 0xb8, 0x09, 0x29, 0x24, 0x44, 0xda, 0xbe, 0x4d, 0x7f, 0xf3, 0x4e, 0x9d, 0xc4, 0x41, 0xf4, 0x55, 0x62, 0xfa, 0xfa, 0xfa, 0x18, 0x4c, 0x0f, 0x48, 0x0c, 0x16, 0x72, 0x97, 0x03, 0x3e, 0x5c, 0x3c, 0x98, 0xd4, 0x62, 0x2c, 0x92, 0x22, 0x7d, 0x46, 0x41, 0xa2, 0x4f, 0x57, 0x61, 0xf1, 0x4d, 0x74, 0x2c, 0x4d, 0x53, 0xf5, 0x54, 0x46, 0x43, 0x10, 0x61, 0xe8, 0x07, 0x8c, 0x19, 0x1e, 0x5a, 0xce, 0x70, 0x7d, 0x08, 0xee, 0x35, 0x68, 0xce, 0xca, 0x20, 0xea, 0x36, 0xd1, 0x82, 0x1c, 0x6f, 0x66, 0xf0, 0xa9, 0x75, 0x28, 0x0c, 0xb9, 0xe7, 0x46, 0x2c, 0x49, 0x97, 0xc8, 0x66, 0xfd, 0xa3, 0x12, 0x5b, 0xe2, 0x7b, 0x6c, 0x32, 0xe7, 0x57, 0xcf, 0x7c, 0x1c, 0x26, 0x23, 0xbc, 0x37, 0xa7, 0xed, 0xa7, 0xb6, 0x15, 0x2e, 0xd7, 0x80, 0xee, 0x67, 0xa5, 0xbd, 0x32, 0x27, 0x3c, 0x09, 0x56, 0x35, 0x6c, 0x89, 0x2d, 0xa8, 0x71, 0x91, 0x40, 0x34, 0xed, 0x48, 0xda, 0xff, 0x71, 0x1c, 0x1e, 0xd1, 0x83, 0x8b, 0x36, 0x28, 0xe9, 0xda, 0xa6, 0x30, 0x9f, 0x8a, 0x7f, 0x3e, 0xd7, 0x5d, 0x4b, 0xb3, 0xa7, 0xcd, 0xfc, 0x33, 0x7a, 0xad, 0xe6, 0x49, 0x5f, 0xfa, 0x36, 0x8f, 0x1a, 0xc7, 0xee, 0x11, 0xc9, 0x12, 0xca, 0xe8, 0x57, 0x7f, 0x97, 0xba, 0x31, 0xc5, 0x71, 0xd9, 0x9c, 0xc3, 0x8a, 0xca, 0xd0, 0xc9, 0x4f, 0x13, 0x1d, 0x14, 0x47, 0x68, 0x8e, 0x94, 0x02, 0xa8, 0x88, 0x38, 0xdc, 0x32, 0x4a, 0xb5, 0x6b, 0x0c, 0x48, 0xf2, 0x09, 0xd5, 0x48, 0xf8, 0x5e, 0x8b, 0x82, 0x56, 0x0c, 0x19, 0x3d, 0x6e, 0xc2, 0xa1, 0xc1, 0xbd, 0x92, 0xef, 0xb4, 0x1a, 0x62, 0xac, 0xdc, 0x83, 0x13, 0xec, 0xa4, 0x5f, 0x42, 0xc5, 0x00, 0xda, 0xb6, 0x06, 0x93, 0x88, 0xce, 0x1b, 0xe5, 0x2a, 0xa5, 0x66, 0x7a, 0xc5, 0xc1, 0xe5, 0xac, 0xbf, 0xb9, 0x8c, 0x5a, 0x83, 0x53, 0x2c, 0x8c, 0xe9, 0x17, 0x7a, 0x60, 0xc5, 0x72, 0x87, 0x14, 0x92, 0x68, 0xbc, 0x8d, 0x7d, 0x5e, 0x21, 0x0a, 0x52, 0x0b, 0x45, 0x89, 0x87, 0x0e, 0x22, 0xc8, 0xc2, 0x39, 0xae, 0x54, 0x10, 0x32, 0x59, 0x45, 0x01, 0x65, 0x0a, 0x01, 0xac, 0xa9, 0x3b, 0x70, 0xe4, 0x75, 0xdd, 0xcb, 0x33, 0x86, 0xb4, 0xee, 0x90, 0x8f, 0x00, 0x32, 0x89, 0x92, 0x7f, 0xdd, 0xa4, 0xbd, 0x3e, 0x68, 0x61, 0x47, 0x79, 0x5f, 0x2b, 0x1a, 0x71, 0xc3, 0xc7, 0xa9, 0x45, 0xe9, 0xc7, 0xfd, 0xa9, 0xe3, 0x77, 0x9b, 0x1a, 0x28, 0x95, 0x2c, 0x6a, 0xee, 0xb0, 0xc5, 0xc4, 0xbc, 0x0c, 0x3b];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("c3c65b2bad9112bdb2fc416d1b906302f2cf44b032cb2c5d1e68ab06"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("36c324ee1165a07afb0d662a9d99eddfc0c991f4341e470a79ab979de28c085e"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("3d137d301e2609d3506b38a949b8a86bca8efb6fdab5c006132e4e2e8fcc0ceccf263792c333aff5727dd2ec29d7f9ec"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("25e98f000e1d6953c0c01880125dd247a50423f1bfe10481ff4b0c78a1beba59a40a8fd7054c364111450d6951120e0b2dc93be95e39e48af8eb97714cd98f94"));
	let bytes = &[0x5d, 0x90, 0x75, 0x9e, 0x66, 0xf4, 0xda, 0x65, 0xc0, 0x23, 0x25, 0xfb, 0xd0, 0x89, 0xd4, 0x62, 0x04, 0xa6, 0x3a, 0x0e, 0xb7, 0x4a, 0xeb, 0xa9, 0x04, 0x67, 0x42, 0xd6, 0xd0, 0xe4, 0xbf, 0x2a, 0x49, 0x33, 0x0a, 0x97, 0xed, 0xab, 0xee, 0xe6, 0x07, 0xd9, 0x7c, 0xdb, 0x72, 0x82, 0x7d, 0x47, 0xd2, 0x58, 0x8d, 0x6f, 0xa6, 0xdf, 0xbb, 0xb4, 0x01, 0x68, 0xfb, 0x3e, 0xe2, 0xf4, 0x48, 0xa2, 0x1d, 0xda, 0x93, 0x09, 0xe1, 0xae, 0x87, 0x74, 0x98, 0x0f, 0xb1, 0x0f, 0x4c, 0xd6, 0x3c, 0xfe, 0x6d, 0xd4, 0xe5, 0x6d, 0x69, 0xf6, 0xa0, 0xb5, 0xb7, 0x56, 0xa3, 0x5d, 0x7f, 0xbf, 0xb3, 0x90, 0xd5, 0xf2, 0x4f, 0x18, 0x1c, 0x8d, 0x7b, 0xab, 0x0e, 0xf8, 0xe2, 0x86, 0x5c, 0xd9, 0x54, 0xe3, 0x5e, 0x47, 0xf6, 0x3f, 0x36, 0x41, 0xdc, 0x4e, 0xb5, 0xb1, 0xea, 0x76, 0xca, 0x57, 0x22, 0xde, 0x4c, 0xcc, 0xdd, 0x02, 0x9f, 0x23, 0xbe, 0x1e, 0x93, 0x82, 0xc9, 0x23, 0x70, 0x83, 0xd6, 0x66, 0xa1, 0xcd, 0xb1, 0x4c, 0xf2, 0xeb, 0xe0, 0x71, 0xee, 0x79, 0xec, 0xad, 0x07, 0x7c, 0xc1, 0x82, 0xfc, 0xce, 0x32, 0x76, 0xfe, 0x44, 0xd2, 0x39, 0xf2, 0xb5, 0x9c, 0xc9, 0xc6, 0x22, 0x94, 0x49, 0x6a, 0xb4, 0x88, 0x5e, 0x3a, 0x3e, 0xbd, 0x65, 0x0c, 0x04, 0xa7, 0xa4, 0x9d, 0x1a, 0xcf, 0xf8, 0x5f, 0x15, 0xfb, 0xe2, 0x39, 0x56, 0x0d, 0x89, 0xec, 0x70, 0x45, 0x3e, 0xdf, 0x03, 0xb9, 0xe8, 0xf7, 0x3a, 0x8e, 0xd5, 0x0a, 0xfe, 0xf3, 0x47, 0xd5, 0xa1, 0x65, 0x8e, 0x93, 0x86, 0x04, 0xb8, 0x84, 0xf9, 0xf4, 0x48, 0xc0, 0xd7, 0xef, 0x95, 0xb3, 0x1c, 0x7a, 0x3c, 0x9e, 0xb3, 0xca, 0x01, 0xad, 0x5d, 0xe4, 0x56, 0xd5, 0xef, 0xda, 0x45, 0x33, 0x93, 0x61, 0x62, 0x0f, 0x41, 0x86, 0x78, 0x65, 0xae, 0xcd, 0x3f, 0x15, 0x9e, 0xf5, 0x87, 0x87, 0x9c, 0xb9, 0x8a, 0xa8, 0x87, 0x23, 0xa8, 0xdf, 0x2e, 0x6a, 0x95, 0xda, 0x66, 0x40, 0xee, 0x08, 0x8e, 0x44, 0xd1, 0x76, 0x8b, 0xbc, 0x8f, 0x05, 0xc7, 0x0b, 0xe4, 0xbc, 0xc6, 0x28, 0xee, 0x98, 0xca, 0xa7, 0xe1, 0xb9, 0x28, 0xd2, 0x20, 0x1d, 0x6d, 0x7c, 0xe7, 0x8e, 0xb3, 0xae, 0x8c, 0x52, 0x32, 0xef, 0x14, 0xf5, 0x43, 0x06, 0x4c, 0x9e, 0x05, 0xf5, 0x32, 0x4b, 0x0f, 0x08, 0xe8, 0xad, 0xb3, 0x21, 0x52, 0x41, 0x53, 0xd7, 0xa1, 0x2f, 0x10, 0x2f, 0xa8, 0x66, 0xa1, 0x7b, 0x65, 0x99, 0x88, 0xc2, 0x0a, 0x2a, 0x90, 0xda, 0xbe, 0xbe, 0x1b, 0x26, 0xd0, 0x90, 0xb9, 0x48, 0x59, 0x64, 0xef, 0xe2, 0xd9, 0xb4, 0x83, 0x45, 0xbd, 0x83, 0x2d, 0xaa, 0xfd, 0xa6, 0xa7, 0x48, 0x32, 0x2d, 0x82, 0x17, 0x0b, 0xb5, 0xed, 0x86, 0x5e, 0x7a, 0x9d, 0xaa, 0xc0, 0x49, 0x55, 0x4f, 0xdb, 0x8d, 0xeb, 0xa5, 0xa7, 0x78, 0xc7, 0x47, 0x62, 0x8d, 0x6a, 0x5d, 0xa5, 0xf5, 0x0c, 0x29, 0x1d, 0x63, 0xfc, 0x48, 0x74, 0x0a, 0xaf, 0xd4, 0x9b, 0x05, 0x56, 0xfe, 0x3d, 0x09, 0x99, 0x50, 0xe5, 0x1a, 0xf8, 0xd9, 0x64, 0x48, 0x86, 0xf8];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("cbad0de05d83f12a38df641aba4b28c0bd88e6b4be9c2e396d909ebe"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("d676daafd85a6829d83a1c992535aad49e80b89f763406d6afa1d6ff81c620d3"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("f8ee0b373d8da51c01c213e32100e2266f6bf42a9d37bda19e71af7994068248c43f87f9ac48bcd4380398e501ef1780"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("738fe201e67479cb2caf682c13dfdb007167e7375599c3460b1f4a665b1b3ce5f44238931189172bd31eec6cdd64583578852e56d2f2bac0713d70a55bd4bf3a"));
	let bytes = &[0xb2, 0x6a, 0xbd, 0xbf, 0x2c, 0xec, 0x06, 0xa3, 0x35, 0xcd, 0x65, 0xcd, 0xc4, 0x31, 0x90, 0xc1, 0xa7, 0x02, 0x3b, 0xe6, 0x38, 0x7f, 0x34, 0x94, 0xa2, 0x70, 0x94, 0x41, 0xbf, 0x31, 0x8e, 0x21, 0xc1, 0xa3, 0x9c, 0x35, 0x0b, 0x0f, 0xcb, 0x1e, 0x10, 0xd0, 0x1a, 0xd5, 0x83, 0x61, 0x42, 0x13, 0x79, 0xa5, 0xf1, 0xe3, 0x41, 0xcc, 0x79, 0xbf, 0xf3, 0xb3, 0x75, 0xdb, 0xf9, 0xf5, 0xfd, 0xd5, 0x9c, 0x7a, 0xb0, 0x7c, 0xf6, 0xb4, 0x99, 0x84, 0x48, 0xc3, 0x7f, 0x40, 0xa3, 0x97, 0xc8, 0x70, 0xcb, 0x47, 0x2b, 0x25, 0xdb, 0x73, 0x5d, 0xf8, 0x10, 0x00, 0x76, 0xeb, 0x41, 0xd8, 0x52, 0xb7, 0x85, 0x07, 0xcc, 0xd9, 0x72, 0xde, 0xad, 0x30, 0xfe, 0xa9, 0xe4, 0x2b, 0xd4, 0x10, 0xa9, 0x4b, 0x66, 0xdd, 0x92, 0xd6, 0xe0, 0x24, 0xa6, 0xa6, 0xe1, 0x73, 0x4a, 0x39, 0x7d, 0x3c, 0x89, 0x25, 0x07, 0xd1, 0x92, 0x94, 0xcf, 0x7d, 0xed, 0x1e, 0x76, 0x46, 0x4d, 0xf8, 0x5d, 0x9e, 0x04, 0x71, 0x1a, 0x1e, 0x70, 0xe0, 0x63, 0xd1, 0x36, 0xbd, 0x95, 0xe4, 0x34, 0x65, 0xb4, 0xd3, 0x4c, 0xb3, 0x10, 0xf0, 0xe0, 0x72, 0xbe, 0x20, 0x10, 0x78, 0xee, 0xbc, 0x61, 0xf6, 0x07, 0x0f, 0xa5, 0xeb, 0x68, 0x1f, 0xab, 0x06, 0x2a, 0x8b, 0x27, 0x5a, 0x3b, 0x61, 0x6f, 0xaa, 0x35, 0x7b, 0x09, 0xcd, 0x77, 0x54, 0xfd, 0xc8, 0xc3, 0x4a, 0xf9, 0xc4, 0xd4, 0xc5, 0x9b, 0x75, 0xbd, 0x82, 0x14, 0x82, 0x16, 0x0d, 0x47, 0x44, 0x54, 0xd2, 0x8a, 0x20, 0x15, 0xc6, 0x12, 0xa3, 0x73, 0x62, 0x82, 0xb1, 0x3b, 0xcd, 0xa6, 0x7d, 0xb0, 0x17, 0xf5, 0x9b, 0x9e, 0x7f, 0xab, 0xce, 0xbf, 0xcb, 0xdc, 0x58, 0x67, 0xad, 0x11, 0x96, 0x4e, 0x9c, 0x87, 0x74, 0x7f, 0x65, 0x9c, 0xa2, 0xd5, 0xd8, 0xf7, 0xd2, 0xc6, 0x91, 0xf4, 0x2c, 0x64, 0x60, 0xf3, 0x42, 0x27, 0xf6, 0xb9, 0x66, 0xff, 0x98, 0xb5, 0x37, 0xce, 0xb4, 0xb4, 0xf4, 0x29, 0x0d, 0xe1, 0x13, 0xc7, 0xea, 0x46, 0xc4, 0x8d, 0x16, 0x4b, 0x67, 0x1d, 0x7b, 0xc1, 0xf5, 0x60, 0x65, 0xd5, 0x4a, 0xed, 0x52, 0x34, 0x2d, 0xcf, 0x70, 0x67, 0x00, 0x08, 0xf4, 0x86, 0xbb, 0x9f, 0x86, 0xec, 0x28, 0x6d, 0x55, 0x02, 0x2b, 0xfe, 0x1d, 0xaa, 0x5e, 0x18, 0x3d, 0x47, 0xcd, 0x4a, 0x27, 0x12, 0x12, 0x2e, 0x1b, 0xeb, 0xd5, 0xe9, 0x89, 0xd2, 0x6e, 0xf2, 0x80, 0x04, 0x30, 0x91, 0x89, 0x3b, 0xde, 0xa1, 0x62, 0x83, 0x9b, 0x7a, 0xae, 0xfb, 0xdc, 0x28, 0xc0, 0xa6, 0xda, 0xf0, 0x99, 0xfa, 0x09, 0xfa, 0xd6, 0xec, 0x1f, 0x8f, 0x1d, 0x06, 0xb5, 0x71, 0x88, 0x88, 0xc6, 0x1f, 0xeb, 0xfa, 0x0c, 0xed, 0x73, 0x0a, 0xae, 0xbb, 0xf7, 0x37, 0x8b, 0x9b, 0xea, 0xf4, 0x41, 0x9f, 0x39, 0x20, 0xd5, 0x7c, 0x31, 0xf2, 0x3b, 0x9c, 0x80, 0xf0, 0xcb, 0x98, 0x55, 0xb2, 0xf5, 0x8d, 0xe2, 0xf8, 0xc5, 0x22, 0xef, 0x23, 0xae, 0xea, 0x3e, 0x70, 0xdb, 0x6c, 0x26, 0xeb, 0x7a, 0x92, 0xb4, 0xa9, 0x27, 0xd9, 0x55, 0x5d, 0xa2, 0xbb, 0x7c, 0x1c, 0x19];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("6a8970b30aaf1ed9a67112e175693a4a5660be140a28d8eaa81c5bd9"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("cc1a9d0eb18ce447c8fc7d6c369a9d723d6a2d284602d2dcd8f94ccb95a87474"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("25d38d4b3c46517d38d190c45ae190462620a1df239763afd4469a82f438a272a7b6ee75e641f9c22098dc896e1384b4"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("fd100f641cbde00f7d4ce5ff34a8d3a3d7ffaea486b7ee7683b561d327ccde82218f744e78e5a3b5fd78c58ada364d30e0b043f59bf82d4b6332d6717729a26e"));
	let bytes = &[0x31, 0xdd, 0xb4, 0xad, 0x42, 0xc1, 0x5f, 0x37, 0x5e, 0xc0, 0x9e, 0x32, 0x90, 0xa5, 0x3d, 0x6f, 0xfd, 0x4e, 0xe0, 0x79, 0xe5, 0x30, 0x80, 0x9b, 0x1c, 0x6f, 0x81, 0x22, 0xb7, 0x1d, 0xc4, 0xbc, 0xc4, 0x97, 0x0a, 0x98, 0x7a, 0xcd, 0xd4, 0x58, 0xa1, 0xdf, 0x78, 0x12, 0xd9, 0xba, 0x51, 0x92, 0xaa, 0x25, 0xb9, 0xa5, 0x9d, 0xed, 0x3c, 0x01, 0xb1, 0xe8, 0x25, 0x3d, 0x96, 0x5c, 0xbf, 0x3d, 0xa2, 0x5b, 0x18, 0xaf, 0x04, 0x30, 0x86, 0x2d, 0x0b, 0xac, 0xc5, 0xec, 0x09, 0xcf, 0x5e, 0x28, 0xf3, 0x00, 0x71, 0x8c, 0x6a, 0x82, 0x34, 0xeb, 0xbd, 0x79, 0x28, 0x6c, 0x8e, 0x3b, 0x1f, 0x03, 0x12, 0x18, 0xbc, 0xd4, 0x98, 0x37, 0x0f, 0x9e, 0xf0, 0x86, 0x59, 0x5d, 0x3e, 0x87, 0xf4, 0x31, 0xbf, 0xe3, 0x5c, 0xa2, 0xb3, 0x02, 0x6a, 0x8d, 0xd4, 0x33, 0x39, 0x7a, 0xa1, 0xfe, 0xad, 0x2a, 0xfc, 0xff, 0x9b, 0xe5, 0x7e, 0x6c, 0x2b, 0x05, 0xd6, 0x93, 0x7b, 0xdf, 0xd8, 0x62, 0xee, 0x02, 0x4c, 0x79, 0x3b, 0x3a, 0xf4, 0xf2, 0x2e, 0x15, 0x6e, 0x6f, 0x24, 0x59, 0xfb, 0x56, 0xd1, 0x2d, 0xf8, 0x31, 0x2f, 0x9a, 0x31, 0x83, 0x54, 0x1e, 0x51, 0xa2, 0x36, 0xd0, 0x3a, 0xfc, 0x01, 0x40, 0x46, 0x8f, 0x9d, 0x4c, 0x79, 0x17, 0xe2, 0x6d, 0xd5, 0x9f, 0x05, 0x3f, 0x76, 0xa7, 0x72, 0x74, 0xd5, 0xf0, 0xbf, 0xd9, 0xcf, 0x08, 0xc7, 0xa8, 0x6d, 0xa7, 0x5c, 0x37, 0x76, 0x48, 0xd8, 0xf2, 0x5e, 0x01, 0xd6, 0x29, 0x8d, 0xd3, 0x47, 0x60, 0x6e, 0xc6, 0x05, 0x1a, 0x08, 0xc5, 0xc3, 0xc0, 0x16, 0x88, 0xc3, 0x40, 0xc3, 0xd3, 0x76, 0x45, 0x37, 0x14, 0x36, 0x94, 0xa5, 0xeb, 0x33, 0xfe, 0xd9, 0xc5, 0xa8, 0x4e, 0x5f, 0x22, 0xcd, 0xb7, 0x99, 0x15, 0x37, 0x05, 0x45, 0x54, 0xec, 0x58, 0xa1, 0x35, 0x7c, 0x66, 0x3b, 0x33, 0x3b, 0x6c, 0xed, 0xd9, 0x71, 0x4a, 0x93, 0x30, 0xd9, 0x39, 0xf5, 0x0b, 0xa2, 0x6a, 0xed, 0x16, 0x77, 0x34, 0x81, 0x58, 0x21, 0x5f, 0x5d, 0x0d, 0x58, 0xea, 0x52, 0xfa, 0x91, 0x1b, 0xc2, 0xb5, 0x83, 0xc3, 0x73, 0x66, 0xdf, 0x7a, 0x27, 0xe4, 0x29, 0x48, 0x05, 0xcd, 0xf4, 0xbe, 0xd9, 0x38, 0x6e, 0xe7, 0xdd, 0x72, 0x59, 0xc7, 0x03, 0x3c, 0x7a, 0xa6, 0xa7, 0x59, 0x08, 0x44, 0x7e, 0xfd, 0x2c, 0x3c, 0x38, 0x3a, 0x79, 0xeb, 0xe8, 0xf4, 0xfe, 0x12, 0x98, 0x9c, 0xd9, 0x8a, 0xcd, 0xf1, 0xb6, 0x34, 0x9e, 0x4f, 0x6f, 0xc1, 0x09, 0xf9, 0x28, 0xc2, 0x1c, 0x33, 0xef, 0x7f, 0x8c, 0xac, 0x14, 0x17, 0x20, 0x69, 0xd8, 0xcf, 0xed, 0x9a, 0x66, 0x6f, 0x58, 0x15, 0x19, 0x4c, 0xee, 0x37, 0x27, 0x9e, 0x00, 0xeb, 0xa1, 0xe1, 0x97, 0x24, 0x20, 0x49, 0x93, 0xec, 0x60, 0xc1, 0x9a, 0xbc, 0x65, 0x39, 0xb3, 0x0e, 0x7d, 0x61, 0x8c, 0x6c, 0xc7, 0x20, 0xe8, 0xa3, 0x93, 0x2b, 0x9b, 0x98, 0x62, 0x2c, 0x25, 0x7a, 0x25, 0x88, 0xed, 0x8f, 0x21, 0xb0, 0x48, 0x32, 0x96, 0xf5, 0xc2, 0xca, 0xe9, 0x22, 0xdc, 0x28, 0x1a, 0x36, 0xeb, 0x58, 0xef, 0x8f, 0xda];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("7dfb1a070b466ed23d44a8f0f628ffc48adceaf7091f4e569b94c26d"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("7f2b80e527e1df4f23fc357153f622c93a1e8cb197da55253c964a1ee807f5f5"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("f0ae26bc7e6a8d50fd5392f790cad5dbd4c78430e6ef0703da7ce2770ed7c70f4160c3d5b6da5b7084a6765853d67f99"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("31fec0766408db2e5953f3960261acd67cbe98c73c0fd8451c093a54179f110f6b94d62bee40f14f7262fc0bdb7d563c2b2fe40186a970fe6ed7a713c3a1618e"));
	let bytes = &[0x99, 0x34, 0x2d, 0xc0, 0x3f, 0x71, 0x2e, 0x12, 0x35, 0x3e, 0x3e, 0x1b, 0x44, 0xf1, 0x75, 0x20, 0x2c, 0x9c, 0xae, 0xa1, 0xec, 0xd2, 0x22, 0x87, 0xd1, 0x50, 0xf0, 0x2f, 0x1b, 0xbd, 0xd1, 0x84, 0x75, 0x67, 0xf6, 0x17, 0x93, 0x0d, 0x7e, 0xfd, 0x5b, 0x83, 0x4e, 0x62, 0x26, 0x0b, 0xb5, 0xb6, 0xdf, 0xe0, 0x94, 0xaa, 0x1b, 0xda, 0xce, 0xd4, 0xbf, 0x87, 0x9a, 0x23, 0x34, 0xf4, 0xa9, 0x06, 0x28, 0xbd, 0xfc, 0x05, 0xce, 0x8d, 0xaf, 0xbf, 0xf2, 0x18, 0x80, 0x15, 0xfd, 0x4f, 0x95, 0xe5, 0xc9, 0x2c, 0x6f, 0x01, 0x0b, 0x96, 0x84, 0x74, 0xbb, 0x72, 0x0d, 0x38, 0x92, 0x14, 0x38, 0x63, 0x86, 0x21, 0x48, 0x91, 0x93, 0x55, 0x11, 0x7e, 0xac, 0x7e, 0xc6, 0x89, 0x15, 0xe2, 0x02, 0x42, 0x8d, 0x1f, 0xab, 0x8d, 0xec, 0xe6, 0x85, 0xd2, 0xe4, 0x04, 0x8c, 0x85, 0x5c, 0x8d, 0xa4, 0x51, 0xc1, 0xa5, 0x3d, 0x82, 0x46, 0xd8, 0x3f, 0x82, 0xab, 0xd3, 0x71, 0x1c, 0xad, 0x3c, 0x59, 0xfc, 0xf9, 0xa4, 0xc9, 0x59, 0xf5, 0x56, 0x71, 0x90, 0x6c, 0xcc, 0x2f, 0xd3, 0x2f, 0x9a, 0x54, 0x46, 0x49, 0x29, 0x25, 0x21, 0x45, 0x45, 0x9f, 0xa3, 0xd9, 0xec, 0x4d, 0x44, 0x89, 0x6c, 0xa3, 0x36, 0xae, 0x4a, 0xa7, 0x63, 0x22, 0x15, 0xc5, 0xc0, 0x73, 0x00, 0xf2, 0x13, 0x78, 0x06, 0x23, 0x6f, 0xc5, 0xc8, 0x68, 0x9b, 0x17, 0x42, 0xa4, 0x6e, 0xad, 0xbb, 0xaa, 0xba, 0x2f, 0xfb, 0x4e, 0x79, 0xdf, 0x67, 0x36, 0x9c, 0x7d, 0xd0, 0x5d, 0x6f, 0x3e, 0x07, 0xcf, 0xa2, 0xcb, 0x8e, 0xe6, 0x2d, 0xa5, 0x86, 0xcd, 0x55, 0x8c, 0xf0, 0xf2, 0x74, 0xc6, 0x73, 0x0e, 0xb4, 0x6a, 0x1a, 0xe8, 0x7b, 0xb3, 0x7e, 0x18, 0xa6, 0x24, 0x98, 0x50, 0x96, 0x1b, 0xa0, 0xbd, 0x33, 0xce, 0xed, 0xf9, 0xe6, 0x47, 0xa4, 0x9e, 0x0e, 0x75, 0x68, 0x97, 0x6a, 0x84, 0xf9, 0x98, 0x61, 0xb1, 0x24, 0xbe, 0x74, 0x17, 0xe6, 0xb0, 0xb9, 0x48, 0x54, 0xf9, 0x12, 0xf3, 0x9f, 0xf3, 0x3c, 0x3d, 0xe4, 0xf1, 0xc2, 0xcd, 0xea, 0xf4, 0xbc, 0xf8, 0x5f, 0x6c, 0xd8, 0x71, 0xed, 0xe5, 0x7f, 0x20, 0x98, 0x08, 0x72, 0x44, 0x30, 0x06, 0xa3, 0x10, 0x96, 0x85, 0x92, 0x3b, 0xe3, 0xb8, 0xb7, 0xcb, 0x48, 0xf7, 0xdd, 0x48, 0xbf, 0x37, 0xda, 0x20, 0xf0, 0x81, 0x46, 0xd0, 0x7b, 0x5d, 0xf1, 0xce, 0x3a, 0x04, 0xd9, 0x61, 0xb9, 0x6c, 0xb1, 0xfe, 0xc5, 0x9d, 0x0e, 0xd9, 0x8f, 0x16, 0xaf, 0x8d, 0xf3, 0x96, 0x4f, 0xa3, 0x84, 0x85, 0xc0, 0x13, 0x90, 0x04, 0xa6, 0x90, 0x39, 0x4e, 0x38, 0x3b, 0x15, 0x5b, 0xf5, 0xd8, 0x9d, 0xd1, 0xb7, 0x1f, 0xed, 0x3e, 0x43, 0xfc, 0x7b, 0x2a, 0x87, 0x79, 0x64, 0x3b, 0xfb, 0xe4, 0x94, 0xfb, 0x0e, 0x60, 0xa2, 0xb1, 0x60, 0x7a, 0x4d, 0xed, 0xb4, 0x2d, 0x4e, 0x3f, 0x94, 0xa0, 0x73, 0x12, 0xb2, 0x37, 0xc4, 0xa6, 0x95, 0x07, 0xa6, 0x0b, 0xe2, 0x19, 0x29, 0x57, 0x90, 0xd9, 0xf7, 0x93, 0x06, 0x2d, 0xd4, 0xac, 0x1a, 0xd1, 0x26, 0x77, 0xde, 0xbb, 0x09, 0x8b, 0x81, 0x31, 0x39];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("1dfd4edd917fa66c57b84cb6a545089146579209c254049e9c651be8"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("b3e1bf86ab5faed1125a38aa4b4eeddb4f4e93b600cbc412071241a8cb85797c"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("5e1e57e02fc7bfb017c56136c14d02827fc3b9ff3d78973fc81eb4c7107c56afb3915ff1ce76dba1e6376d129044b6c8"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("035af1f1779c6411690e24c666778a1f9d8bb4044a8fe423b0e8c176f16f24282a74eb930e4934c6a573065f17b3e5a25c01a1a4648322bf4c57aade584face0"));
	let bytes = &[0x99, 0xec, 0xeb, 0x61, 0xbe, 0xc4, 0x0b, 0x0d, 0x8d, 0x98, 0xc7, 0x02, 0x6a, 0xd2, 0xa4, 0xc6, 0x50, 0xaf, 0x22, 0x6b, 0xcb, 0xd0, 0x9c, 0x13, 0x49, 0x52, 0x9c, 0xa3, 0xfe, 0xf6, 0xde, 0x52, 0x40, 0xdb, 0x4d, 0xeb, 0xd6, 0xe9, 0x96, 0x98, 0x74, 0x2d, 0x43, 0x8a, 0x17, 0xa6, 0x2e, 0xe9, 0x50, 0x18, 0x27, 0x92, 0xb8, 0x81, 0x87, 0x0e, 0xe0, 0xb6, 0x6f, 0x2b, 0xd4, 0x4c, 0x49, 0x8c, 0x72, 0x5a, 0xed, 0x02, 0x31, 0x6e, 0xe7, 0xf7, 0xf6, 0xaa, 0x9c, 0x04, 0x3c, 0xee, 0xb2, 0x6f, 0x8a, 0xe3, 0x3b, 0x98, 0x7f, 0x08, 0xdd, 0x3c, 0x32, 0x4d, 0xb2, 0xe9, 0x85, 0x8a, 0x8f, 0xa6, 0x20, 0x7b, 0x44, 0x18, 0xa8, 0x23, 0x06, 0xda, 0x23, 0xe2, 0x2a, 0x9b, 0xc2, 0x7e, 0x3d, 0xa8, 0x1b, 0x08, 0xdf, 0x98, 0xf9, 0x95, 0xa5, 0xdc, 0x99, 0xa0, 0xbb, 0x70, 0x5f, 0xed, 0x6c, 0x85, 0x95, 0xd6, 0x5e, 0xb8, 0x0a, 0xc4, 0x8b, 0xd0, 0xa2, 0xa0, 0x15, 0xb9, 0xeb, 0x20, 0xca, 0x47, 0x68, 0xd8, 0x78, 0xb8, 0x7c, 0xcd, 0xd0, 0xc6, 0x9f, 0xbb, 0x5e, 0xbd, 0x27, 0x2f, 0xf0, 0xa5, 0x15, 0x5e, 0x53, 0xce, 0x78, 0xa5, 0x33, 0xb6, 0x00, 0x2e, 0xfb, 0xae, 0x04, 0x0b, 0x14, 0x4e, 0x57, 0x9a, 0x9f, 0x8b, 0x97, 0xad, 0x90, 0x2c, 0x34, 0xf4, 0x97, 0x05, 0xce, 0x48, 0xcf, 0x60, 0xce, 0x92, 0x78, 0x80, 0xfa, 0xf3, 0xcf, 0xf0, 0x6d, 0x6b, 0x75, 0x71, 0x7b, 0x0e, 0x78, 0x84, 0x45, 0x84, 0x26, 0xde, 0x23, 0xae, 0xdb, 0x80, 0x01, 0xe0, 0x46, 0xb1, 0x26, 0x8e, 0x78, 0x06, 0x36, 0x85, 0x5a, 0x92, 0x2e, 0x2c, 0xd6, 0xf3, 0x5e, 0x52, 0x90, 0x40, 0xe1, 0x5c, 0xd1, 0xfd, 0x2f, 0x4b, 0x79, 0xb3, 0xf0, 0xb6, 0xae, 0x1a, 0xc6, 0x8f, 0x25, 0x26, 0x51, 0x53, 0xf1, 0x97, 0xa3, 0xf9, 0x5f, 0x1f, 0x1a, 0xc1, 0x0b, 0xd0, 0x93, 0xd8, 0x54, 0x28, 0x2f, 0x79, 0x34, 0x4a, 0x01, 0xd3, 0x55, 0x6d, 0xa5, 0x37, 0x21, 0x84, 0xf0, 0xd0, 0x2b, 0x4f, 0x1c, 0xc1, 0x1f, 0x54, 0x1a, 0x47, 0xeb, 0x45, 0xa1, 0x83, 0x53, 0xc3, 0xe3, 0xdd, 0x82, 0xf6, 0x36, 0x8d, 0xa5, 0xf5, 0xf0, 0x9a, 0x70, 0xc4, 0x0b, 0x7c, 0x30, 0xc3, 0x79, 0x5a, 0x73, 0x43, 0x5d, 0xfc, 0x5d, 0xb2, 0x31, 0x81, 0x00, 0xed, 0x8d, 0x72, 0xa0, 0x4f, 0x1b, 0x87, 0x14, 0x1d, 0x58, 0xf3, 0x30, 0xef, 0x0c, 0xd7, 0x06, 0x12, 0x37, 0x67, 0xe4, 0xca, 0x3a, 0x5e, 0x6c, 0x8d, 0x3b, 0x70, 0x65, 0x80, 0x58, 0xc6, 0x6c, 0x4d, 0xa9, 0xf1, 0xd8, 0x8d, 0xae, 0x6b, 0x3e, 0x54, 0xf7, 0x36, 0x81, 0xca, 0x26, 0x51, 0x91, 0x10, 0x70, 0xf7, 0x30, 0x41, 0x24, 0xd2, 0x3b, 0x73, 0xaf, 0xb7, 0x8b, 0x11, 0x77, 0x11, 0xec, 0x93, 0x4a, 0x86, 0x1b, 0x3b, 0xd5, 0xa3, 0x37, 0x8d, 0x0a, 0xfd, 0x40, 0xd9, 0xbb, 0x6c, 0x0c, 0x04, 0x52, 0xfe, 0x5d, 0x4e, 0x60, 0x4f, 0xb5, 0xdb, 0x9f, 0x10, 0x18, 0xb9, 0xc3, 0xc1, 0x6a, 0x35, 0x28, 0xac, 0x92, 0x54, 0x87, 0xda, 0xc4, 0x88, 0xf5, 0x65, 0x7e, 0x5b, 0x20, 0x0f, 0x36, 0x0d, 0x2b, 0x2b, 0xd8, 0x77, 0x4d, 0x0c, 0x98, 0x92, 0xdb, 0x2a, 0x0b, 0x21, 0x62, 0x2d, 0x3a, 0x0b, 0x17, 0xe2, 0xc1, 0x3d, 0x4f, 0x13, 0xaa, 0x0f, 0x30, 0x67, 0x22, 0xa5, 0x47, 0xde, 0xff, 0x28, 0xb4, 0x1c, 0xde, 0x55, 0x80, 0xb6, 0x80, 0xdf, 0x74, 0x8d, 0xca, 0xc7, 0x9b, 0x0a, 0x3c, 0xf8, 0x67, 0x7f, 0xae, 0x4f, 0x89, 0x05, 0xfd, 0x6a, 0x8c, 0x24, 0xd4, 0xe0, 0x70, 0xdf, 0x7a, 0xc5, 0x5b, 0xa1, 0x1b, 0xfb, 0x80, 0xdd, 0x97, 0x75, 0x4a, 0xf4, 0xda, 0x17, 0x95, 0xf1, 0xfb, 0x22, 0x91, 0x48, 0x23, 0xbf, 0x00, 0x65, 0xd0, 0xf9, 0x49, 0x15, 0xe3, 0x0f, 0xe7, 0x69, 0x61, 0xed, 0x78, 0x57, 0x01, 0x1d, 0xb5, 0x3d, 0x8a, 0xb3, 0x39, 0xaf, 0xba, 0x98, 0x17, 0x1d, 0x3d, 0x77, 0x01, 0xaf, 0xb3, 0xc7, 0xc2, 0x60, 0xf7, 0x4b, 0x77, 0x51, 0xd4, 0x89, 0x46, 0x72, 0x4b, 0xc3, 0x55, 0x66, 0xfc, 0xcb, 0x33, 0xc4, 0xda, 0xa5, 0x54, 0x36];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("7172badc03ef6c17e673f2bba1cd088bd9abe0ee25f591ddc7c1e819"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("f24afbe78358da835b3864b54f60ea65f3192175bb0fd27c89be41e514cbb282"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("a8fa59431d55d99cbec62e6fcb7ee1ff984549a54751e5ffb72a345f79414ca6d4227aca238a832409cbcd0d34481232"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("4e482f0c046094b43922d56edc786797529f2e6be8eafe06b46b77727b72417f8b6756f129c0eb4dcac62877e61ef0a5de4a313c332198b4978df887a32db6d3"));
	let bytes = &[0xec, 0x4b, 0x25, 0xeb, 0x4a, 0x2b, 0x18, 0x90, 0x66, 0x3a, 0xe4, 0x09, 0xc0, 0x62, 0xc3, 0x4b, 0x70, 0x56, 0xfb, 0x22, 0x77, 0x48, 0xe8, 0xfd, 0xe0, 0x7f, 0x18, 0x7b, 0x0c, 0xfe, 0x18, 0xb6, 0xb1, 0x23, 0xc0, 0x84, 0xdf, 0x9c, 0x02, 0xa1, 0x9f, 0x16, 0x6c, 0x97, 0x68, 0x59, 0xec, 0xf0, 0xe7, 0x35, 0xfb, 0xae, 0x38, 0xde, 0xaf, 0x66, 0x73, 0x92, 0x43, 0x57, 0x1d, 0x1a, 0xce, 0x1c, 0x2f, 0x40, 0x37, 0x88, 0x58, 0xff, 0xf5, 0x5e, 0x90, 0xa8, 0x86, 0x33, 0xc5, 0xf1, 0x38, 0xe8, 0x8c, 0x41, 0x80, 0x68, 0x3e, 0x11, 0x9a, 0xec, 0x97, 0x67, 0xe0, 0x75, 0xc4, 0xd4, 0xc6, 0x64, 0x22, 0x4a, 0x67, 0x6e, 0x73, 0x0b, 0x6d, 0x47, 0xf0, 0x5a, 0xd6, 0x62, 0x98, 0xe1, 0x9a, 0x5d, 0xd7, 0xac, 0x25, 0x7c, 0xa6, 0xb3, 0x05, 0x11, 0xca, 0x33, 0x7d, 0x9a, 0x0f, 0x14, 0x18, 0x50, 0x0a, 0xc2, 0xb8, 0xdc, 0x09, 0x4a, 0x28, 0x0e, 0xc9, 0xcd, 0x15, 0x96, 0xe4, 0x0a, 0x5e, 0x44, 0xe3, 0x0a, 0x6e, 0xa4, 0x35, 0xf0, 0xc9, 0xf6, 0x43, 0x53, 0x9f, 0x99, 0xb2, 0x8a, 0x2e, 0x6e, 0xb7, 0xe8, 0x1d, 0x9a, 0xcc, 0x6d, 0xb0, 0xfa, 0x18, 0x0a, 0xa4, 0x18, 0xc2, 0x7b, 0x88, 0xc8, 0x45, 0x28, 0x9e, 0x0b, 0x89, 0x7a, 0x3a, 0xff, 0x58, 0x65, 0xc7, 0x75, 0x3b, 0x47, 0x24, 0xed, 0x76, 0x8e, 0x93, 0xed, 0x3d, 0x5a, 0x03, 0xf0, 0x2c, 0x28, 0xaa, 0xc3, 0xfc, 0x9b, 0xd3, 0xce, 0x12, 0xa2, 0xc0, 0x38, 0x0a, 0x51, 0xfc, 0x35, 0x61, 0x0d, 0xf9, 0xe2, 0xb6, 0x91, 0xe8, 0xd2, 0x71, 0x29, 0x3a, 0x48, 0x28, 0xf7, 0xa1, 0x07, 0x94, 0x93, 0x7e, 0x19, 0xc9, 0x47, 0x48, 0x01, 0x30, 0x5a, 0xf2, 0x27, 0xb9, 0x8b, 0xe2, 0x59, 0x7f, 0xb8, 0x8e, 0x36, 0x5b, 0x16, 0x00, 0x3f, 0xfa, 0x59, 0x85, 0x30, 0x7b, 0x10, 0x93, 0x04, 0x0d, 0x6c, 0xac, 0x54, 0xfd, 0x9f, 0x04, 0xfb, 0x3d, 0xe0, 0x84, 0x48, 0xca, 0x49, 0x9a, 0xd5, 0xd1, 0x75, 0x87, 0x57, 0xe8, 0x1d, 0x8a, 0x41, 0xf6, 0x46, 0xf8, 0xdd, 0x83, 0x15, 0x6a, 0xa3, 0x60, 0xaf, 0x9e, 0x06, 0x57, 0xb5, 0x69, 0x27, 0x8b, 0xb8, 0x41, 0xb3, 0x06, 0x68, 0x91, 0x02, 0x21, 0xd5, 0x92, 0x00, 0xcf, 0x4f, 0x33, 0x5b, 0xa1, 0xac, 0x8d, 0x4d, 0x7b, 0x6c, 0xd0, 0x8c, 0x4e, 0x5a, 0x53, 0x03, 0xdc, 0x6b, 0xaa, 0x6d, 0x4a, 0xd2, 0xe0, 0xd6, 0xe6, 0xe6, 0xbc, 0xaf, 0xc7, 0xb1, 0x1e, 0x6b, 0x0f, 0x56, 0x39, 0xa4, 0xb4, 0x90, 0x51, 0x8f, 0x11, 0xb9, 0x23, 0xbd, 0x66, 0xbb, 0x27, 0x33, 0xe7, 0xd9, 0xea, 0x72, 0x88, 0x12, 0x3c, 0x9c, 0x95, 0x92, 0x2f, 0x58, 0x0f, 0xf5, 0xca, 0x57, 0xad, 0xab, 0x35, 0x78, 0x86, 0x9d, 0x44, 0x85, 0x34, 0xef, 0xf0, 0x6f, 0xfe, 0x6d, 0xae, 0x5a, 0xf5, 0x26, 0x57, 0x1d, 0x54, 0x7f, 0x1e, 0x87, 0xc4, 0xdd, 0x26, 0x10, 0x5c, 0xe2, 0xcd, 0x05, 0x3e, 0xfd, 0x69, 0x16, 0x6f, 0xa3, 0x35, 0x9d, 0xb7, 0x57, 0x50, 0x58, 0xfd, 0x8b, 0x64, 0xea, 0x58, 0x18, 0x5d, 0x1b, 0xc0, 0x39, 0x35, 0xb0, 0x58, 0xd6, 0x07, 0x36, 0xcf, 0x44, 0xcb, 0x83, 0x4d, 0xea, 0xe8, 0x14, 0xb4, 0xeb, 0xbf, 0xf3, 0x09, 0x2d, 0x21, 0x07, 0xae, 0x03, 0xa8, 0xe6, 0xd5, 0x4e, 0x07, 0xd8, 0x47, 0x86, 0x22, 0xeb, 0x78, 0xa0, 0xa8, 0x29, 0x43, 0xc0, 0xc7, 0xb5, 0x25, 0xbc, 0x81, 0xec, 0x1e, 0xf0, 0x84, 0x4d, 0xbd, 0x2a, 0x33, 0x60, 0x6f, 0xd1, 0x68, 0x5c, 0x75, 0xeb, 0xd6, 0xe4, 0xbc, 0x12, 0x1e, 0x6b, 0x12, 0x68, 0xcb, 0x74, 0x38, 0x4b, 0xa2, 0x2f, 0x12, 0x6c, 0xaf, 0x74, 0x52, 0xc9, 0x41, 0xf1, 0x38, 0x20, 0x33, 0xd2, 0x95, 0x5f, 0xf7, 0x8d, 0x5b, 0x94, 0x23, 0x3b, 0x44, 0x3a, 0x4b, 0x7a, 0xc9, 0xda, 0xdd, 0xf1, 0xf8, 0x7e, 0xd9, 0xd6, 0xb0, 0xd3, 0xdb, 0x8a, 0x49, 0x40, 0x4d, 0xbe, 0x2b, 0x94, 0x81, 0xe4, 0x76, 0xc2, 0x6f, 0xef, 0xb0, 0xdf, 0xdd, 0x7b, 0xe1, 0xc7, 0x39, 0x1b, 0x43, 0x69, 0xd1, 0x67, 0x53, 0xe3, 0x55, 0xf4, 0x55, 0x16, 0x37];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("2c0e48384c9d925cc33a45f395f203b4809477c7f078298f6e5d8ddb"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("4337ee4f30672800783e027796ce96d2c2f9e8d9daae4457de9d8dec045a12dd"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("db6afb7c453b3d2c40aabe8f3f4547ffafac2faccbf7f87da58fab04dc0cd5eea11c6136f8b59edb71b2f4f6940d45a0"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("b2e19b487f42dbdd7c6bc2599f022866186c0192b8bc76a8ef4ef7f7206c9458c72b354b2ba899831bfc604743c8dfc5f1dc62638ff304ad0bc00056fe9d0b2d"));
	let bytes = &[0x56, 0x85, 0x86, 0xeb, 0xc7, 0x17, 0xfd, 0x68, 0xd3, 0xc4, 0x39, 0xc6, 0xa9, 0xcc, 0xe9, 0xc5, 0x85, 0xe1, 0x34, 0x7d, 0xbe, 0xa8, 0x58, 0xc0, 0xa7, 0xcd, 0xa1, 0x5f, 0xa4, 0xa1, 0xa8, 0xf4, 0x62, 0xc2, 0xc2, 0xe0, 0xff, 0x96, 0x80, 0x6d, 0x8e, 0xcd, 0xb8, 0xb1, 0x62, 0xd3, 0xbf, 0x4a, 0xac, 0x7d, 0xf4, 0x90, 0xdc, 0xda, 0x96, 0x26, 0x98, 0x9c, 0x65, 0xd5, 0xb9, 0x92, 0xe5, 0x23, 0x3f, 0xc2, 0xad, 0x0f, 0xfc, 0x27, 0xe9, 0xd6, 0x1e, 0x1c, 0x0d, 0xa8, 0xb0, 0xd0, 0x67, 0x3b, 0xd6, 0xc4, 0x22, 0x94, 0xa9, 0x1e, 0xa5, 0x17, 0x52, 0xd2, 0xcc, 0xde, 0x8c, 0x58, 0xb5, 0x46, 0xbf, 0xa0, 0x91, 0x9f, 0x88, 0x13, 0x54, 0x83, 0x0b, 0x51, 0x18, 0x4a, 0x2b, 0xc3, 0xb2, 0x01, 0x55, 0x5d, 0x77, 0x68, 0x6c, 0xf7, 0x0f, 0xd5, 0xc7, 0xe5, 0x0a, 0xa9, 0x5f, 0xad, 0x3f, 0xf0, 0x0b, 0x76, 0x21, 0xaf, 0x37, 0xdf, 0x6b, 0xef, 0x56, 0xd5, 0xdd, 0x39, 0x40, 0x8e, 0x67, 0x1e, 0x92, 0x0b, 0x76, 0xc9, 0x1b, 0xfc, 0xba, 0x0d, 0x3a, 0x64, 0x5f, 0xef, 0x08, 0x77, 0xa8, 0x0a, 0x32, 0x99, 0x88, 0x71, 0xbe, 0x09, 0xfa, 0x95, 0x1f, 0x12, 0x11, 0x89, 0x47, 0xc4, 0xd0, 0x9d, 0x53, 0x06, 0xb6, 0xd2, 0x69, 0x0d, 0x1d, 0x9a, 0x24, 0xba, 0xc3, 0xad, 0x42, 0x8a, 0xf1, 0x2c, 0xe0, 0x59, 0x25, 0xbc, 0x7a, 0xdd, 0xcb, 0x72, 0xcc, 0xaf, 0x8f, 0xed, 0x0a, 0xf8, 0x35, 0xf3, 0x95, 0x3e, 0x7d, 0xe7, 0x34, 0x69, 0xb8, 0x6e, 0x0c, 0xdd, 0x7d, 0x15, 0x59, 0x1a, 0x99, 0x8f, 0xd2, 0x97, 0xee, 0x93, 0x47, 0xcf, 0x3a, 0x48, 0x14, 0xe8, 0xd4, 0x25, 0x9f, 0x78, 0x20, 0x56, 0xc8, 0x5c, 0x2b, 0x92, 0x83, 0x74, 0xeb, 0x0d, 0x58, 0x52, 0x43, 0xb5, 0x6a, 0xac, 0x38, 0xc5, 0xfb, 0x1e, 0xb6, 0x87, 0x61, 0xe1, 0xbd, 0x6c, 0x64, 0xd7, 0x0f, 0xdb, 0x16, 0x78, 0x77, 0x0a, 0x30, 0xc0, 0xd3, 0x83, 0x1c, 0x54, 0x0f, 0xc9, 0xab, 0x00, 0x82, 0x68, 0x14, 0xe7, 0x2d, 0xe8, 0xe2, 0x12, 0xd2, 0xf9, 0x0a, 0x87, 0x35, 0x69, 0x4e, 0x4e, 0x39, 0x94, 0x03, 0x9a, 0xab, 0xaa, 0xe5, 0x4b, 0x40, 0xcc, 0x02, 0x86, 0x75, 0x27, 0xf8, 0xdc, 0x95, 0x8e, 0xbe, 0x3c, 0x52, 0x66, 0x46, 0x5d, 0xdd, 0xc9, 0xd0, 0xce, 0x0c, 0x59, 0xde, 0x27, 0x9b, 0x0a, 0xce, 0x2d, 0xa6, 0x85, 0x50, 0x6d, 0x7c, 0xc8, 0xaf, 0x88, 0xe2, 0xc2, 0xdf, 0x86, 0x99, 0x9b, 0x3b, 0x96, 0x97, 0xa7, 0x97, 0x23, 0xa7, 0x3d, 0x44, 0x2f, 0xc2, 0x19, 0xcb, 0xa3, 0x58, 0xa5, 0x1d, 0x20, 0x2e, 0xc3, 0x92, 0x13, 0x19, 0x84, 0x13, 0xb7, 0x9c, 0xa7, 0xb3, 0xf5, 0x52, 0x09, 0x4d, 0x5e, 0xcb, 0x82, 0xa3, 0x18, 0x33, 0x3b, 0x90, 0x73, 0xc2, 0x4b, 0x3a, 0x70, 0xad, 0x72, 0x6d, 0xf0, 0x75, 0x5a, 0x9d, 0xc0, 0x78, 0x00, 0xea, 0xbd, 0x8a, 0xd0, 0xec, 0x0e, 0x20, 0x49, 0x62, 0x04, 0x60, 0xef, 0x21, 0x71, 0xfe, 0x14, 0x50, 0x56, 0x54, 0x95, 0x69, 0x21, 0x02, 0xfd, 0x16, 0x24, 0xa8, 0xa5, 0x06, 0x36, 0x42, 0x12, 0x65, 0x2c, 0x82, 0xe8, 0x59, 0xc5, 0x3c, 0xb0, 0x1b, 0xaa, 0x8c, 0x32, 0xfd, 0xef, 0x39, 0x3a, 0xd7, 0xad, 0x40, 0xb0, 0xde, 0x07, 0xec, 0x7a, 0xb7, 0xa2, 0x08, 0x72, 0x84, 0x75, 0x60, 0x27, 0xfe, 0xb6, 0xc0, 0x27, 0x08, 0x7f, 0x39, 0x0d, 0x6e, 0xc3, 0x34, 0xa1, 0xb6, 0xa1, 0xca, 0x29, 0x94, 0xa0, 0x6f, 0xf0, 0x1b, 0x43, 0x08, 0xd6, 0x42, 0x03, 0x0d, 0xdf, 0xe9, 0x0f, 0x63, 0x40, 0x34, 0xd7, 0xbe, 0x27, 0xa5, 0xc0, 0x47, 0x0c, 0x1d, 0x98, 0x68, 0x2a, 0x1d, 0xc7, 0x26, 0x04, 0x3a, 0xb1, 0x4d, 0xd5, 0x8b, 0xd8, 0x22, 0xd4, 0xd1, 0xca, 0x2d, 0x4b, 0x04, 0xf6, 0x69, 0xc2, 0x4d, 0x3f, 0xae, 0x79, 0x01, 0xcd, 0x9d, 0x36, 0x6c, 0xab, 0xb5, 0xf2, 0x00, 0xb0, 0x61, 0x9e, 0xa2, 0x2c, 0xb4, 0x1b, 0x11, 0x2d, 0x94, 0x3c, 0x13, 0xa5, 0xa0, 0x69, 0x8f, 0xc1, 0x8c, 0xa3, 0x16, 0xaa, 0x10, 0x9a, 0x3e, 0xa8, 0xcf, 0x56, 0x23, 0xbf, 0xd1, 0xce];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("261a282918a71e5cc525888d06db9ab2b469a156eb320dfefb45304d"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("336bb9b4e37371ad6ca8ffba5d6bac2477f8b85917408efdd43453fbd9988639"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("8b967a05c44c5f350358d396ac21c4d771b62047371916d25e23227723f85f28e06d0a29191731771abc77e1a47bd384"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("613bb48bf125054b28e56f2df80d225f4b5662d15fbccf6b17c0e157fa371837fd9de884c66905c58382b4690f129035cf5f47e17d6ae19201eb0dd50e7e6e00"));
	let bytes = &[0x88, 0x5d, 0xa6, 0xe6, 0x1f, 0x38, 0x8c, 0xbf, 0x77, 0x81, 0x90, 0xc9, 0x37, 0x6f, 0xad, 0x93, 0xb6, 0xd4, 0x8c, 0x2d, 0x22, 0x1e, 0x65, 0x74, 0x59, 0x9e, 0x2b, 0xac, 0xf3, 0xe9, 0x5b, 0x8e, 0x94, 0x18, 0x5a, 0x09, 0x9d, 0xfa, 0xdc, 0x4c, 0xa4, 0x00, 0x1a, 0x2d, 0x40, 0x03, 0x8a, 0x8b, 0x30, 0xe6, 0x37, 0x2f, 0x5f, 0x14, 0x83, 0xfa, 0x90, 0x49, 0x34, 0x19, 0x83, 0x94, 0x82, 0x6f, 0x86, 0xb1, 0xc9, 0xad, 0x1a, 0x7f, 0x47, 0xca, 0xe4, 0x4c, 0x9e, 0x4d, 0x5e, 0x43, 0xe1, 0xcb, 0x4d, 0x09, 0x59, 0xfd, 0xdc, 0xf3, 0xdb, 0x9d, 0x73, 0x79, 0x42, 0xd0, 0xdc, 0x7b, 0x40, 0x19, 0xe2, 0x0f, 0x7c, 0x35, 0x07, 0xe3, 0x28, 0x9f, 0x26, 0xde, 0x3b, 0x4a, 0xdc, 0xb8, 0xa2, 0x2b, 0x50, 0x78, 0xe8, 0x9b, 0x74, 0x09, 0x29, 0x7e, 0x87, 0x41, 0xc2, 0x8d, 0x02, 0x20, 0xf2, 0x80, 0xd2, 0x36, 0x54, 0x0d, 0x24, 0x06, 0xc9, 0x6d, 0xd6, 0x1b, 0x9c, 0x96, 0x9d, 0x04, 0x83, 0x04, 0x55, 0xe9, 0xeb, 0xe0, 0x23, 0x34, 0x91, 0xae, 0x71, 0x6d, 0xb6, 0x75, 0x0a, 0x86, 0xf8, 0x71, 0x16, 0x4d, 0x0b, 0xe3, 0x3b, 0x9d, 0xed, 0xc7, 0x11, 0x1a, 0xa1, 0xbf, 0x09, 0x91, 0xa8, 0xa8, 0x4c, 0x70, 0x94, 0xa3, 0x96, 0x30, 0x12, 0x4f, 0xa6, 0xb6, 0xde, 0x33, 0x8f, 0x2a, 0x61, 0x92, 0xda, 0x89, 0xa4, 0x68, 0x4f, 0x1e, 0xd3, 0x8d, 0x59, 0x15, 0x68, 0x20, 0x76, 0x87, 0x14, 0xc6, 0x45, 0x80, 0xf1, 0x57, 0x84, 0x46, 0x02, 0xa6, 0xe5, 0xe9, 0x2f, 0x51, 0xca, 0x03, 0x90, 0x2d, 0x35, 0x05, 0x57, 0xd4, 0xcc, 0x77, 0x32, 0xc0, 0xba, 0x8b, 0x15, 0x89, 0xb9, 0x6f, 0xab, 0x9a, 0xba, 0x61, 0xef, 0x72, 0xc2, 0x96, 0x6f, 0x29, 0x1c, 0x00, 0xc4, 0xcc, 0xfe, 0x4f, 0xd9, 0xbf, 0x52, 0x63, 0x32, 0x2b, 0x21, 0xfd, 0xf3, 0xad, 0x72, 0x3b, 0xbb, 0xb2, 0xeb, 0xaf, 0x5b, 0x5a, 0x8d, 0xa7, 0xd7, 0xa6, 0xce, 0xed, 0x79, 0x76, 0xff, 0x62, 0x79, 0x43, 0xf5, 0x1c, 0x1f, 0xe7, 0xa8, 0xb1, 0x15, 0x20, 0xaf, 0x2f, 0x93, 0x04, 0x86, 0xc5, 0x26, 0xc2, 0xfb, 0x3b, 0x2d, 0xf8, 0xc4, 0xc7, 0xba, 0xf8, 0xf9, 0xce, 0x3d, 0x3e, 0x1c, 0x24, 0xf4, 0x1d, 0xff, 0xcf, 0xaa, 0x4a, 0x47, 0x72, 0xb7, 0xc7, 0x27, 0x58, 0x22, 0xed, 0xcf, 0xdf, 0xaf, 0xdf, 0x5a, 0xbf, 0x36, 0x41, 0xd1, 0xa0, 0x88, 0x0e, 0x59, 0xd9, 0x69, 0x93, 0x50, 0x28, 0xcf, 0x42, 0x75, 0xce, 0x4c, 0x0a, 0xce, 0x90, 0x11, 0x0c, 0xa5, 0x0c, 0x7d, 0x07, 0xa6, 0xb0, 0x9e, 0x43, 0xd0, 0x57, 0x26, 0xe9, 0x03, 0xb5, 0x33, 0x74, 0x25, 0x91, 0x2c, 0xa4, 0x65, 0x2a, 0x05, 0xf6, 0x98, 0x0e, 0x6b, 0x3b, 0x73, 0xf5, 0x6c, 0x59, 0xdc, 0x0e, 0x1d, 0x85, 0xa6, 0xfd, 0x58, 0x7a, 0x4a, 0x43, 0xe3, 0x23, 0xba, 0x85, 0x15, 0x42, 0xc1, 0xb0, 0xd8, 0x29, 0x5f, 0x82, 0x60, 0xdb, 0xb1, 0xac, 0x51, 0x8d, 0xb6, 0x25, 0x14, 0x31, 0x01, 0xdc, 0x43, 0x7e, 0x68, 0xdd, 0x26, 0xe5, 0xe0, 0x0e, 0x06, 0x73, 0xe3, 0xef, 0xef, 0x4f, 0xa1, 0x33, 0x6c, 0x5e, 0x5f, 0xd6, 0x94, 0xfe, 0x11, 0x29, 0xfa, 0x6c, 0x07, 0x22, 0xa0, 0x28, 0x8a, 0x69, 0xdd, 0x42, 0xe0, 0xd9, 0x20, 0xf8, 0x61, 0x31, 0xcf, 0xac, 0x09, 0xac, 0xcc, 0xcf, 0x2a, 0xf1, 0x6e, 0xd2, 0x88, 0x45, 0x6a, 0xe0, 0x49, 0xea, 0x62, 0x0a, 0x25, 0x18, 0xa5, 0x78, 0xe1, 0xfa, 0x76, 0x58, 0xd7, 0x88, 0x1b, 0x56, 0xaf, 0x1f, 0x36, 0x45, 0x62, 0x4a, 0x67, 0xd9, 0x13, 0x2b, 0x03, 0x96, 0x05, 0xbe, 0x22, 0x38, 0xa0, 0x1b, 0x5f, 0x89, 0x88, 0x5f, 0x6e, 0x01, 0x77, 0x02, 0xfe, 0xb4, 0xca, 0x8c, 0xce, 0x6b, 0x57, 0x8e, 0xbb, 0x74, 0x63, 0xed, 0x41, 0x67, 0x10, 0x9a, 0x96, 0xae, 0x39, 0x5b, 0xbb, 0x00, 0x74, 0xf1, 0xbf, 0x0c, 0x4f, 0x25, 0x33, 0xa7, 0x67, 0xb0, 0x0b, 0x4f, 0xe4, 0xc4, 0x1c, 0x25, 0x96, 0xe6, 0xfc, 0x89, 0xd3, 0x28, 0x19, 0x2e, 0x15, 0x2a, 0x33, 0x0f, 0x0a, 0x6d, 0xd1, 0x7a, 0xf9, 0xd0, 0x91, 0x78, 0x6c];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("22a5fa69630a5c79f0be8ca6a5a2c482dd1819cab01edb03086aa641"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("f977fdcebc42a74db07bd8afcc77c3362753e1d1c3bab3d5b130c51a635a870c"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("7c98a8e55f6dbd0c67a4758b59ed1519f93e8ea89ad05ffe18f825634970c5e1ddf8c078a81b6e67afdb5924976e3484"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("7e40759ca0170db6db04df32f5df32b51e8d45922c2d15ef05e075d3f372217540bdaf37bbadb06a0845cbd3a2ce22ae06f7926b69da15893934b5add679eb9f"));
	let bytes = &[0xcc, 0xe5, 0xf5, 0x7a, 0x55, 0x52, 0x87, 0xe1, 0x05, 0x73, 0x0a, 0xd4, 0x59, 0x93, 0x98, 0x85, 0x6e, 0x42, 0x13, 0x99, 0x97, 0x9e, 0x7a, 0x52, 0x49, 0x6e, 0x3b, 0x35, 0x50, 0xf1, 0x7e, 0x8f, 0x7d, 0xc4, 0x2a, 0x72, 0x45, 0x03, 0xdd, 0xc0, 0x8c, 0x24, 0x3f, 0xc6, 0x75, 0xcc, 0x9f, 0x66, 0xb7, 0x33, 0x6d, 0x89, 0x87, 0x4c, 0x39, 0xb3, 0xdc, 0xeb, 0x03, 0x06, 0x9f, 0x03, 0xcb, 0x0d, 0xeb, 0xf0, 0xba, 0xc2, 0xd2, 0xaf, 0xbe, 0x78, 0xa4, 0x67, 0x68, 0x1a, 0xdf, 0xf0, 0xa9, 0x0a, 0x82, 0x5a, 0x29, 0xad, 0xf2, 0x59, 0xb3, 0xca, 0xb5, 0xfb, 0xc9, 0xd4, 0x93, 0x4a, 0x4d, 0x85, 0xa8, 0xf6, 0xef, 0x19, 0x34, 0x67, 0x39, 0x7e, 0xca, 0x6b, 0x82, 0x7a, 0x19, 0x22, 0xb0, 0x7a, 0xb0, 0x4e, 0xf0, 0x46, 0x0c, 0x31, 0xf6, 0x7a, 0x30, 0xad, 0x16, 0x0e, 0x39, 0xa6, 0x26, 0xf7, 0x34, 0xbe, 0x12, 0x15, 0x17, 0x14, 0x8f, 0x8a, 0xdf, 0xcc, 0x38, 0xa8, 0x2d, 0x94, 0xf7, 0xb3, 0x5f, 0x33, 0xd8, 0x35, 0xb4, 0xc7, 0x82, 0x11, 0x4f, 0x75, 0xcd, 0xe2, 0x7c, 0x7c, 0x47, 0x71, 0x99, 0x6c, 0x78, 0xa8, 0xd0, 0x5f, 0x87, 0xff, 0x6d, 0xd5, 0x7c, 0xfd, 0x81, 0x03, 0x66, 0xe2, 0x06, 0x15, 0x49, 0xfa, 0x81, 0xa6, 0x96, 0x25, 0x59, 0x1d, 0x95, 0xc0, 0x47, 0x51, 0x9a, 0xa2, 0x89, 0xcf, 0x51, 0x67, 0x4d, 0xbb, 0xa8, 0xd7, 0xb1, 0x6c, 0xd0, 0x7f, 0xe1, 0x24, 0x28, 0x6d, 0x0f, 0xb4, 0x86, 0x16, 0x29, 0x86, 0x20, 0x4c, 0x96, 0x71, 0x40, 0x44, 0x66, 0xdb, 0x6e, 0xca, 0x42, 0x14, 0x49, 0xf4, 0xbb, 0xe5, 0xce, 0xdc, 0xeb, 0x91, 0x8b, 0xef, 0x54, 0x4c, 0x9d, 0x8c, 0x1d, 0x2a, 0x33, 0x5b, 0x34, 0xcf, 0x9f, 0xa1, 0x66, 0x4d, 0xdc, 0xc6, 0xc9, 0xc5, 0x2f, 0x27, 0x58, 0x4a, 0x4f, 0x0e, 0x07, 0x57, 0xf9, 0x60, 0x00, 0xf4, 0x81, 0x48, 0x0d, 0x75, 0x7d, 0x5e, 0x7b, 0xf0, 0x7b, 0x5b, 0x92, 0x18, 0xd0, 0x72, 0xb1, 0xc8, 0xbd, 0x23, 0x09, 0xbb, 0x11, 0xc0, 0xf9, 0x82, 0x3c, 0xcd, 0xfe, 0xdf, 0x84, 0x95, 0x30, 0x7e, 0x3c, 0xa3, 0x77, 0x14, 0x41, 0x86, 0xb5, 0xf9, 0xaf, 0xb4, 0x4e, 0x64, 0x51, 0x5f, 0x92, 0x41, 0x68, 0x66, 0xfa, 0x44, 0x71, 0x7a, 0x0f, 0xbc, 0x36, 0x03, 0x4e, 0x12, 0x1c, 0x9a, 0x32, 0xf4, 0x6d, 0xfb, 0xe2, 0xbd, 0xc5, 0xa1, 0x37, 0x96, 0xbb, 0xad, 0xf5, 0xb3, 0x09, 0x71, 0x74, 0xf4, 0xd6, 0xb6, 0x26, 0xce, 0x74, 0x0f, 0x0f, 0x76, 0x00, 0x29, 0x16, 0x5a, 0x91, 0xc8, 0xe0, 0x50, 0x65, 0x28, 0x17, 0x31, 0x18, 0x18, 0xf0, 0x78, 0xb4, 0x2d, 0xd6, 0xa2, 0x89, 0x7d, 0xf4, 0xbf, 0x3e, 0x28, 0x25, 0x34, 0xee, 0x92, 0x87, 0x16, 0xae, 0xd4, 0x32, 0xe1, 0xb4, 0xaf, 0xb1, 0x22, 0x75, 0xb4, 0x1d, 0x25, 0x1c, 0xba, 0x36, 0x75, 0xf4, 0x3d, 0xde, 0xf8, 0x01, 0x8a, 0x53, 0x74, 0xd8, 0x6d, 0xf7, 0x07, 0xf4, 0x60, 0x61, 0x60, 0xaa, 0x6f, 0x74, 0x08, 0x33, 0xde, 0x3a, 0x59, 0xcb, 0x37, 0x50, 0xf0, 0x0e, 0x46, 0xf1, 0xf3, 0xde, 0xf6, 0x53, 0xb1, 0xd5, 0xa2, 0xc7, 0x63, 0x3d, 0x1c, 0x64, 0x95, 0xcb, 0x0a, 0xbb, 0x3b, 0x49, 0x39, 0x2c, 0xab, 0x1a, 0x37, 0x69, 0x0d, 0x12, 0x68, 0x70, 0x49, 0xd7, 0xba, 0x2b, 0xae, 0xbd, 0xf7, 0x1d, 0x9a, 0x9c, 0xaf, 0xd4, 0x26, 0x87, 0x2b, 0x74, 0x3b, 0x02, 0xae, 0x82, 0xcd, 0x2a, 0x27, 0xe7, 0xd3, 0x8e, 0xab, 0x63, 0x63, 0x97, 0x73, 0xa5, 0xda, 0xbb, 0xfc, 0x19, 0xb6, 0x26, 0xea, 0x54, 0xa9, 0x0d, 0x51, 0xfd, 0x64, 0x53, 0xd4, 0x55, 0xfa, 0x1f, 0xfe, 0x9c, 0x52, 0x1e, 0x39, 0x27, 0xf7, 0x50, 0x23, 0xcf, 0xc7, 0xd3, 0x04, 0x81, 0x5a, 0x9b, 0x9f, 0x42, 0x19, 0x63, 0xee, 0x76, 0xb5, 0xb1, 0x4b, 0xde, 0x88, 0x1e, 0x4e, 0xb0, 0x01, 0x4e, 0x34, 0xf4, 0x72, 0xc6, 0x89, 0x7f, 0x49, 0x0b, 0xb5, 0x53, 0x1b, 0xbd, 0x39, 0x2e, 0x90, 0x13, 0x5a, 0x71, 0x08, 0x34, 0xed, 0x79, 0xd2, 0xf7, 0xd9, 0x6a, 0x82, 0xc9, 0x4d, 0xc7, 0x9a, 0x1a, 0xc8, 0x5a, 0x88];
	keccak224.update(bytes);
	assert_eq!(keccak224.digest_to_hex(), String::from("45605a2f00ad5081c1d04ac6ce291eb1327ca8ce528a15bb727896c2"));
	keccak256.update(bytes);
	assert_eq!(keccak256.digest_to_hex(), String::from("d11c7aa250c5c920e0fd0445f91dd6f6faeeca17a349a7ee16d007af80c07a63"));
	keccak384.update(bytes);
	assert_eq!(keccak384.digest_to_hex(), String::from("a25810b938081a3a74a545d3b9680ad1809d7664009f779951b7b3711e0bc9efaadadb2a5747f1e760878aff54aae18a"));
	keccak512.update(bytes);
	assert_eq!(keccak512.digest_to_hex(), String::from("7baaa88b5d3a0abc63d985e85d30368939781bf968007c903a1051905f919da32d407ddeb7b92029e6ab2786855b7595c0ed2ce61a549c301b9c55fdf10404e5"));
}
